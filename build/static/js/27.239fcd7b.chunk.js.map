{"version":3,"sources":["views/Farms/components/FarmCard/DetailsSection.tsx","views/Farms/components/FarmCard/CardHeading.tsx","views/Farms/components/DepositModal.tsx","views/Farms/components/WithdrawModal.tsx","views/Farms/components/FarmCard/StakeAction.tsx","views/Farms/components/FarmCard/HarvestAction.tsx","views/Farms/components/FarmCard/CardActionsContainer.tsx","views/Farms/components/FarmCard/ApyCalculatorModal.tsx","views/Farms/components/FarmCard/ApyButton.tsx","views/Farms/components/FarmCard/FarmCard.tsx","views/Farms/components/FarmTabButtons/index.tsx","views/Farms/components/Divider.tsx","views/Farms/Farms.tsx"],"names":["Wrapper","styled","div","StyledLinkExternal","LinkExternal","theme","colors","text","primary","DetailsSection","isTokenOnly","bscScanAddress","removed","totalValueFormated","lpLabel","quoteTokenAdresses","quoteTokenSymbol","tokenAddresses","TranslateString","useI18n","liquidityUrlPathParts","getLiquidityUrlPathParts","justifyContent","href","process","external","bold","Flex","MultiplierTag","Tag","CardHeading","multiplier","farmImage","risk","tokenSymbol","depositFee","unstakingFee","alignItems","mb","src","alt","width","height","flexDirection","variant","DepositModal","max","onConfirm","onDismiss","tokenName","depositFeeBP","useState","val","setVal","pendingTx","setPendingTx","fullBalance","useMemo","getFullDisplayBalance","handleChange","useCallback","e","currentTarget","value","handleSelectMax","title","TokenInput","onSelectMax","onChange","symbol","ModalActions","onClick","disabled","a","WithdrawModal","unstakingFeeBP","IconButtonWrapper","StakeAction","stakedBalance","tokenBalance","pid","onStake","useStake","onUnstake","useUnstake","rawStakedBalance","getBalanceNumber","displayBalance","toLocaleString","useModal","onPresentDeposit","onPresentWithdraw","color","mr","BalanceAndCompound","HarvestAction","earnings","onReward","useHarvest","rawEarningsBalance","size","marginBottom","toString","Action","CardActions","farm","ethereum","account","requestedApproval","setRequestedApproval","useFarmFromPid","lpAddresses","useFarmUser","allowance","lpAddress","tokenAddress","lpName","lpSymbol","toUpperCase","isApproved","isGreaterThan","lpContract","getContract","onApprove","useApprove","handleApprove","console","error","textTransform","fontSize","pr","mt","UnlockButton","fullWidth","Grid","GridItem","Description","Text","ApyCalculatorModal","cakePrice","apy","farmApy","times","BigNumber","toNumber","oneThousandDollarsWorthOfCake","cakeEarnedPerThousand1D","calculateCakeEarnedPerThousandDollars","numberOfDays","cakeEarnedPerThousand7D","cakeEarnedPerThousand30D","cakeEarnedPerThousand365D","apyModalRoi","amountEarned","amountInvested","ApyButton","onPresentApyModal","scale","ml","RainbowLight","keyframes","StyledCardAccent","FCard","props","card","background","Divider","borderColor","ExpandingWrapper","expanded","FarmCard","senzuPrice","bnbPrice","showExpandableSection","setShowExpandableSection","toLowerCase","cake2Price","totalValue","lpTotalInQuoteToken","QuoteToken","BNB","CAKE","SENZU","CAKE2","Number","undefined","maximumFractionDigits","farmAPY","minimumFractionDigits","style","display","CardActionsContainer","ExpandableSectionButton","FarmTabButtons","stakedOnly","setStakedOnly","useRouteMatch","url","isExact","ToggleWrapper","checked","activeIndex","as","Link","to","textSubtle","Farms","farmsProps","path","farmsLP","useFarms","usePriceCakeBusd","usePrice3CakeBusd","usePriceBnbBusd","useWallet","tokenMode","dispatch","useDispatch","fastRefresh","useRefresh","useEffect","fetchFarmUserDataAsync","activeFarms","filter","inactiveFarms","stakedOnlyFarms","userData","farmsList","farmsToDisplay","map","cakeRewardPerYear","dballPerBlock","poolWeight","pow","BLOCKS_PER_YEAR","comparedTo","Page","textAlign","exact"],"mappings":"6sBAkBA,IAAMA,EAAUC,IAAOC,IAAV,KAIPC,EAAqBF,YAAOG,IAAPH,CAAH,KAGb,qBAAGI,MAAkBC,OAAOC,QAQ3B,qBAAGF,MAAkBC,OAAOE,WA6CzBC,EAzC0C,SAAC,GASnD,IARLC,EAQI,EARJA,YACAC,EAOI,EAPJA,eACAC,EAMI,EANJA,QACAC,EAKI,EALJA,mBACAC,EAII,EAJJA,QACAC,EAGI,EAHJA,mBACAC,EAEI,EAFJA,iBACAC,EACI,EADJA,eAEMC,EAAkBC,cAClBC,EAAwBC,YAAyB,CAAEN,qBAAoBC,mBAAkBC,mBAE/F,OACE,eAACjB,EAAD,WACE,eAAC,IAAD,CAAMsB,eAAe,gBAArB,UACE,eAAC,KAAD,WAAOJ,EAAgB,IAAK,SAA5B,OACA,cAACf,EAAD,CAAoBoB,KAClBb,EAAW,wDACwCO,EAAeO,KADvD,uDAGuCJ,GAJpD,SAMGN,QAGHF,GACA,eAAC,IAAD,CAAMU,eAAe,gBAArB,UACE,eAAC,KAAD,WAAOJ,EAAgB,GAAI,mBAA3B,OACA,cAAC,KAAD,UAAOL,OAGX,cAAC,IAAD,CAAMS,eAAe,aAArB,SACE,cAAC,IAAD,CAAMG,UAAQ,EAACF,KAAMZ,EAAgBe,MAAM,EAA3C,SACGR,EAAgB,IAAK,2B,6MCxDhC,IAAMlB,EAAUC,YAAO0B,IAAP1B,CAAH,KAMP2B,EAAgB3B,YAAO4B,KAAP5B,CAAH,KA8BJ6B,EA1BuC,SAAC,GAQhD,IAPLhB,EAOI,EAPJA,QACAiB,EAMI,EANJA,WAEAC,GAII,EALJC,KAKI,EAJJD,WACAE,EAGI,EAHJA,YAGI,EAFJC,WAEI,EADJC,aAEA,OACE,eAAC,EAAD,CAASd,eAAe,gBAAgBe,WAAW,SAASC,GAAG,OAA/D,UACE,cAAC,IAAD,CAAOC,IAAG,wBAAmBP,EAAnB,QAAoCQ,IAAKN,EAAaO,MAAO,GAAIC,OAAQ,KAEnF,eAAC,IAAD,CAAMC,cAAc,SAASN,WAAW,WAAxC,UACE,cAAC,IAAD,CAASC,GAAG,MAAZ,SAAmBxB,IACnB,cAAC,IAAD,CAAMQ,eAAe,SAArB,SAIE,cAACM,EAAD,CAAegB,QAAQ,YAAvB,SAAoCb,a,+FCqB/Bc,EAjDmC,SAAC,GAAqE,IAAnEC,EAAkE,EAAlEA,IAAKC,EAA6D,EAA7DA,UAAWC,EAAkD,EAAlDA,UAAkD,IAAvCC,iBAAuC,MAA3B,GAA2B,MAAtBC,oBAAsB,MAAP,EAAO,IAC/FC,mBAAS,IADsF,mBAC9GC,EAD8G,KACzGC,EADyG,OAEnFF,oBAAS,GAF0E,mBAE9GG,EAF8G,KAEnGC,EAFmG,KAG/GrC,EAAkBC,cAClBqC,EAAcC,mBAAQ,WAC1B,OAAOC,YAAsBZ,KAC5B,CAACA,IAEEa,EAAeC,uBACnB,SAACC,GACCR,EAAOQ,EAAEC,cAAcC,SAEzB,CAACV,IAGGW,EAAkBJ,uBAAY,WAClCP,EAAOG,KACN,CAACA,EAAaH,IAEjB,OACE,eAAC,IAAD,CAAOY,MAAK,UAAK/C,EAAgB,IAAK,WAA1B,YAAwC+B,EAAxC,WAA4DD,UAAWA,EAAnF,UACE,cAACkB,EAAA,EAAD,CACEH,MAAOX,EACPe,YAAaH,EACbI,SAAUT,EACVb,IAAKU,EACLa,OAAQpB,EACRC,aAAcA,IAEhB,eAACoB,EAAA,EAAD,WACE,cAAC,IAAD,CAAQ1B,QAAQ,YAAY2B,QAASvB,EAArC,SACG9B,EAAgB,IAAK,YAExB,cAAC,IAAD,CACEsD,SAAUlB,EACViB,QAAO,sBAAE,sBAAAE,EAAA,6DACPlB,GAAa,GADN,SAEDR,EAAUK,GAFT,OAGPG,GAAa,GACbP,IAJO,2CAFX,SASGM,EAAYpC,EAAgB,IAAK,wBAA0BA,EAAgB,IAAK,oBCa5EwD,EAvDqC,SAAC,GAM9C,IALL3B,EAKI,EALJA,UACAC,EAII,EAJJA,UACAF,EAGI,EAHJA,IAGI,IAFJG,iBAEI,MAFQ,GAER,MADJ0B,sBACI,MADa,EACb,IACkBxB,mBAAS,IAD3B,mBACGC,EADH,KACQC,EADR,OAE8BF,oBAAS,GAFvC,mBAEGG,EAFH,KAEcC,EAFd,KAGErC,EAAkBC,cAClBqC,EAAcC,mBAAQ,WAC1B,OAAOC,YAAsBZ,KAC5B,CAACA,IAEEa,EAAeC,uBACnB,SAACC,GACCR,EAAOQ,EAAEC,cAAcC,SAEzB,CAACV,IAGGW,EAAkBJ,uBAAY,WAClCP,EAAOG,KACN,CAACA,EAAaH,IAEjB,OACE,eAAC,IAAD,CAAOY,MAAK,mBAAchB,GAAaD,UAAWA,EAAlD,UACE,cAACkB,EAAA,EAAD,CACEC,YAAaH,EACbI,SAAUT,EACVI,MAAOX,EACPN,IAAKU,EACLa,OAAQpB,EACR0B,eAAgBA,IAElB,eAACL,EAAA,EAAD,WACE,cAAC,IAAD,CAAQ1B,QAAQ,YAAY2B,QAASvB,EAArC,SACG9B,EAAgB,IAAK,YAExB,cAAC,IAAD,CACEsD,SAAUlB,EACViB,QAAO,sBAAE,sBAAAE,EAAA,6DACPlB,GAAa,GADN,SAEDR,EAAUK,GAFT,OAGPG,GAAa,GACbP,IAJO,2CAFX,SASGM,EAAYpC,EAAgB,IAAK,wBAA0BA,EAAgB,IAAK,oB,yHC5C3F,IAAM0D,EAAoB3E,IAAOC,IAAV,KAqDR2E,EA9CqC,SAAC,GAO9C,IANLC,EAMI,EANJA,cACAC,EAKI,EALJA,aACA9B,EAII,EAJJA,UACA+B,EAGI,EAHJA,IACA9B,EAEI,EAFJA,aACAyB,EACI,EADJA,eAEMzD,EAAkBC,cAChB8D,EAAYC,YAASF,GAArBC,QACAE,EAAcC,YAAWJ,GAAzBG,UAEFE,EAAmBC,YAAiBR,GACpCS,EAAiBF,EAAiBG,iBANpC,EAQuBC,aACzB,cAAC,EAAD,CAAc3C,IAAKiC,EAAchC,UAAWkC,EAAShC,UAAWA,EAAWC,aAAcA,KADpFwC,EARH,sBAWwBD,aAC1B,cAAC,EAAD,CAAe3C,IAAKgC,EAAe/B,UAAWoC,EAAWlC,UAAWA,EAAW0B,eAAgBA,KAD1FgB,EAXH,oBA+BJ,OACE,eAAC,IAAD,CAAMrE,eAAe,gBAAgBe,WAAW,SAAhD,UACE,cAAC,IAAD,CAASuD,MAA4B,IAArBP,EAAyB,eAAiB,OAA1D,SAAmEE,IAhBzC,IAArBF,EACL,cAAC,IAAD,CAAQd,QAASmB,EAAjB,SAAoCxE,EAAgB,IAAK,WAEzD,eAAC0D,EAAD,WACE,cAAC,IAAD,CAAYhC,QAAQ,WAAW2B,QAASoB,EAAmBE,GAAG,MAA9D,SACE,cAAC,IAAD,CAAWD,MAAM,cAEnB,cAAC,IAAD,CAAYhD,QAAQ,WAAW2B,QAASmB,EAAxC,SACE,cAAC,IAAD,CAASE,MAAM,qB,wLC7CzB,IAAME,EAAqB7F,IAAOC,IAAV,KAkDT6F,GA3CuC,SAAC,GAAuB,IAArBC,EAAoB,EAApBA,SAAUhB,EAAU,EAAVA,IAC3D9D,EAAkBC,cADmD,EAEzCgC,oBAAS,GAFgC,mBAEpEG,EAFoE,KAEzDC,EAFyD,KAGnE0C,EAAaC,YAAWlB,GAAxBiB,SACAhB,EAAYC,YAASF,GAArBC,QAEFkB,EAAqBb,YAAiBU,GACtCT,EAAiBY,EAAmBX,iBAE1C,OACE,eAAC,IAAD,CAAMlD,GAAG,MAAMhB,eAAe,gBAAgBe,WAAW,SAAzD,UACE,cAAC,IAAD,CAASuD,MAA8B,IAAvBO,EAA2B,eAAiB,OAA5D,SAAqEZ,IACrE,eAACO,EAAD,WACW,KAARd,EACC,cAAC,IAAD,CACER,SAAiC,IAAvB2B,GAA4B7C,EACtC8C,KAAK,KACLxD,QAAQ,YACRyD,aAAa,OACb9B,QAAO,sBAAE,sBAAAE,EAAA,6DACPlB,GAAa,GADN,SAED0B,EAAQkB,EAAmBG,YAF1B,OAGP/C,GAAa,GAHN,2CALX,SAWGrC,EAAgB,IAAK,cAEtB,KACJ,cAAC,IAAD,CACEsD,SAAiC,IAAvB2B,GAA4B7C,EACtCiB,QAAO,sBAAE,sBAAAE,EAAA,6DACPlB,GAAa,GADN,SAED0C,IAFC,OAGP1C,GAAa,GAHN,2CAFX,SAQGrC,EAAgB,IAAK,oB,+FC3ChC,IAAMqF,GAAStG,IAAOC,IAAV,MAmFGsG,GAtEqC,SAAC,GAAiC,IAA/BC,EAA8B,EAA9BA,KAAMC,EAAwB,EAAxBA,SAAUC,EAAc,EAAdA,QAC/DzF,EAAkBC,cAD2D,EAEjCgC,oBAAS,GAFwB,mBAE5EyD,EAF4E,KAEzDC,EAFyD,OAGMC,YAAeL,EAAKzB,KAArGA,EAH2E,EAG3EA,IAAK+B,EAHsE,EAGtEA,YAAa9F,EAHyD,EAGzDA,eAAgBP,EAHyC,EAGzCA,YAAawC,EAH4B,EAG5BA,aAAeyB,EAHa,EAGbA,eAHa,EAItBqC,YAAYhC,GAAjEiC,EAJ2E,EAI3EA,UAAWlC,EAJgE,EAIhEA,aAAcD,EAJkD,EAIlDA,cAAekB,EAJmC,EAInCA,SAC1CkB,EAAYH,EAAYvF,IACxB2F,EAAelG,EAAeO,IAC9B4F,EAASX,EAAKY,SAASC,cACvBC,EAAaZ,GAAWM,GAAaA,EAAUO,cAAc,GAE7DC,EAAahE,mBAAQ,WACzB,OAAG/C,EACMgH,YAAYhB,EAAsBS,GAEpCO,YAAYhB,EAAsBQ,KACxC,CAACR,EAAUQ,EAAWC,EAAczG,IAE/BiH,EAAcC,YAAWH,GAAzBE,UAEFE,EAAgBjE,sBAAW,sBAAC,sBAAAa,EAAA,sEAE9BoC,GAAqB,GAFS,SAGxBc,IAHwB,OAI9Bd,GAAqB,GAJS,gDAM9BiB,QAAQC,MAAR,MAN8B,yDAQ/B,CAACJ,IAmBJ,OACE,eAACpB,GAAD,WACE,eAAC,IAAD,WACE,cAAC,KAAD,CAAM7E,MAAI,EAACsG,cAAc,YAAYpC,MAAM,YAAYqC,SAAS,OAAOC,GAAG,MAA1E,mBAGA,cAAC,KAAD,CAAMxG,MAAI,EAACsG,cAAc,YAAYpC,MAAM,aAAaqC,SAAS,OAAjE,SACG/G,EAAgB,IAAK,eAG1B,cAAC,GAAD,CAAe8E,SAAUA,EAAUhB,IAAKA,IACxC,eAAC,IAAD,WACE,cAAC,KAAD,CAAMtD,MAAI,EAACsG,cAAc,YAAYpC,MAAM,YAAYqC,SAAS,OAAOC,GAAG,MAA1E,SACGd,IAEH,cAAC,KAAD,CAAM1F,MAAI,EAACsG,cAAc,YAAYpC,MAAM,aAAaqC,SAAS,OAAjE,SACG/G,EAAgB,IAAK,eAGxByF,EAnCGY,EACL,cAAC,EAAD,CACEzC,cAAeA,EACfC,aAAcA,EACd9B,UAAWmE,EACXpC,IAAKA,EACL9B,aAAcA,EACdyB,eAAgBA,IAGlB,cAAC,IAAD,CAAQwD,GAAG,MAAM1F,MAAM,OAAO+B,SAAUoC,EAAmBrC,QAASsD,EAApE,SACG3G,EAAgB,IAAK,sBAwBZ,cAACkH,EAAA,EAAD,CAAcD,GAAG,MAAME,WAAS,Q,waCzElD,IAAMC,GAAOrI,IAAOC,IAAV,MAOJqI,GAAWtI,IAAOC,IAAV,MAIRsI,GAAcvI,YAAOwI,KAAPxI,CAAH,MA8GFyI,GAzG+C,SAAC,GAQxD,IAPL1F,EAOI,EAPJA,UACAlC,EAMI,EANJA,QACAC,EAKI,EALJA,mBACAC,EAII,EAJJA,iBACAC,EAGI,EAHJA,eACA0H,EAEI,EAFJA,UACAC,EACI,EADJA,IAEM1H,EAAkBC,cAClBC,EAAwBC,YAAyB,CAAEN,qBAAoBC,mBAAkBC,mBAGzF4H,EAAUD,EAAIE,MAAM,IAAIC,IAAU,MAAMC,WAGxCC,EAAgC,IAAON,EAAUK,WAEjDE,EAA0BC,aAAsC,CAAEC,aAAc,EAAGP,UAASF,cAC5FU,EAA0BF,aAAsC,CAAEC,aAAc,EAAGP,UAASF,cAC5FW,EAA2BH,aAAsC,CAAEC,aAAc,GAAIP,UAASF,cAC9FY,EAA4BJ,aAAsC,CAAEC,aAAc,IAAKP,UAASF,cAEtG,OACE,eAAC,IAAD,CAAO1E,MAAM,MAAMjB,UAAWA,EAA9B,UACE,eAACsF,GAAD,WACE,cAACC,GAAD,UACE,cAAC,KAAD,CAAMN,SAAS,OAAOvG,MAAI,EAACkE,MAAM,aAAaoC,cAAc,YAAY1F,GAAG,OAA3E,SACGpB,EAAgB,IAAK,iBAG1B,cAACqH,GAAD,UACE,cAAC,KAAD,CAAMN,SAAS,OAAOvG,MAAI,EAACkE,MAAM,aAAaoC,cAAc,YAAY1F,GAAG,OAA3E,SACGpB,EAAgB,IAAK,WAG1B,cAACqH,GAAD,UACE,cAAC,KAAD,CAAMN,SAAS,OAAOvG,MAAI,EAACkE,MAAM,aAAaoC,cAAc,YAAY1F,GAAG,OAA3E,+BAKF,cAACiG,GAAD,UACE,cAAC,KAAD,mBAEF,cAACA,GAAD,UACE,eAAC,KAAD,WACGiB,aAAY,CAAEC,aAAcP,EAAyBQ,eAAgBT,IADxE,SAIF,cAACV,GAAD,UACE,cAAC,KAAD,UAAOW,MAGT,cAACX,GAAD,UACE,cAAC,KAAD,mBAEF,cAACA,GAAD,UACE,eAAC,KAAD,WACGiB,aAAY,CAAEC,aAAcJ,EAAyBK,eAAgBT,IADxE,SAIF,cAACV,GAAD,UACE,cAAC,KAAD,UAAOc,MAGT,cAACd,GAAD,UACE,cAAC,KAAD,oBAEF,cAACA,GAAD,UACE,eAAC,KAAD,WACGiB,aAAY,CAAEC,aAAcH,EAA0BI,eAAgBT,IADzE,SAIF,cAACV,GAAD,UACE,cAAC,KAAD,UAAOe,MAGT,cAACf,GAAD,UACE,cAAC,KAAD,0BAEF,cAACA,GAAD,UACE,eAAC,KAAD,WACGiB,aAAY,CAAEC,aAAcF,EAA2BG,eAAgBT,IAD1E,SAIF,cAACV,GAAD,UACE,cAAC,KAAD,UAAOgB,SAGX,cAACf,GAAD,CAAaP,SAAS,OAAOrC,MAAM,aAAnC,SACG1E,EACC,IACA,sKAGJ,cAAC,IAAD,CAAMI,eAAe,SAArB,SACE,eAAC,IAAD,CAAcC,KAAI,qDAAgDH,GAAlE,UACGF,EAAgB,IAAK,OADxB,IACiCJ,WC5F1B6I,GA1B6B,SAAC,GAOtC,IANL7I,EAMI,EANJA,QACAC,EAKI,EALJA,mBACAC,EAII,EAJJA,iBACAC,EAGI,EAHJA,eACA0H,EAEI,EAFJA,UACAC,EACI,EADJA,IACI,EACwBnD,aAC1B,cAAC,GAAD,CACE3E,QAASA,EACTC,mBAAoBA,EACpBC,iBAAkBA,EAClBC,eAAgBA,EAChB0H,UAAWA,EACXC,IAAKA,KAPFgB,EADH,oBAYJ,OACE,cAAC,IAAD,CAAYrF,QAASqF,EAAmBhH,QAAQ,OAAOiH,MAAM,KAAKC,GAAG,MAArE,SACE,cAAC,IAAD,O,m+CCjBN,IAAMC,GAAeC,YAAH,MAYZC,GAAmBhK,IAAOC,IAAV,KAcP6J,IAWTG,GAAQjK,IAAOC,IAAV,MAEK,SAACiK,GAAD,OAAWA,EAAM9J,MAAM+J,KAAKC,cAWtCC,GAAUrK,IAAOC,IAAV,MACS,qBAAGG,MAAkBC,OAAOiK,eAM5CC,GAAmBvK,IAAOC,IAAV,MACV,SAACiK,GAAD,OAAYA,EAAMM,SAAW,OAAS,SA8InCC,GAhI2B,SAAC,GAA2E,IAAzEjE,EAAwE,EAAxEA,KAAM7F,EAAkE,EAAlEA,QAAS+H,EAAyD,EAAzDA,UAAWgC,EAA8C,EAA9CA,WAAYC,EAAkC,EAAlCA,SAAUlE,EAAwB,EAAxBA,SAAUC,EAAc,EAAdA,QAC/FzF,EAAkBC,cAD2F,EAGzDgC,oBAAS,GAHgD,mBAG5G0H,EAH4G,KAGrFC,EAHqF,KAS7G9I,EAAYyE,EAAK/F,YAAc+F,EAAKvE,YAAY6I,cAApC,UAAuDtE,EAAKvE,YAAY6I,cAAxE,YAAyFtE,EAAKzF,iBAAiB+J,eAE3HC,EAAwBvH,mBAAQ,WACpC,OAAO,IAAIsF,IAAU,MACrB,IAEIkC,EAAwBxH,mBAAQ,WACpC,OAAKgD,EAAKyE,oBAGNzE,EAAKzF,mBAAqBmK,IAAWC,IAChCR,EAAS9B,MAAMrC,EAAKyE,qBAEzBzE,EAAKzF,mBAAqBmK,IAAWE,KAChC1C,EAAUG,MAAMrC,EAAKyE,qBAE1BzE,EAAKzF,mBAAqBmK,IAAWG,MAChCX,EAAW7B,MAAMrC,EAAKyE,qBAE3BzE,EAAKzF,mBAAqBmK,IAAWI,MAChCP,EAAWlC,MAAMrC,EAAKyE,qBAGxBzE,EAAKyE,oBAfH,OAgBR,CAACzE,EAAKyE,oBAAqBzE,EAAKzF,iBAAkB4J,EAAUjC,EAAWgC,EAAYK,IAEhFnK,EAAqBoK,EAAU,WAC7BO,OAAOP,GAAYzF,oBAAeiG,EAAW,CAAEC,sBAAuB,KAC1E,IAEE5K,EAAU2F,EAAKY,SAIbsE,EAAUlF,EAAKmC,KAAOnC,EAAKmC,IAAIE,MAAM,IAAIC,IAAU,MAAMC,WAAWxD,oBAAeiG,EAAW,CAClGG,sBAAuB,EACvBF,sBAAuB,IAQnB3K,EAA+D0F,EAA/D1F,mBAAoBC,EAA2CyF,EAA3CzF,iBAAkBC,EAAyBwF,EAAzBxF,eAAgBgB,EAASwE,EAATxE,KAE9D,OACE,eAACiI,GAAD,WACwB,UAArBzD,EAAKvE,aAA2B,cAAC+H,GAAD,IACjC,cAAC,EAAD,CACEnJ,QAASA,EACTiB,WAAY0E,EAAK1E,WACjBE,KAAMA,EACNE,WAAYsE,EAAKvD,aACjBd,aAAcqE,EAAK9B,eACnB3C,UAAWA,EACXE,YAAauE,EAAKvE,eAElBtB,GACA,eAAC,IAAD,CAAMU,eAAe,gBAAgBe,WAAW,SAAhD,UACE,eAAC,KAAD,WAAOnB,EAAgB,IAAK,OAA5B,OACA,cAAC,KAAD,CAAMQ,MAAI,EAACmK,MAAO,CAAEC,QAAS,OAAQzJ,WAAY,UAAjD,SACGoE,EAAKmC,IACJ,qCACE,cAAC,GAAD,CACE9H,QAASA,EACTC,mBAAoBA,EACpBC,iBAAkBA,EAClBC,eAAgBA,EAChB0H,UAAWA,EACXC,IAAKnC,EAAKmC,MAEX+C,EATH,OAYA,cAAC,IAAD,CAAUjJ,OAAQ,GAAID,MAAO,UAKrC,eAAC,IAAD,CAAMnB,eAAe,gBAArB,UACE,eAAC,KAAD,WAAOJ,EAAgB,IAAK,QAA5B,OACA,cAAC,KAAD,CAAMQ,MAAI,EAAV,SAnDY,aAqDd,eAAC,IAAD,CAAMJ,eAAe,gBAArB,UACE,eAAC,KAAD,CAAMuK,MAAO,CAAE5D,SAAU,QAAzB,UAAoC/G,EAAgB,MAAO,eAA3D,OACA,eAAC,KAAD,CAAMQ,MAAI,EAACmK,MAAO,CAAE5D,SAAU,QAA9B,UAA0CxB,EAAKvD,aAAe,IAA9D,UAEF,eAAC,IAAD,CAAM5B,eAAe,gBAArB,UACE,eAAC,KAAD,CAAMuK,MAAO,CAAE5D,SAAU,QAAzB,UAAoC/G,EAAgB,MAAO,iBAA3D,OACA,eAAC,KAAD,CAAMQ,MAAI,EAACmK,MAAO,CAAE5D,SAAU,QAA9B,UAA0CxB,EAAK9B,eAAiB,IAAhE,UAEF,cAACoH,GAAD,CAAsBtF,KAAMA,EAAMC,SAAUA,EAAUC,QAASA,IAC/D,cAAC2D,GAAD,IACA,cAAC0B,EAAA,EAAD,CACEzH,QAAS,kBAAMuG,GAA0BD,IACzCJ,SAAUI,IAEZ,cAACL,GAAD,CAAkBC,SAAUI,EAA5B,SACE,cAAC,EAAD,CACEjK,QAASA,EACTF,YAAa+F,EAAK/F,YAClBC,eACE8F,EAAK/F,YAAL,oCAC+B+F,EAAKxF,eAAeO,KADnD,oCAG+BiF,EAAKM,YAAYvF,KAElDX,mBAAoBA,EACpBC,QAASA,EACTC,mBAAoBA,EACpBC,iBAAkBA,EAClBC,eAAgBA,U,6XC9M1B,IAsBegL,GAtBQ,SAAC,GAAmC,IAAjCC,EAAgC,EAAhCA,WAAYC,EAAoB,EAApBA,cAAoB,EAC/BC,cAAjBC,EADgD,EAChDA,IAAKC,EAD2C,EAC3CA,QACPpL,EAAkBC,cAExB,OACE,eAAC,GAAD,WACE,eAACoL,GAAD,WACE,cAAC,KAAD,CAAQC,QAASN,EAAY9H,SAAU,kBAAM+H,GAAeD,MAC5D,eAAC,KAAD,eAAQhL,EAAgB,IAAK,qBAE/B,eAAC,IAAD,CAAYuL,YAAaH,EAAU,EAAI,EAAGzC,MAAM,KAAKjH,QAAQ,SAA7D,UACE,cAAC,IAAD,CAAgB8J,GAAIC,KAAMC,GAAE,UAAKP,GAAjC,SACGnL,EAAgB,IAAK,YAExB,cAAC,IAAD,CAAgBwL,GAAIC,KAAMC,GAAE,UAAKP,EAAL,YAA5B,SACGnL,EAAgB,IAAK,qBAS1BlB,GAAUC,IAAOC,IAAV,MAOPqM,GAAgBtM,IAAOC,IAAV,KAMfuI,M,2JCzCWxI,WAAOC,IAAtB,MACsB,qBAAGG,MAAkBC,OAAOuM,cCqInCC,GAjHqB,SAACC,GAAgB,IAC3CC,EAASZ,cAATY,KAEFC,GADkB9L,cACR+L,eACVvE,EAAYwE,cACZxC,EAAayC,cACbxC,EAAWyC,cANiC,EAOqBC,cAA/D3G,EAP0C,EAO1CA,QAASD,EAPiC,EAOjCA,SACV6G,EAAaR,EAAbQ,UAEDC,EAAWC,cACTC,EAAgBC,cAAhBD,YACRE,qBAAU,WACJjH,GACF6G,EAASK,YAAuBlH,MAEjC,CAACA,EAAS6G,EAAUE,IAhB2B,MAkBdvK,oBAAS,GAlBK,mBAkB3C+I,EAlB2C,KAkB/BC,EAlB+B,KAoB5C2B,EAAcb,EAAQc,QAAO,SAACtH,GAAD,QAAYA,EAAK/F,gBAAkB6M,GAAiC,OAApB9G,EAAK1E,cAElFiM,EAAgBf,EAAQc,QAAO,SAACtH,GAAD,QAAYA,EAAK/F,gBAAkB6M,GAAiC,OAApB9G,EAAK1E,cAEpFkM,EAAkBH,EAAYC,QAClC,SAACtH,GAAD,OAAUA,EAAKyH,UAAY,IAAInF,IAAUtC,EAAKyH,SAASpJ,eAAe0C,cAAc,MAMhF2G,EAAYvK,uBAChB,SAACwK,EAAgBxN,GAgCf,OA9BqDwN,EAAeC,KAAI,SAAC5H,GAIvE,IACM6H,EADqB,IAAIvF,IAAUtC,EAAK8H,eAAiB,GAAGzF,MAAM,IAAIC,IAAUtC,EAAK+H,aAActO,IAAI,IAAI6I,IAAU,IAAI0F,IAAI,KACtF3F,MAAM4F,KAE/C9F,EAAMD,EAAUG,MAAMwF,GAEtBrD,EAAa,IAAIlC,IAAUtC,EAAKyE,qBAAuB,GAErDF,EAAa,IAAIjC,IAAU,IAiBjC,OAdItC,EAAKzF,mBAAqBmK,IAAWC,MACvCH,EAAaA,EAAWnC,MAAM8B,IAE5BnE,EAAKzF,mBAAqBmK,IAAWG,QACvCL,EAAaA,EAAWnC,MAAM6B,IAE5BlE,EAAKzF,mBAAqBmK,IAAWI,QACvCN,EAAaA,EAAWnC,MAAMkC,IAG7BC,EAAW0D,WAAW,GAAK,IAC5B/F,EAAMA,EAAI1I,IAAI+K,IAGT,2BAAKxE,GAAZ,IAAkBmC,WAESyF,KAAI,SAAC5H,GAAD,OAC/B,cAAC,GAAD,CAEEA,KAAMA,EACN7F,QAASA,EACTgK,SAAUA,EACVjC,UAAWA,EACXgC,WAAYA,EACZjE,SAAUA,EACVC,QAASA,GAPJF,EAAKzB,UAWhB,CAAC2D,EAAWiC,EAAUD,EAAYjE,EAAUC,IAG9C,OACE,eAACiI,EAAA,EAAD,WACE,cAAC,IAAD,CAASlC,GAAG,KAAKtG,KAAK,KAAKR,MAAM,UAAUtD,GAAG,OAAOuJ,MAAO,CAAEgD,UAAW,UAAzE,SAEItB,EACE,6BAEF,kCAGJ,cAAC,IAAD,CAASb,GAAG,KAAK9G,MAAM,YAAYtD,GAAG,OAAOuJ,MAAO,CAAEgD,UAAW,UAAjE,uDAGA,cAAC,IAAD,CAASnC,GAAG,KAAK9G,MAAM,YAAYtD,GAAG,OAAOuJ,MAAO,CAAEgD,UAAW,UAAjE,uDAGA,cAAC,GAAD,CAAgB3C,WAAYA,EAAYC,cAAeA,IACvD,gCACE,cAAC,GAAD,IACA,eAACxK,EAAA,EAAD,WACE,cAAC,IAAD,CAAOmN,OAAK,EAAC9B,KAAI,UAAKA,GAAtB,SACgBmB,EAAbjC,EAAuB+B,EAAoCH,GAAnB,KAE3C,cAAC,IAAD,CAAOgB,OAAK,EAAC9B,KAAI,UAAKA,EAAL,YAAjB,SACGmB,EAAUH,GAAe","file":"static/js/27.239fcd7b.chunk.js","sourcesContent":["import React from 'react'\nimport useI18n from 'hooks/useI18n'\nimport styled from 'styled-components'\nimport { Text, Flex, Link, LinkExternal } from '@pancakeswap-libs/uikit'\nimport getLiquidityUrlPathParts from 'utils/getLiquidityUrlPathParts'\nimport { Address } from 'config/constants/types'\n\nexport interface ExpandableSectionProps {\n  isTokenOnly?: boolean\n  bscScanAddress?: string\n  removed?: boolean\n  totalValueFormated?: string\n  lpLabel?: string\n  quoteTokenAdresses?: Address\n  quoteTokenSymbol?: string\n  tokenAddresses: Address\n}\n\nconst Wrapper = styled.div`\n  margin-top: 24px;\n`\n\nconst StyledLinkExternal = styled(LinkExternal)`\n  text-decoration: none;\n  font-weight: normal;\n  color: ${({ theme }) => theme.colors.text};\n  display: flex;\n  align-items: center;\n\n  svg {\n    padding-left: 4px;\n    height: 18px;\n    width: auto;\n    fill: ${({ theme }) => theme.colors.primary};\n  }\n`\n\nconst DetailsSection: React.FC<ExpandableSectionProps> = ({\n  isTokenOnly,\n  bscScanAddress,\n  removed,\n  totalValueFormated,\n  lpLabel,\n  quoteTokenAdresses,\n  quoteTokenSymbol,\n  tokenAddresses,\n}) => {\n  const TranslateString = useI18n()\n  const liquidityUrlPathParts = getLiquidityUrlPathParts({ quoteTokenAdresses, quoteTokenSymbol, tokenAddresses })\n\n  return (\n    <Wrapper>\n      <Flex justifyContent=\"space-between\">\n        <Text>{TranslateString(316, 'Stake')}:</Text>\n        <StyledLinkExternal href={\n          isTokenOnly ?\n            `https://exchange.dragonballfinance.org/#/swap/${tokenAddresses[process.env.REACT_APP_CHAIN_ID]}`\n            :\n            `https://exchange.dragonballfinance.org/#/add/${liquidityUrlPathParts}`\n        }>\n          {lpLabel}\n        </StyledLinkExternal>\n      </Flex>\n      {!removed && (\n        <Flex justifyContent=\"space-between\">\n          <Text>{TranslateString(23, 'Total Liquidity')}:</Text>\n          <Text>{totalValueFormated}</Text>\n        </Flex>\n      )}\n      <Flex justifyContent=\"flex-start\">\n        <Link external href={bscScanAddress} bold={false}>\n          {TranslateString(356, 'View on BscScan')}\n        </Link>\n      </Flex>\n    </Wrapper>\n  )\n}\n\nexport default DetailsSection\n","import React from 'react'\nimport styled from 'styled-components'\nimport { Tag, Flex, Heading, Image } from '@pancakeswap-libs/uikit'\nimport { CommunityTag, CoreTag, RiskTag, NoFeeTag } from 'components/Tags'\n\nexport interface ExpandableSectionProps {\n  lpLabel?: string\n  multiplier?: string\n  risk?: number\n  depositFee?: number\n  unstakingFee?: number\n  farmImage?: string\n  tokenSymbol?: string\n}\n\nconst Wrapper = styled(Flex)`\n  svg {\n    margin-right: 0.25rem;\n  }\n`\n\nconst MultiplierTag = styled(Tag)`\n  margin-left: 4px;\n`\n\nconst CardHeading: React.FC<ExpandableSectionProps> = ({\n  lpLabel,\n  multiplier,\n  risk,\n  farmImage,\n  tokenSymbol,\n  depositFee,\n  unstakingFee,\n}) => {\n  return (\n    <Wrapper justifyContent=\"space-between\" alignItems=\"center\" mb=\"12px\">\n      <Image src={`/images/farms/${farmImage}.png`} alt={tokenSymbol} width={64} height={64} />\n      \n      <Flex flexDirection=\"column\" alignItems=\"flex-end\">\n        <Heading mb=\"4px\">{lpLabel}</Heading>\n        <Flex justifyContent=\"center\">\n          {/* {depositFee === 0 ? <NoFeeTag /> : null} */}\n          {/* {isCommunityFarm ? <CommunityTag /> : <CoreTag />} */}\n          {/* <RiskTag risk={risk} /> */}\n          <MultiplierTag variant=\"secondary\">{multiplier}</MultiplierTag>\n        </Flex>\n      </Flex>\n    </Wrapper>\n  )\n}\n\nexport default CardHeading\n","import BigNumber from 'bignumber.js'\nimport React, { useCallback, useMemo, useState } from 'react'\nimport { Button, Modal } from '@pancakeswap-libs/uikit'\nimport ModalActions from 'components/ModalActions'\nimport TokenInput from 'components/TokenInput'\nimport useI18n from 'hooks/useI18n'\nimport { getFullDisplayBalance } from 'utils/formatBalance'\n\ninterface DepositModalProps {\n  max: BigNumber\n  onConfirm: (amount: string) => void\n  onDismiss?: () => void\n  tokenName?: string\n  depositFeeBP?: number\n}\n\nconst DepositModal: React.FC<DepositModalProps> = ({ max, onConfirm, onDismiss, tokenName = '' , depositFeeBP = 0}) => {\n  const [val, setVal] = useState('')\n  const [pendingTx, setPendingTx] = useState(false)\n  const TranslateString = useI18n()\n  const fullBalance = useMemo(() => {\n    return getFullDisplayBalance(max)\n  }, [max])\n\n  const handleChange = useCallback(\n    (e: React.FormEvent<HTMLInputElement>) => {\n      setVal(e.currentTarget.value)\n    },\n    [setVal],\n  )\n\n  const handleSelectMax = useCallback(() => {\n    setVal(fullBalance)\n  }, [fullBalance, setVal])\n\n  return (\n    <Modal title={`${TranslateString(316, 'Deposit')} ${tokenName} Tokens`} onDismiss={onDismiss}>\n      <TokenInput\n        value={val}\n        onSelectMax={handleSelectMax}\n        onChange={handleChange}\n        max={fullBalance}\n        symbol={tokenName}\n        depositFeeBP={depositFeeBP}\n      />\n      <ModalActions>\n        <Button variant=\"secondary\" onClick={onDismiss}>\n          {TranslateString(462, 'Cancel')}\n        </Button>\n        <Button\n          disabled={pendingTx}\n          onClick={async () => {\n            setPendingTx(true)\n            await onConfirm(val)\n            setPendingTx(false)\n            onDismiss()\n          }}\n        >\n          {pendingTx ? TranslateString(488, 'Pending Confirmation') : TranslateString(464, 'Confirm')}\n        </Button>\n      </ModalActions>\n    </Modal>\n  )\n}\n\nexport default DepositModal\n","import BigNumber from 'bignumber.js'\nimport React, { useCallback, useMemo, useState } from 'react'\nimport { Button, Modal } from '@pancakeswap-libs/uikit'\nimport ModalActions from 'components/ModalActions'\nimport TokenInput from 'components/TokenInput'\nimport useI18n from 'hooks/useI18n'\nimport { getFullDisplayBalance } from 'utils/formatBalance'\n\ninterface WithdrawModalProps {\n  max: BigNumber\n  onConfirm: (amount: string) => void\n  onDismiss?: () => void\n  tokenName?: string\n  unstakingFeeBP?: number\n}\n\nconst WithdrawModal: React.FC<WithdrawModalProps> = ({\n  onConfirm,\n  onDismiss,\n  max,\n  tokenName = '',\n  unstakingFeeBP = 0,\n}) => {\n  const [val, setVal] = useState('')\n  const [pendingTx, setPendingTx] = useState(false)\n  const TranslateString = useI18n()\n  const fullBalance = useMemo(() => {\n    return getFullDisplayBalance(max)\n  }, [max])\n\n  const handleChange = useCallback(\n    (e: React.FormEvent<HTMLInputElement>) => {\n      setVal(e.currentTarget.value)\n    },\n    [setVal],\n  )\n\n  const handleSelectMax = useCallback(() => {\n    setVal(fullBalance)\n  }, [fullBalance, setVal])\n\n  return (\n    <Modal title={`Withdraw ${tokenName}`} onDismiss={onDismiss}>\n      <TokenInput\n        onSelectMax={handleSelectMax}\n        onChange={handleChange}\n        value={val}\n        max={fullBalance}\n        symbol={tokenName}\n        unstakingFeeBP={unstakingFeeBP}\n      />\n      <ModalActions>\n        <Button variant=\"secondary\" onClick={onDismiss}>\n          {TranslateString(462, 'Cancel')}\n        </Button>\n        <Button\n          disabled={pendingTx}\n          onClick={async () => {\n            setPendingTx(true)\n            await onConfirm(val)\n            setPendingTx(false)\n            onDismiss()\n          }}\n        >\n          {pendingTx ? TranslateString(488, 'Pending Confirmation') : TranslateString(464, 'Confirm')}\n        </Button>\n      </ModalActions>\n    </Modal>\n  )\n}\n\nexport default WithdrawModal\n","import React from 'react'\nimport styled from 'styled-components'\nimport BigNumber from 'bignumber.js'\nimport { Button, Flex, Heading, IconButton, AddIcon, MinusIcon, useModal } from '@pancakeswap-libs/uikit'\nimport useI18n from 'hooks/useI18n'\nimport useStake from 'hooks/useStake'\nimport useUnstake from 'hooks/useUnstake'\nimport { getBalanceNumber } from 'utils/formatBalance'\nimport DepositModal from '../DepositModal'\nimport WithdrawModal from '../WithdrawModal'\n\ninterface FarmCardActionsProps {\n  stakedBalance?: BigNumber\n  tokenBalance?: BigNumber\n  tokenName?: string\n  pid?: number\n  depositFeeBP?: number\n  unstakingFeeBP?: number\n}\n\nconst IconButtonWrapper = styled.div`\n  display: flex;\n  svg {\n    width: 20px;\n  }\n`\n\nconst StakeAction: React.FC<FarmCardActionsProps> = ({\n  stakedBalance,\n  tokenBalance,\n  tokenName,\n  pid,\n  depositFeeBP,\n  unstakingFeeBP,\n}) => {\n  const TranslateString = useI18n()\n  const { onStake } = useStake(pid)\n  const { onUnstake } = useUnstake(pid)\n\n  const rawStakedBalance = getBalanceNumber(stakedBalance)\n  const displayBalance = rawStakedBalance.toLocaleString()\n\n  const [onPresentDeposit] = useModal(\n    <DepositModal max={tokenBalance} onConfirm={onStake} tokenName={tokenName} depositFeeBP={depositFeeBP} />,\n  )\n  const [onPresentWithdraw] = useModal(\n    <WithdrawModal max={stakedBalance} onConfirm={onUnstake} tokenName={tokenName} unstakingFeeBP={unstakingFeeBP} />,\n  )\n\n \n  const renderStakingButtons = () => {\n    return rawStakedBalance === 0 ? (\n      <Button onClick={onPresentDeposit}>{TranslateString(999, 'Stake')}</Button>\n    ) : (\n      <IconButtonWrapper>\n        <IconButton variant=\"tertiary\" onClick={onPresentWithdraw} mr=\"6px\">\n          <MinusIcon color=\"primary\" />\n        </IconButton>\n        <IconButton variant=\"tertiary\" onClick={onPresentDeposit}>\n          <AddIcon color=\"primary\" />\n        </IconButton>\n      </IconButtonWrapper>\n    )\n  }\n\n  return (\n    <Flex justifyContent=\"space-between\" alignItems=\"center\">\n      <Heading color={rawStakedBalance === 0 ? 'textDisabled' : 'text'}>{displayBalance}</Heading>\n      {renderStakingButtons()}\n    </Flex>\n  )\n}\n\nexport default StakeAction\n","import React, { useState } from 'react'\nimport BigNumber from 'bignumber.js'\nimport { Button, Flex, Heading } from '@pancakeswap-libs/uikit'\nimport useI18n from 'hooks/useI18n'\nimport { useHarvest } from 'hooks/useHarvest'\nimport { getBalanceNumber } from 'utils/formatBalance'\nimport styled from 'styled-components'\nimport useStake from '../../../../hooks/useStake'\n\ninterface FarmCardActionsProps {\n  earnings?: BigNumber\n  pid?: number\n}\n\nconst BalanceAndCompound = styled.div`\n  display: flex;\n  align-items: center;\n  justify-content: space-between;\n  flex-direction: column;\n`\n\nconst HarvestAction: React.FC<FarmCardActionsProps> = ({ earnings, pid }) => {\n  const TranslateString = useI18n()\n  const [pendingTx, setPendingTx] = useState(false)\n  const { onReward } = useHarvest(pid)\n  const { onStake } = useStake(pid)\n\n  const rawEarningsBalance = getBalanceNumber(earnings)\n  const displayBalance = rawEarningsBalance.toLocaleString()\n\n  return (\n    <Flex mb='8px' justifyContent='space-between' alignItems='center'>\n      <Heading color={rawEarningsBalance === 0 ? 'textDisabled' : 'text'}>{displayBalance}</Heading>\n      <BalanceAndCompound>\n        {pid === 11 ?\n          <Button\n            disabled={rawEarningsBalance === 0 || pendingTx}\n            size='sm'\n            variant='secondary'\n            marginBottom='15px'\n            onClick={async () => {\n              setPendingTx(true)\n              await onStake(rawEarningsBalance.toString())\n              setPendingTx(false)\n            }}\n          >\n            {TranslateString(999, 'Compound')}\n          </Button>\n          : null}\n        <Button\n          disabled={rawEarningsBalance === 0 || pendingTx}\n          onClick={async () => {\n            setPendingTx(true)\n            await onReward()\n            setPendingTx(false)\n          }}\n        >\n          {TranslateString(999, 'Harvest')}\n        </Button>\n      </BalanceAndCompound>\n    </Flex>\n  )\n}\n\nexport default HarvestAction\n","import React, { useMemo, useState, useCallback } from 'react'\nimport BigNumber from 'bignumber.js'\nimport styled from 'styled-components'\nimport { provider } from 'web3-core'\nimport { getContract } from 'utils/erc20'\nimport { Button, Flex, Text } from '@pancakeswap-libs/uikit'\nimport { Farm } from 'state/types'\nimport { useFarmFromPid, useFarmFromSymbol, useFarmUser } from 'state/hooks'\nimport useI18n from 'hooks/useI18n'\nimport UnlockButton from 'components/UnlockButton'\nimport { useApprove } from 'hooks/useApprove'\nimport StakeAction from './StakeAction'\nimport HarvestAction from './HarvestAction'\n\nconst Action = styled.div`\n  padding-top: 16px;\n`\nexport interface FarmWithStakedValue extends Farm {\n  apy?: BigNumber\n}\n\ninterface FarmCardActionsProps {\n  farm: FarmWithStakedValue\n  ethereum?: provider\n  account?: string\n}\n\nconst CardActions: React.FC<FarmCardActionsProps> = ({ farm, ethereum, account }) => {\n  const TranslateString = useI18n()\n  const [requestedApproval, setRequestedApproval] = useState(false)\n  const { pid, lpAddresses, tokenAddresses, isTokenOnly, depositFeeBP , unstakingFeeBP } = useFarmFromPid(farm.pid)\n  const { allowance, tokenBalance, stakedBalance, earnings } = useFarmUser(pid)\n  const lpAddress = lpAddresses[process.env.REACT_APP_CHAIN_ID]\n  const tokenAddress = tokenAddresses[process.env.REACT_APP_CHAIN_ID];\n  const lpName = farm.lpSymbol.toUpperCase()\n  const isApproved = account && allowance && allowance.isGreaterThan(0)\n\n  const lpContract = useMemo(() => {\n    if(isTokenOnly){\n      return getContract(ethereum as provider, tokenAddress);\n    }\n    return getContract(ethereum as provider, lpAddress);\n  }, [ethereum, lpAddress, tokenAddress, isTokenOnly])\n\n  const { onApprove } = useApprove(lpContract)\n\n  const handleApprove = useCallback(async () => {\n    try {\n      setRequestedApproval(true)\n      await onApprove()\n      setRequestedApproval(false)\n    } catch (e) {\n      console.error(e)\n    }\n  }, [onApprove])\n\n  const renderApprovalOrStakeButton = () => {\n    return isApproved ? (\n      <StakeAction\n        stakedBalance={stakedBalance}\n        tokenBalance={tokenBalance}\n        tokenName={lpName}\n        pid={pid}\n        depositFeeBP={depositFeeBP}\n        unstakingFeeBP={unstakingFeeBP}\n      />\n    ) : (\n      <Button mt=\"8px\" width=\"100%\" disabled={requestedApproval} onClick={handleApprove}>\n        {TranslateString(999, 'Approve Contract')}\n      </Button>\n    )\n  }\n\n  return (\n    <Action>\n      <Flex>\n        <Text bold textTransform=\"uppercase\" color=\"secondary\" fontSize=\"12px\" pr=\"3px\">\n        BDOGS\n        </Text>\n        <Text bold textTransform=\"uppercase\" color=\"textSubtle\" fontSize=\"12px\">\n          {TranslateString(999, 'Earned')}\n        </Text>\n      </Flex>\n      <HarvestAction earnings={earnings} pid={pid} />\n      <Flex>\n        <Text bold textTransform=\"uppercase\" color=\"secondary\" fontSize=\"12px\" pr=\"3px\">\n          {lpName}\n        </Text>\n        <Text bold textTransform=\"uppercase\" color=\"textSubtle\" fontSize=\"12px\">\n          {TranslateString(999, 'Staked')}\n        </Text>\n      </Flex>\n      {!account ? <UnlockButton mt=\"8px\" fullWidth /> : renderApprovalOrStakeButton()}\n    </Action>\n  )\n}\n\nexport default CardActions\n","import React from 'react'\nimport BigNumber from 'bignumber.js'\nimport styled from 'styled-components'\nimport { Modal, Text, LinkExternal, Flex } from '@pancakeswap-libs/uikit'\nimport useI18n from 'hooks/useI18n'\nimport getLiquidityUrlPathParts from 'utils/getLiquidityUrlPathParts'\nimport { calculateCakeEarnedPerThousandDollars, apyModalRoi } from 'utils/compoundApyHelpers'\nimport { Address, QuoteToken } from 'config/constants/types'\n\ninterface ApyCalculatorModalProps {\n  onDismiss?: () => void\n  lpLabel?: string\n  cakePrice?: BigNumber\n  apy?: BigNumber\n  quoteTokenAdresses?: Address\n  quoteTokenSymbol?: string\n  tokenAddresses: Address\n}\n\nconst Grid = styled.div`\n  display: grid;\n  grid-template-columns: repeat(3, 1fr);\n  grid-template-rows: repeat(4, auto);\n  margin-bottom: 24px;\n`\n\nconst GridItem = styled.div`\n  margin-bottom: '10px';\n`\n\nconst Description = styled(Text)`\n  max-width: 320px;\n  margin-bottom: 28px;\n`\n\nconst ApyCalculatorModal: React.FC<ApyCalculatorModalProps> = ({\n  onDismiss,\n  lpLabel,\n  quoteTokenAdresses,\n  quoteTokenSymbol,\n  tokenAddresses,\n  cakePrice,\n  apy,\n}) => {\n  const TranslateString = useI18n()\n  const liquidityUrlPathParts = getLiquidityUrlPathParts({ quoteTokenAdresses, quoteTokenSymbol, tokenAddresses })\n\n  \n  const farmApy = apy.times(new BigNumber(100)).toNumber()\n  \n  \n  const oneThousandDollarsWorthOfCake = 1000 / cakePrice.toNumber()\n\n  const cakeEarnedPerThousand1D = calculateCakeEarnedPerThousandDollars({ numberOfDays: 1, farmApy, cakePrice })\n  const cakeEarnedPerThousand7D = calculateCakeEarnedPerThousandDollars({ numberOfDays: 7, farmApy, cakePrice })\n  const cakeEarnedPerThousand30D = calculateCakeEarnedPerThousandDollars({ numberOfDays: 30, farmApy, cakePrice })\n  const cakeEarnedPerThousand365D = calculateCakeEarnedPerThousandDollars({ numberOfDays: 365, farmApy, cakePrice })\n\n  return (\n    <Modal title=\"ROI\" onDismiss={onDismiss}>\n      <Grid>\n        <GridItem>\n          <Text fontSize=\"12px\" bold color=\"textSubtle\" textTransform=\"uppercase\" mb=\"20px\">\n            {TranslateString(999, 'Timeframe')}\n          </Text>\n        </GridItem>\n        <GridItem>\n          <Text fontSize=\"12px\" bold color=\"textSubtle\" textTransform=\"uppercase\" mb=\"20px\">\n            {TranslateString(999, 'ROI')}\n          </Text>\n        </GridItem>\n        <GridItem>\n          <Text fontSize=\"12px\" bold color=\"textSubtle\" textTransform=\"uppercase\" mb=\"20px\">\n            BDOGS per $1000\n          </Text>\n        </GridItem>\n        {/* 1 day row */}\n        <GridItem>\n          <Text>1d</Text>\n        </GridItem>\n        <GridItem>\n          <Text>\n            {apyModalRoi({ amountEarned: cakeEarnedPerThousand1D, amountInvested: oneThousandDollarsWorthOfCake })}%\n          </Text>\n        </GridItem>\n        <GridItem>\n          <Text>{cakeEarnedPerThousand1D}</Text>\n        </GridItem>\n        {/* 7 day row */}\n        <GridItem>\n          <Text>7d</Text>\n        </GridItem>\n        <GridItem>\n          <Text>\n            {apyModalRoi({ amountEarned: cakeEarnedPerThousand7D, amountInvested: oneThousandDollarsWorthOfCake })}%\n          </Text>\n        </GridItem>\n        <GridItem>\n          <Text>{cakeEarnedPerThousand7D}</Text>\n        </GridItem>\n        {/* 30 day row */}\n        <GridItem>\n          <Text>30d</Text>\n        </GridItem>\n        <GridItem>\n          <Text>\n            {apyModalRoi({ amountEarned: cakeEarnedPerThousand30D, amountInvested: oneThousandDollarsWorthOfCake })}%\n          </Text>\n        </GridItem>\n        <GridItem>\n          <Text>{cakeEarnedPerThousand30D}</Text>\n        </GridItem>\n        {/* 365 day / APY row */}\n        <GridItem>\n          <Text>365d(APY)</Text>\n        </GridItem>\n        <GridItem>\n          <Text>\n            {apyModalRoi({ amountEarned: cakeEarnedPerThousand365D, amountInvested: oneThousandDollarsWorthOfCake })}%\n          </Text>\n        </GridItem>\n        <GridItem>\n          <Text>{cakeEarnedPerThousand365D}</Text>\n        </GridItem>\n      </Grid>\n      <Description fontSize=\"12px\" color=\"textSubtle\">\n        {TranslateString(\n          999,\n          'Calculated based on current rates. Compounding once daily. Rates are estimates provided for your convenience only, and by no means represent guaranteed returns.',\n        )}\n      </Description>\n      <Flex justifyContent=\"center\">\n        <LinkExternal href={`https://exchange.pancakeswap.finance/#/add/${liquidityUrlPathParts}`}>\n          {TranslateString(999, 'Get')} {lpLabel}\n        </LinkExternal>\n      </Flex>\n    </Modal>\n  )\n}\n\nexport default ApyCalculatorModal\n","import React from 'react'\nimport BigNumber from 'bignumber.js'\nimport { CalculateIcon, IconButton, useModal } from '@pancakeswap-libs/uikit'\nimport { Address } from 'config/constants/types'\nimport ApyCalculatorModal from './ApyCalculatorModal'\n\nexport interface ApyButtonProps {\n  lpLabel?: string\n  cakePrice?: BigNumber\n  apy?: BigNumber\n  quoteTokenAdresses?: Address\n  quoteTokenSymbol?: string\n  tokenAddresses: Address\n}\n\nconst ApyButton: React.FC<ApyButtonProps> = ({\n  lpLabel,\n  quoteTokenAdresses,\n  quoteTokenSymbol,\n  tokenAddresses,\n  cakePrice,\n  apy,\n}) => {\n  const [onPresentApyModal] = useModal(\n    <ApyCalculatorModal\n      lpLabel={lpLabel}\n      quoteTokenAdresses={quoteTokenAdresses}\n      quoteTokenSymbol={quoteTokenSymbol}\n      tokenAddresses={tokenAddresses}\n      cakePrice={cakePrice}\n      apy={apy}\n    />,\n  )\n\n  return (\n    <IconButton onClick={onPresentApyModal} variant=\"text\" scale=\"sm\" ml=\"4px\">\n      <CalculateIcon />\n    </IconButton>\n  )\n}\n\nexport default ApyButton\n","import React, { useMemo, useState } from 'react'\nimport BigNumber from 'bignumber.js'\nimport styled, { keyframes } from 'styled-components'\nimport { Flex, Text, Skeleton } from '@pancakeswap-libs/uikit'\nimport { communityFarms } from 'config/constants'\nimport { Farm } from 'state/types'\nimport { provider } from 'web3-core'\nimport useI18n from 'hooks/useI18n'\nimport ExpandableSectionButton from 'components/ExpandableSectionButton'\nimport { QuoteToken } from 'config/constants/types'\nimport DetailsSection from './DetailsSection'\nimport CardHeading from './CardHeading'\nimport CardActionsContainer from './CardActionsContainer'\nimport ApyButton from './ApyButton'\n\nexport interface FarmWithStakedValue extends Farm {\n  apy?: BigNumber\n}\n\nconst RainbowLight = keyframes`\n  0% {\n    background-position: 0% 50%;\n  }\n  50% {\n    background-position: 100% 50%;\n  }\n  100% {\n    background-position: 0% 50%;\n  }\n`\n\nconst StyledCardAccent = styled.div`\n  background: linear-gradient(45deg,\n  rgba(255, 0, 0, 1) 0%,\n  rgba(255, 154, 0, 1) 10%,\n  rgba(208, 222, 33, 1) 20%,\n  rgba(79, 220, 74, 1) 30%,\n  rgba(63, 218, 216, 1) 40%,\n  rgba(47, 201, 226, 1) 50%,\n  rgba(28, 127, 238, 1) 60%,\n  rgba(95, 21, 242, 1) 70%,\n  rgba(186, 12, 248, 1) 80%,\n  rgba(251, 7, 217, 1) 90%,\n  rgba(255, 0, 0, 1) 100%);\n  background-size: 300% 300%;\n  animation: ${RainbowLight} 2s linear infinite;\n  border-radius: 16px;\n  filter: blur(6px);\n  position: absolute;\n  top: -2px;\n  right: -2px;\n  bottom: -2px;\n  left: -2px;\n  z-index: -1;\n`\n\nconst FCard = styled.div`\n  align-self: baseline;\n  background: ${(props) => props.theme.card.background};\n  border-radius: 32px;\n  box-shadow: 0px 2px 12px -8px rgba(25, 19, 38, 0.1), 0px 1px 1px rgba(25, 19, 38, 0.05);\n  display: flex;\n  flex-direction: column;\n  justify-content: space-around;\n  padding: 24px;\n  position: relative;\n  text-align: center;\n`\n\nconst Divider = styled.div`\n  background-color: ${({ theme }) => theme.colors.borderColor};\n  height: 1px;\n  margin: 28px auto;\n  width: 100%;\n`\n\nconst ExpandingWrapper = styled.div<{ expanded: boolean }>`\n  height: ${(props) => (props.expanded ? '100%' : '0px')};\n  overflow: hidden;\n`\n\ninterface FarmCardProps {\n  farm: FarmWithStakedValue\n  removed: boolean\n  cakePrice?: BigNumber\n  senzuPrice?: BigNumber\n  bnbPrice?: BigNumber\n  ethereum?: provider\n  account?: string\n}\n\nconst FarmCard: React.FC<FarmCardProps> = ({ farm, removed, cakePrice, senzuPrice, bnbPrice, ethereum, account }) => {\n  const TranslateString = useI18n()\n\n  const [showExpandableSection, setShowExpandableSection] = useState(false)\n\n  // const isCommunityFarm = communityFarms.includes(farm.tokenSymbol)\n  // We assume the token name is coin pair + lp e.g. CAKE-BNB LP, LINK-BNB LP,\n  // NAR-CAKE LP. The images should be cake-bnb.svg, link-bnb.svg, nar-cake.svg\n  // const farmImage = farm.lpSymbol.split(' ')[0].toLocaleLowerCase()\n  const farmImage = farm.isTokenOnly ? farm.tokenSymbol.toLowerCase() : `${farm.tokenSymbol.toLowerCase()}-${farm.quoteTokenSymbol.toLowerCase()}`\n\n  const cake2Price: BigNumber = useMemo(() => {\n    return new BigNumber(22)\n  },[])\n\n  const totalValue: BigNumber = useMemo(() => {\n    if (!farm.lpTotalInQuoteToken) {\n      return null\n    }\n    if (farm.quoteTokenSymbol === QuoteToken.BNB) {\n      return bnbPrice.times(farm.lpTotalInQuoteToken)\n    }\n    if (farm.quoteTokenSymbol === QuoteToken.CAKE) {\n      return cakePrice.times(farm.lpTotalInQuoteToken)\n    }\n    if (farm.quoteTokenSymbol === QuoteToken.SENZU) {\n      return senzuPrice.times(farm.lpTotalInQuoteToken)\n    }\n    if (farm.quoteTokenSymbol === QuoteToken.CAKE2) {\n      return cake2Price.times(farm.lpTotalInQuoteToken)\n    }\n\n    return farm.lpTotalInQuoteToken\n  }, [farm.lpTotalInQuoteToken, farm.quoteTokenSymbol, bnbPrice, cakePrice, senzuPrice, cake2Price])\n\n  const totalValueFormated = totalValue\n    ? `$${Number(totalValue).toLocaleString(undefined, { maximumFractionDigits: 0 })}`\n    : '-'\n\n  const lpLabel = farm.lpSymbol\n  const earnLabel = 'BDOGS'\n\n  \n    const farmAPY = farm.apy && farm.apy.times(new BigNumber(100)).toNumber().toLocaleString(undefined, {\n      minimumFractionDigits: 2,\n      maximumFractionDigits: 2,\n    })\n  \n    \n  \n\n  \n\n  const { quoteTokenAdresses, quoteTokenSymbol, tokenAddresses, risk } = farm\n\n  return (\n    <FCard>\n      {farm.tokenSymbol === 'BDOGS' && <StyledCardAccent />}\n      <CardHeading\n        lpLabel={lpLabel}\n        multiplier={farm.multiplier}\n        risk={risk}\n        depositFee={farm.depositFeeBP}\n        unstakingFee={farm.unstakingFeeBP}\n        farmImage={farmImage}\n        tokenSymbol={farm.tokenSymbol}\n      />\n      {!removed && (\n        <Flex justifyContent='space-between' alignItems='center'>\n          <Text>{TranslateString(352, 'APR')}:</Text>\n          <Text bold style={{ display: 'flex', alignItems: 'center' }}>\n            {farm.apy ? (\n              <>\n                <ApyButton\n                  lpLabel={lpLabel}\n                  quoteTokenAdresses={quoteTokenAdresses}\n                  quoteTokenSymbol={quoteTokenSymbol}\n                  tokenAddresses={tokenAddresses}\n                  cakePrice={cakePrice}\n                  apy={farm.apy}\n                />\n                {farmAPY}%\n              </>\n            ) : (\n              <Skeleton height={24} width={80} />\n            )}\n          </Text>\n        </Flex>\n      )}\n      <Flex justifyContent='space-between'>\n        <Text>{TranslateString(318, 'Earn')}:</Text>\n        <Text bold>{earnLabel}</Text>\n      </Flex>\n      <Flex justifyContent='space-between'>\n        <Text style={{ fontSize: '24px' }}>{TranslateString(10001, 'Deposit Fee')}:</Text>\n        <Text bold style={{ fontSize: '24px' }}>{(farm.depositFeeBP / 100)}%</Text>\n      </Flex>\n      <Flex justifyContent='space-between'>\n        <Text style={{ fontSize: '24px' }}>{TranslateString(10011, 'Unstaking Fee')}:</Text>\n        <Text bold style={{ fontSize: '24px' }}>{(farm.unstakingFeeBP / 100)}%</Text>\n      </Flex>\n      <CardActionsContainer farm={farm} ethereum={ethereum} account={account} />\n      <Divider />\n      <ExpandableSectionButton\n        onClick={() => setShowExpandableSection(!showExpandableSection)}\n        expanded={showExpandableSection}\n      />\n      <ExpandingWrapper expanded={showExpandableSection}>\n        <DetailsSection\n          removed={removed}\n          isTokenOnly={farm.isTokenOnly}\n          bscScanAddress={\n            farm.isTokenOnly ?\n              `https://bscscan.com/token/${farm.tokenAddresses[process.env.REACT_APP_CHAIN_ID]}`\n              :\n              `https://bscscan.com/token/${farm.lpAddresses[process.env.REACT_APP_CHAIN_ID]}`\n          }\n          totalValueFormated={totalValueFormated}\n          lpLabel={lpLabel}\n          quoteTokenAdresses={quoteTokenAdresses}\n          quoteTokenSymbol={quoteTokenSymbol}\n          tokenAddresses={tokenAddresses}\n        />\n      </ExpandingWrapper>\n    </FCard>\n  )\n}\n\nexport default FarmCard\n","import React from 'react'\nimport styled from 'styled-components'\nimport { useRouteMatch, Link } from 'react-router-dom'\nimport { ButtonMenu, ButtonMenuItem, Text, Toggle } from '@pancakeswap-libs/uikit'\nimport useI18n from 'hooks/useI18n'\n\nconst FarmTabButtons = ({ stakedOnly, setStakedOnly }) => {\n  const { url, isExact } = useRouteMatch()\n  const TranslateString = useI18n()\n\n  return (\n    <Wrapper>\n      <ToggleWrapper>\n        <Toggle checked={stakedOnly} onChange={() => setStakedOnly(!stakedOnly)} />\n        <Text> {TranslateString(699, 'Staked only')}</Text>\n      </ToggleWrapper>\n      <ButtonMenu activeIndex={isExact ? 0 : 1} scale=\"sm\" variant=\"subtle\">\n        <ButtonMenuItem as={Link} to={`${url}`}>\n          {TranslateString(698, 'Active')}\n        </ButtonMenuItem>\n        <ButtonMenuItem as={Link} to={`${url}/history`}>\n          {TranslateString(700, 'Inactive')}\n        </ButtonMenuItem>\n      </ButtonMenu>\n    </Wrapper>\n  )\n}\n\nexport default FarmTabButtons\n\nconst Wrapper = styled.div`\n  display: flex;\n  justify-content: center;\n  align-items: center;\n  margin-bottom: 32px;\n`\n\nconst ToggleWrapper = styled.div`\n  display: flex;\n  justify-content: center;\n  align-items: center;\n  margin-right: 32px;\n\n  ${Text} {\n    margin-left: 8px;\n  }\n`","import styled from 'styled-components'\n\nexport default styled.div`\n  background-color: ${({ theme }) => theme.colors.textSubtle};\n  height: 1px;\n  margin: 0 auto 32px;\n  width: 100%;\n`\n","import React, { useEffect, useCallback, useState, useMemo } from 'react'\nimport { Route, useRouteMatch } from 'react-router-dom'\nimport { useDispatch } from 'react-redux'\nimport BigNumber from 'bignumber.js'\nimport { useWallet } from '@binance-chain/bsc-use-wallet'\nimport { provider } from 'web3-core'\nimport { Image, Heading } from '@pancakeswap-libs/uikit'\nimport { BLOCKS_PER_YEAR, CAKE_PER_BLOCK, CAKE_POOL_PID } from 'config'\nimport FlexLayout from 'components/layout/Flex'\nimport Page from 'components/layout/Page'\nimport { useFarms, usePriceBnbBusd, usePriceCakeBusd, usePrice3CakeBusd } from 'state/hooks'\nimport useRefresh from 'hooks/useRefresh'\nimport { fetchFarmUserDataAsync } from 'state/actions'\nimport { QuoteToken } from 'config/constants/types'\nimport useI18n from 'hooks/useI18n'\nimport FarmCard, { FarmWithStakedValue } from './components/FarmCard/FarmCard'\nimport FarmTabButtons from './components/FarmTabButtons'\nimport Divider from './components/Divider'\n\nexport interface FarmsProps{\n  tokenMode?: boolean\n}\n\nconst Farms: React.FC<FarmsProps> = (farmsProps) => {\n  const { path } = useRouteMatch()\n  const TranslateString = useI18n()\n  const farmsLP = useFarms()\n  const cakePrice = usePriceCakeBusd()\n  const senzuPrice = usePrice3CakeBusd()\n  const bnbPrice = usePriceBnbBusd()\n  const { account, ethereum }: { account: string; ethereum: provider } = useWallet()\n  const {tokenMode} = farmsProps;\n\n  const dispatch = useDispatch()\n  const { fastRefresh } = useRefresh()\n  useEffect(() => {\n    if (account) {\n      dispatch(fetchFarmUserDataAsync(account))\n    }\n  }, [account, dispatch, fastRefresh])\n\n  const [stakedOnly, setStakedOnly] = useState(false)\n\n  const activeFarms = farmsLP.filter((farm) => !!farm.isTokenOnly === !!tokenMode && farm.multiplier === '0X')\n  // const inactiveFarms = farmsLP.filter((farm) => !!farm.isTokenOnly === !!tokenMode && farm.multiplier === '0X')\n  const inactiveFarms = farmsLP.filter((farm) => !!farm.isTokenOnly === !!tokenMode && farm.multiplier === '0X')\n\n  const stakedOnlyFarms = activeFarms.filter(\n    (farm) => farm.userData && new BigNumber(farm.userData.stakedBalance).isGreaterThan(0),\n  )\n\n  // /!\\ This function will be removed soon\n  // This function compute the APY for each farm and will be replaced when we have a reliable API\n  // to retrieve assets prices against USD\n  const farmsList = useCallback(\n    (farmsToDisplay, removed: boolean) => {\n      // const cakePriceVsBNB = new BigNumber(farmsLP.find((farm) => farm.pid === CAKE_POOL_PID)?.tokenPriceVsQuote || 0)\n      const farmsToDisplayWithAPY: FarmWithStakedValue[] = farmsToDisplay.map((farm) => {\n        // if (!farm.tokenAmount || !farm.lpTotalInQuoteToken || !farm.lpTotalInQuoteToken) {\n        //   return farm\n        // }\n        const cakeRewardPerBlock = new BigNumber(farm.dballPerBlock || 1).times(new BigNumber(farm.poolWeight)) .div(new BigNumber(10).pow(18))\n        const cakeRewardPerYear = cakeRewardPerBlock.times(BLOCKS_PER_YEAR)\n\n        let apy = cakePrice.times(cakeRewardPerYear)\n\n        let totalValue = new BigNumber(farm.lpTotalInQuoteToken || 0)\n    \n        const cake2Price = new BigNumber(22)\n        \n\n        if (farm.quoteTokenSymbol === QuoteToken.BNB) {\n          totalValue = totalValue.times(bnbPrice);\n        }\n        if (farm.quoteTokenSymbol === QuoteToken.SENZU) {\n          totalValue = totalValue.times(senzuPrice);\n        }\n        if (farm.quoteTokenSymbol === QuoteToken.CAKE2) {\n          totalValue = totalValue.times(cake2Price);\n        }\n\n        if(totalValue.comparedTo(0) > 0){\n          apy = apy.div(totalValue);\n        }\n\n        return { ...farm, apy }\n      })\n      return farmsToDisplayWithAPY.map((farm) => (\n        <FarmCard\n          key={farm.pid}\n          farm={farm}\n          removed={removed}\n          bnbPrice={bnbPrice}\n          cakePrice={cakePrice}\n          senzuPrice={senzuPrice}\n          ethereum={ethereum}\n          account={account}\n        />\n      ))\n    },\n    [cakePrice, bnbPrice, senzuPrice, ethereum, account],\n  )\n\n  return (\n    <Page>\n      <Heading as=\"h1\" size=\"lg\" color=\"primary\" mb=\"50px\" style={{ textAlign: 'center' }}>\n        {\n          tokenMode ?\n            'Stake tokens to earn BDOGS'\n            :\n          'Stake LP tokens to earn BDOGS'\n        }\n      </Heading>\n      <Heading as=\"h2\" color=\"secondary\" mb=\"50px\" style={{ textAlign: 'center' }}>\n       Deposit Fee will be used to buyback BDOGS\n      </Heading>\n      <Heading as=\"h2\" color=\"secondary\" mb=\"50px\" style={{ textAlign: 'center' }}>\n        All Farms and Pools have 2% Unstaking Fee\n      </Heading>\n      <FarmTabButtons stakedOnly={stakedOnly} setStakedOnly={setStakedOnly}/>\n      <div>\n        <Divider />\n        <FlexLayout>\n          <Route exact path={`${path}`}>\n            {stakedOnly ? farmsList(stakedOnlyFarms, false) : farmsList(activeFarms, false)}\n          </Route>\n          <Route exact path={`${path}/history`}>\n            {farmsList(inactiveFarms, true)}\n          </Route>\n        </FlexLayout>\n      </div>\n      {/* <Image src=\"/images/egg/8.png\" alt=\"illustration\" width={1352} height={587} responsive /> */}\n    </Page>\n  )\n}\n\nexport default Farms\n"],"sourceRoot":""}