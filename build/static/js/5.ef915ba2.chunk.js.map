{"version":3,"sources":["utils/callHelpers.ts","config/index.ts","hooks/useHarvest.ts","components/Spacer/Spacer.tsx","components/ModalActions/ModalActions.tsx","components/Input/Input.tsx","components/TokenInput/TokenInput.tsx","hooks/useStake.ts","components/layout/Flex.tsx","utils/getLiquidityUrlPathParts.ts","hooks/useApprove.ts","hooks/useUnstake.ts","utils/compoundApyHelpers.ts","components/ExpandableSectionButton/ExpandableSectionButton.tsx"],"names":["approve","lpContract","masterChefContract","account","a","methods","options","address","ethers","constants","MaxUint256","send","from","stake","pid","amount","deposit","BigNumber","times","pow","toString","on","tx","transactionHash","smartStake","smartChefContract","smartStakeBnb","value","unstake","withdraw","smartChefUnstake","emergencyWithdraw","harvest","smartHarvest","sousChefContract","smartHarvestBnb","config","EXPONENTIAL_AT","DECIMAL_PLACES","BLOCKS_PER_YEAR","BSC_BLOCK_TIME","BASE_ADD_LIQUIDITY_URL","useHarvest","farmPid","dispatch","useDispatch","useWallet","useMasterchef","onReward","useCallback","txHash","fetchFarmUserDataAsync","useAllHarvest","farmPids","harvestPromises","reduce","accum","Promise","all","useHarvest3","masterChef3Contract","useMasterchef3","fetchFarm3UserDataAsync","useAllHarvest3","useSmartChefHarvest","sousId","isUsingBnb","useSmartChef","handleHarvest","harvestFn","updateUserPendingReward","updateUserBalance","StyledSpacer","styled","div","props","size","Spacer","s","spacing","useContext","ThemeContext","StyledModalActions","theme","colors","primaryDark","StyledModalAction","ModalActions","children","l","React","Children","toArray","length","map","child","i","StyledInputWrapper","input","radii","default","StyledInput","primary","Input","endAdornment","onChange","placeholder","startAdornment","StyledTokenInput","StyledTokenAdornmentWrapper","StyledMaxText","StyledTokenSymbol","span","TokenInput","max","symbol","onSelectMax","depositFeeBP","unstakingFeeBP","burnFee","TranslateString","useI18n","toLocaleString","scale","onClick","useStake3","onStake","console","info","useSmartStake","handleStake","stakeFn","updateUserStakedBalance","String","useStake","FlexLayout","getLiquidityUrlPathParts","quoteTokenAdresses","quoteTokenSymbol","tokenAddresses","firstPart","process","secondPart","useApprove","onApprove","useApprove3","useSousApprove","updateUserAllowance","useUnstake3","onUnstake","useSmartUnstake","useUnstake","calculateCakeEarnedPerThousandDollars","number","numberOfDays","apyAsDecimal","farmApy","daysAsDecimalOfYear","principal","cakePrice","finalAmount","Math","round","apyModalRoi","amountEarned","amountInvested","toFixed","Wrapper","ExpandableSectionButton","expanded","aria-label","role","color","bold","defaultProps"],"mappings":"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","file":"static/js/5.ef915ba2.chunk.js","sourcesContent":["import BigNumber from 'bignumber.js'\nimport { ethers } from 'ethers'\n\nexport const approve = async (lpContract, masterChefContract, account) => {\n  return lpContract.methods\n    .approve(masterChefContract.options.address, ethers.constants.MaxUint256)\n    .send({ from: account })\n}\n\nexport const stake = async (masterChefContract, pid, amount, account) => {\n  return masterChefContract.methods\n    .deposit(pid, new BigNumber(amount).times(new BigNumber(10).pow(18)).toString())\n    .send({ from: account })\n    .on('transactionHash', (tx) => {\n      return tx.transactionHash\n    })\n}\n\nexport const smartStake = async (smartChefContract, amount, account) =>\n  smartChefContract.methods\n    .deposit(new BigNumber(amount).times(new BigNumber(10).pow(18)).toString())\n    .send({ from: account })\n    .on('transactionHash', (tx) => tx.transactionHash)\n\nexport const smartStakeBnb = async (smartChefContract, amount, account) =>\n  smartChefContract.methods\n    .deposit()\n    .send({ from: account, value: new BigNumber(amount).times(new BigNumber(10).pow(18)).toString() })\n    .on('transactionHash', (tx) => tx.transactionHash)\n\nexport const unstake = async (masterChefContract, pid, amount, account) => {\n  return masterChefContract.methods\n    .withdraw(pid, new BigNumber(amount).times(new BigNumber(10).pow(18)).toString())\n    .send({ from: account })\n    .on('transactionHash', (tx) => {\n      return tx.transactionHash\n    })\n}\n\nexport const smartChefUnstake = async (smartChefContract, amount, account) => {\n  // buggy CTC\n  if (smartChefContract.options.address === '0x85f27A63cFb4Dc5a36d7Eb5EF8620D343817e156') {\n    smartChefContract.methods\n      .emergencyWithdraw()\n      .send({ from: account })\n      .on('transactionHash', (tx) => tx.transactionHash)\n  } else {\n    smartChefContract.methods\n      .withdraw(new BigNumber(amount).times(new BigNumber(10).pow(18)).toString())\n      .send({ from: account })\n      .on('transactionHash', (tx) => tx.transactionHash)\n  }\n}\n\nexport const sousUnstake = async (sousChefContract, amount, account) => {\n  // shit code: hard fix for old CTK and BLK\n  if (sousChefContract.options.address === '0x3B9B74f48E89Ebd8b45a53444327013a2308A9BC') {\n    return sousChefContract.methods\n      .emergencyWithdraw()\n      .send({ from: account })\n      .on('transactionHash', (tx) => tx.transactionHash)\n  }\n  if (sousChefContract.options.address === '0xBb2B66a2c7C2fFFB06EA60BeaD69741b3f5BF831') {\n    return sousChefContract.methods\n      .emergencyWithdraw()\n      .send({ from: account })\n      .on('transactionHash', (tx) => tx.transactionHash)\n  }\n  return sousChefContract.methods\n    .withdraw(new BigNumber(amount).times(new BigNumber(10).pow(18)).toString())\n    .send({ from: account })\n    .on('transactionHash', (tx) => tx.transactionHash)\n}\n\nexport const sousEmegencyUnstake = async (sousChefContract, amount, account) =>\n  sousChefContract.methods\n    .emergencyWithdraw()\n    .send({ from: account })\n    .on('transactionHash', (tx) => tx.transactionHash)\n\nexport const harvest = async (masterChefContract, pid, account) => {\n  return masterChefContract.methods\n    .deposit(pid, '0')\n    .send({ from: account })\n    .on('transactionHash', (tx) => {\n      return tx.transactionHash\n    })\n}\n\nexport const smartHarvest = async (sousChefContract, account) =>\n  sousChefContract.methods\n    .deposit('0')\n    .send({ from: account })\n    .on('transactionHash', (tx) => tx.transactionHash)\n\nexport const smartHarvestBnb = async (sousChefContract, account) =>\n  sousChefContract.methods\n    .deposit()\n    .send({ from: account, value: new BigNumber(0) })\n    .on('transactionHash', (tx) => tx.transactionHash)","import BigNumber from 'bignumber.js/bignumber'\n\nBigNumber.config({\n  EXPONENTIAL_AT: 1000,\n  DECIMAL_PLACES: 80,\n})\n\nexport const CAKE_PER_BLOCK = new BigNumber(1)\nexport const BLOCKS_PER_YEAR = new BigNumber(10512000)\nexport const BSC_BLOCK_TIME = 3\n\nexport const CAKE_POOL_PID = 1\nexport const BASE_EXCHANGE_URL = 'https://exchange.pancakeswap.finance'\nexport const BASE_ADD_LIQUIDITY_URL = `${BASE_EXCHANGE_URL}/#/add`\n","import { useCallback } from 'react'\nimport { useWallet } from '@binance-chain/bsc-use-wallet'\nimport { useDispatch } from 'react-redux'\nimport { fetchFarmUserDataAsync, fetchFarm3UserDataAsync, updateUserBalance, updateUserPendingReward } from 'state/actions'\nimport { smartHarvest, smartHarvestBnb, harvest } from 'utils/callHelpers'\nimport { useMasterchef, useMasterchef3, useSmartChef } from './useContract'\n\nexport const useHarvest = (farmPid: number) => {\n  const dispatch = useDispatch()\n  const { account } = useWallet()\n  const masterChefContract = useMasterchef()\n\n  const handleHarvest = useCallback(async () => {\n    const txHash = await harvest(masterChefContract, farmPid, account)\n    dispatch(fetchFarmUserDataAsync(account))\n    return txHash\n  }, [account, dispatch, farmPid, masterChefContract])\n\n  return { onReward: handleHarvest }\n}\n\nexport const useAllHarvest = (farmPids: number[]) => {\n  const { account } = useWallet()\n  const masterChefContract = useMasterchef()\n\n  const handleHarvest = useCallback(async () => {\n    const harvestPromises = farmPids.reduce((accum, pid) => {\n      return [...accum, harvest(masterChefContract, pid, account)]\n    }, [])\n\n    return Promise.all(harvestPromises)\n  }, [account, farmPids, masterChefContract])\n\n  return { onReward: handleHarvest }\n}\n\n\nexport const useHarvest3 = (farmPid: number) => {\n  const dispatch = useDispatch()\n  const { account } = useWallet()\n  const masterChef3Contract = useMasterchef3()\n\n  const handleHarvest = useCallback(async () => {\n    const txHash = await harvest(masterChef3Contract, farmPid, account)\n    dispatch(fetchFarm3UserDataAsync(account))\n    return txHash\n  }, [account, dispatch, farmPid, masterChef3Contract])\n\n  return { onReward: handleHarvest }\n}\n\nexport const useAllHarvest3 = (farmPids: number[]) => {\n  const { account } = useWallet()\n  const masterChef3Contract = useMasterchef3()\n\n  const handleHarvest = useCallback(async () => {\n    const harvestPromises = farmPids.reduce((accum, pid) => {\n      return [...accum, harvest(masterChef3Contract, pid, account)]\n    }, [])\n\n    return Promise.all(harvestPromises)\n  }, [account, farmPids, masterChef3Contract])\n\n  return { onReward: handleHarvest }\n}\n\nexport const useSmartChefHarvest = (sousId, isUsingBnb = false) => {\n  const dispatch = useDispatch()\n  const { account } = useWallet()\n  const smartChefContract = useSmartChef(sousId)\n\n  const handleHarvest = useCallback(async () => {\n    const harvestFn = isUsingBnb ? smartHarvestBnb : smartHarvest\n    await harvestFn(smartChefContract, account)\n    dispatch(updateUserPendingReward(sousId, account))\n    dispatch(updateUserBalance(sousId, account))\n  }, [account, dispatch, isUsingBnb, smartChefContract, sousId])\n\n  return { onReward: handleHarvest }\n}\n","import React, { useContext } from 'react'\nimport styled, { ThemeContext } from 'styled-components'\n\ninterface SpacerProps {\n  size?: 'sm' | 'md' | 'lg'\n}\n\nconst Spacer: React.FC<SpacerProps> = ({ size = 'md' }) => {\n  const { spacing } = useContext(ThemeContext)\n\n  let s: number\n  switch (size) {\n    case 'lg':\n      s = spacing[6]\n      break\n    case 'sm':\n      s = spacing[2]\n      break\n    case 'md':\n    default:\n      s = spacing[4]\n  }\n\n  return <StyledSpacer size={s} />\n}\n\ninterface StyledSpacerProps {\n  size: number\n}\n\nconst StyledSpacer = styled.div<StyledSpacerProps>`\n  height: ${(props) => props.size}px;\n  width: ${(props) => props.size}px;\n`\n\nexport default Spacer\n","import React from 'react'\nimport styled from 'styled-components'\n\nimport Spacer from '../Spacer'\n\nconst ModalActions: React.FC = ({ children }) => {\n  const l = React.Children.toArray(children).length\n  return (\n    <StyledModalActions>\n      {React.Children.map(children, (child, i) => (\n        <>\n          <StyledModalAction>{child}</StyledModalAction>\n          {i < l - 1 && <Spacer />}\n        </>\n      ))}\n    </StyledModalActions>\n  )\n}\n\nconst StyledModalActions = styled.div`\n  align-items: center;\n  background-color: ${(props) => props.theme.colors.primaryDark}00;\n  display: flex;\n  margin: 0;\n  padding: ${(props) => props.theme.spacing[4]}px;\n`\n\nconst StyledModalAction = styled.div`\n  flex: 1;\n  text-align: center;\n`\n\nexport default ModalActions\n","import React from 'react'\nimport styled from 'styled-components'\n\nexport interface InputProps {\n  endAdornment?: React.ReactNode\n  onChange: (e: React.FormEvent<HTMLInputElement>) => void\n  placeholder?: string\n  startAdornment?: React.ReactNode\n  value: string\n}\n\nconst Input: React.FC<InputProps> = ({ endAdornment, onChange, placeholder, startAdornment, value }) => {\n  return (\n    <StyledInputWrapper>\n      {!!startAdornment && startAdornment}\n      <StyledInput placeholder={placeholder} value={value} onChange={onChange} />\n      {!!endAdornment && endAdornment}\n    </StyledInputWrapper>\n  )\n}\n\nconst StyledInputWrapper = styled.div`\n  align-items: center;\n  background-color: ${(props) => props.theme.colors.input};\n  border-radius: ${(props) => props.theme.radii.default};\n  display: flex;\n  height: 72px;\n  padding: 0 ${(props) => props.theme.spacing[3]}px;\n`\n\nconst StyledInput = styled.input`\n  width: 100%;\n  background: none;\n  border: 0;\n  color: ${(props) => props.theme.colors.primary};\n  font-size: 18px;\n  flex: 1;\n  height: 56px;\n  margin: 0;\n  padding: 0;\n  outline: none;\n`\n\nexport default Input\n","import React from 'react'\nimport styled from 'styled-components'\nimport BigNumber from 'bignumber.js/bignumber'\nimport { Button } from '@pancakeswap-libs/uikit'\nimport useI18n from '../../hooks/useI18n'\nimport Input, { InputProps } from '../Input'\n\ninterface TokenInputProps extends InputProps {\n  max: number | string\n  symbol: string\n  onSelectMax?: () => void\n  depositFeeBP?: number\n  unstakingFeeBP?: number\n  burnFee?: number\n}\n\nconst TokenInput: React.FC<TokenInputProps> = ({\n  max,\n  symbol,\n  onChange,\n  onSelectMax,\n  value,\n  depositFeeBP = 0,\n  unstakingFeeBP = 0,\n  burnFee = 0,\n}) => {\n  const TranslateString = useI18n()\n  return (\n    <StyledTokenInput>\n      <StyledMaxText>\n        {max.toLocaleString()} {symbol} {TranslateString(526, 'Available')}\n      </StyledMaxText>\n      <Input\n        endAdornment={\n          <StyledTokenAdornmentWrapper>\n            <StyledTokenSymbol>{symbol}</StyledTokenSymbol>\n            <StyledSpacer />\n            <div>\n              <Button scale=\"sm\" onClick={onSelectMax}>\n                {TranslateString(452, 'Max')}\n              </Button>\n            </div>\n          </StyledTokenAdornmentWrapper>\n        }\n        onChange={onChange}\n        placeholder=\"0\"\n        value={value}\n      />\n      {depositFeeBP > 0 ? (\n        <StyledMaxText>\n          {TranslateString(10001, 'Deposit Fee')}: {new BigNumber(value || 0).times(depositFeeBP / 10000).toString()}{' '}\n          {symbol}\n        </StyledMaxText>\n      ) : null}\n      {burnFee > 0 ? (\n        <StyledMaxText>\n          {TranslateString(10001, 'burn Fee')}: {new BigNumber(value || 0).times(depositFeeBP / 10000).toString()}{' '}\n          {symbol}\n        </StyledMaxText>\n      ) : null}\n      {unstakingFeeBP > 0 ? (\n        <StyledMaxText>\n          {TranslateString(10011, 'Unstaking Fee')}:{' '}\n          {new BigNumber(value || 0).times(unstakingFeeBP / 10000).toString()} {symbol}\n        </StyledMaxText>\n      ) : null}\n    </StyledTokenInput>\n  )\n}\n\nconst StyledTokenInput = styled.div``\n\nconst StyledSpacer = styled.div`\n  width: ${(props) => props.theme.spacing[3]}px;\n`\n\nconst StyledTokenAdornmentWrapper = styled.div`\n  align-items: center;\n  display: flex;\n`\n\nconst StyledMaxText = styled.div`\n  align-items: center;\n  color: ${(props) => props.theme.colors.primary};\n  display: flex;\n  font-size: 14px;\n  font-weight: 700;\n  height: 44px;\n  justify-content: flex-end;\n`\n\nconst StyledTokenSymbol = styled.span`\n  color: ${(props) => props.theme.colors.primary};\n  font-weight: 700;\n`\n\nexport default TokenInput\n","import { useCallback } from 'react'\nimport { useWallet } from '@binance-chain/bsc-use-wallet'\nimport { useDispatch } from 'react-redux'\nimport { fetchFarmUserDataAsync, fetchFarm3UserDataAsync, updateUserStakedBalance, updateUserBalance } from 'state/actions'\nimport { stake, smartStakeBnb, smartStake } from 'utils/callHelpers'\nimport { useMasterchef, useMasterchef3, useSmartChef } from './useContract'\n\nconst useStake = (pid: number) => {\n  const dispatch = useDispatch()\n  const { account } = useWallet()\n  const masterChefContract = useMasterchef()\n\n  const handleStake = useCallback(\n    async (amount: string) => {\n      const txHash = await stake(masterChefContract, pid, amount, account)\n      dispatch(fetchFarmUserDataAsync(account))\n      console.info(txHash)\n    },\n    [account, dispatch, masterChefContract, pid],\n  )\n\n  return { onStake: handleStake }\n}\n\nexport const useStake3 = (pid: number) => {\n  const dispatch = useDispatch()\n  const { account } = useWallet()\n  const masterChef3Contract = useMasterchef3()\n\n  const handleStake = useCallback(\n    async (amount: string) => {\n      const txHash = await stake(masterChef3Contract, pid, amount, account)\n      dispatch(fetchFarm3UserDataAsync(account))\n      console.info(txHash)\n    },\n    [account, dispatch, masterChef3Contract, pid],\n  )\n\n  return { onStake: handleStake }\n}\n\nexport const useSmartStake = (sousId: number, isUsingBnb = false) => {\n  const dispatch = useDispatch()\n  const { account } = useWallet()\n  const smartChefContract = useSmartChef(sousId)\n\n  const handleStake = useCallback(\n    async (amount: string) => {\n      const stakeFn = isUsingBnb ? smartStakeBnb : smartStake\n      await stakeFn(smartChefContract, amount, account)\n      dispatch(updateUserStakedBalance(String(sousId), account))\n      dispatch(updateUserBalance(String(sousId), account))\n    },\n    [account, dispatch, isUsingBnb, smartChefContract, sousId],\n  )\n\n  return { onStake: handleStake }\n}\n\nexport default useStake\n","import styled from 'styled-components'\n\nconst FlexLayout = styled.div`\n  display: flex;\n  justify-content: center;\n  flex-wrap: wrap;\n  & > * {\n    min-width: 280px;\n    max-width: 31.5%;\n    width: 100%;\n    margin: 0 8px;\n    margin-bottom: 32px;\n  }\n`\n\nexport default FlexLayout\n","// Constructing the two forward-slash-separated parts of the 'Add Liquidity' URL\n// Each part of the url represents a different side of the LP pair.\n// In the URL, using the quote token 'BNB' is represented by 'ETH'\nconst getLiquidityUrlPathParts = ({ quoteTokenAdresses, quoteTokenSymbol, tokenAddresses }) => {\n  const chainId = process.env.REACT_APP_CHAIN_ID\n  const firstPart = quoteTokenSymbol === 'BNB' ? 'ETH' : quoteTokenAdresses[chainId]\n  const secondPart = tokenAddresses[chainId]\n  return `${firstPart}/${secondPart}`\n}\n\nexport default getLiquidityUrlPathParts\n","import { useCallback } from 'react'\nimport { useWallet } from '@binance-chain/bsc-use-wallet'\nimport { Contract } from 'web3-eth-contract'\nimport { ethers } from 'ethers'\nimport { useDispatch } from 'react-redux'\nimport { updateUserAllowance, fetchFarmUserDataAsync, fetchFarm3UserDataAsync } from 'state/actions'\nimport { approve } from 'utils/callHelpers'\nimport { useMasterchef, useMasterchef3, useCake, useLottery, useSmartChef } from './useContract'\n\n// Approve a Farm\nexport const useApprove = (lpContract: Contract) => {\n  const dispatch = useDispatch()\n  const { account }: { account: string } = useWallet()\n  const masterChefContract = useMasterchef()\n\n  const handleApprove = useCallback(async () => {\n    try {\n      const tx = await approve(lpContract, masterChefContract, account)\n      dispatch(fetchFarmUserDataAsync(account))\n      return tx\n    } catch (e) {\n      return false\n    }\n  }, [account, dispatch, lpContract, masterChefContract])\n\n  return { onApprove: handleApprove }\n}\n\n// Approve a Farm3\nexport const useApprove3 = (lpContract: Contract) => {\n  const dispatch = useDispatch()\n  const { account }: { account: string } = useWallet()\n  const masterChef3Contract = useMasterchef3()\n\n  const handleApprove = useCallback(async () => {\n    try {\n      const tx = await approve(lpContract, masterChef3Contract, account)\n      dispatch(fetchFarm3UserDataAsync(account))\n      return tx\n    } catch (e) {\n      return false\n    }\n  }, [account, dispatch, lpContract, masterChef3Contract])\n\n  return { onApprove: handleApprove }\n}\n\n// Approve a Pool\nexport const useSousApprove = (lpContract: Contract, sousId: number) => {\n  const dispatch = useDispatch()\n  const { account }: { account: string } = useWallet()\n  const smartChefContract = useSmartChef(sousId)\n\n  const handleApprove = useCallback(async () => {\n    try {\n      const tx = await approve(lpContract, smartChefContract, account)\n      dispatch(updateUserAllowance(String(sousId), account))\n      return tx\n    } catch (e) {\n      return false\n    }\n  }, [account, dispatch, lpContract, smartChefContract, sousId])\n\n  return { onApprove: handleApprove }\n}\n\n// Approve the lottery\nexport const useLotteryApprove = () => {\n  const { account }: { account: string } = useWallet()\n  const cakeContract = useCake()\n  const lotteryContract = useLottery()\n\n  const handleApprove = useCallback(async () => {\n    try {\n      const tx = await approve(cakeContract, lotteryContract, account)\n      return tx\n    } catch (e) {\n      return false\n    }\n  }, [account, cakeContract, lotteryContract])\n\n  return { onApprove: handleApprove }\n}\n\n// Approve an IFO\nexport const useIfoApprove = (tokenContract: Contract, spenderAddress: string) => {\n  const { account } = useWallet()\n  const onApprove = useCallback(async () => {\n    try {\n      const tx = await tokenContract.methods\n        .approve(spenderAddress, ethers.constants.MaxUint256)\n        .send({ from: account })\n      return tx\n    } catch {\n      return false\n    }\n  }, [account, spenderAddress, tokenContract])\n\n  return onApprove\n}\n","import { useCallback } from 'react'\nimport { useWallet } from '@binance-chain/bsc-use-wallet'\nimport { useDispatch } from 'react-redux'\nimport {\n  fetchFarmUserDataAsync,\n  fetchFarm3UserDataAsync,\n  updateUserStakedBalance,\n  updateUserBalance,\n  updateUserPendingReward,\n} from 'state/actions'\nimport { unstake, smartChefUnstake } from 'utils/callHelpers'\nimport { useMasterchef, useMasterchef3, useSmartChef } from './useContract'\n\nconst useUnstake = (pid: number) => {\n  const dispatch = useDispatch()\n  const { account } = useWallet()\n  const masterChefContract = useMasterchef()\n\n  const handleUnstake = useCallback(\n    async (amount: string) => {\n      const txHash = await unstake(masterChefContract, pid, amount, account)\n      dispatch(fetchFarmUserDataAsync(account))\n      console.info(txHash)\n    },\n    [account, dispatch, masterChefContract, pid],\n  )\n\n  return { onUnstake: handleUnstake }\n}\n\nexport const useUnstake3 = (pid: number) => {\n  const dispatch = useDispatch()\n  const { account } = useWallet()\n  const masterChef3Contract = useMasterchef3()\n\n  const handleUnstake = useCallback(\n    async (amount: string) => {\n      const txHash = await unstake(masterChef3Contract, pid, amount, account)\n      dispatch(fetchFarm3UserDataAsync(account))\n      console.info(txHash)\n    },\n    [account, dispatch, masterChef3Contract, pid],\n  )\n\n  return { onUnstake: handleUnstake }\n}\n\nexport const useSmartUnstake = (sousId: number) => {\n  const dispatch = useDispatch()\n  const { account } = useWallet()\n  const smartChefContract = useSmartChef(sousId)\n\n  const handleUnstake = useCallback(\n    async (amount: string) => {\n      await smartChefUnstake(smartChefContract, amount, account)\n      dispatch(updateUserStakedBalance(String(sousId), account))\n      dispatch(updateUserBalance(String(sousId), account))\n      dispatch(updateUserPendingReward(String(sousId), account))\n    },\n    [account, dispatch, smartChefContract, sousId],\n  )\n\n  return { onUnstake: handleUnstake }\n}\n\nexport default useUnstake\n","const roundToTwoDp = (number) => Math.round(number * 100) / 100\n\nexport const calculateCakeEarnedPerThousandDollars = ({ numberOfDays, farmApy, cakePrice }) => {\n  // Everything here is worked out relative to a year, with the asset compounding daily\n  const timesCompounded = 365\n  //   We use decimal values rather than % in the math for both APY and the number of days being calculates as a proportion of the year\n  const apyAsDecimal = farmApy / 100\n  const daysAsDecimalOfYear = numberOfDays / timesCompounded\n  //   Calculate the starting CAKE balance with a dollar balance of $1000.\n  const principal = 1000 / cakePrice\n\n  // This is a translation of the typical mathematical compounding APY formula. Details here: https://www.calculatorsoup.com/calculators/financial/compound-interest-calculator.php\n  const finalAmount = principal * (1 + apyAsDecimal / timesCompounded) ** (timesCompounded * daysAsDecimalOfYear)\n\n  // To get the cake earned, deduct the amount after compounding (finalAmount) from the starting CAKE balance (principal)\n  const interestEarned = finalAmount - principal\n  return roundToTwoDp(interestEarned)\n}\n\nexport const apyModalRoi = ({ amountEarned, amountInvested }) => {\n  const percentage = (amountEarned / amountInvested) * 100\n  return percentage.toFixed(2)\n}\n","import React from 'react'\nimport styled from 'styled-components'\nimport { ChevronDownIcon, ChevronUpIcon, Text } from '@pancakeswap-libs/uikit'\n\nexport interface ExpandableSectionButtonProps {\n  onClick?: () => void\n  expanded?: boolean\n}\n\nconst Wrapper = styled.div`\n  display: flex;\n  align-items: center;\n  justify-content: center;\n  cursor: pointer;\n\n  svg {\n    fill: ${({ theme }) => theme.colors.primary};\n  }\n`\n\nconst ExpandableSectionButton: React.FC<ExpandableSectionButtonProps> = ({ onClick, expanded }) => {\n  return (\n    <Wrapper aria-label=\"Hide or show expandable content\" role=\"button\" onClick={() => onClick()}>\n      <Text color=\"primary\" bold>\n        {expanded ? 'Hide' : 'Details'}\n      </Text>\n      {expanded ? <ChevronUpIcon /> : <ChevronDownIcon />}\n    </Wrapper>\n  )\n}\n\nExpandableSectionButton.defaultProps = {\n  expanded: false,\n}\n\nexport default ExpandableSectionButton\n"],"sourceRoot":""}