{"version":3,"sources":["hooks/useI18n.ts","hooks/useContract.ts","components/UnlockButton.tsx","config/constants/index.ts","utils/erc20.ts","hooks/useWeb3.ts"],"names":["useI18n","translations","useContext","TranslationsContext","translationId","fallback","data","length","foundTranslation","find","translation","stringId","text","includesVariable","includes","interpolatedText","isEmpty","Object","keys","forEach","dataKey","templateKey","RegExp","replace","useContract","abi","address","contractOptions","web3","useWeb3","useState","eth","Contract","contract","setContract","useEffect","useERC20","erc20","useCake","getCakeAddress","useLottery","lottery","getLotteryAddress","useMasterchef","masterChef","getMasterChefAddress","useMasterchef3","masterChef3","getMasterChef3Address","useSmartChef","id","config","poolsConfig","pool","sousId","rawAbi","poolCategory","PoolCategory","BINANCE","smartChefBnb","sousChef","contractAddress","process","useIfoV1Contract","useMemo","getIfoV1Contract","useIfoV2Contract","getIfoV2Contract","usePointCenterIfoContract","getPointCenterIfoContract","useClaimRefundContract","getClaimRefundContract","useProfile","getProfileContract","useERC721","getErc721Contract","useBunnyFactory","getBunnyFactoryContract","UnlockButton","props","TranslateString","useWallet","connect","reset","onPresentConnectModal","useWalletModal","onClick","farmsConfig","filter","farm","isCommunity","map","tokenSymbol","farms3Config","getContract","provider","Web3","getAllowance","lpContract","masterChefContract","account","a","methods","allowance","options","call","getTokenBalance","tokenAddress","userAddress","balanceOf","balance","RPC_URL","getRpcUrl","httpProvider","providers","HttpProvider","timeout","ethereum","refEth","useRef","setweb3","current"],"mappings":"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","file":"static/js/1.217f8e71.chunk.js","sourcesContent":["import { useContext } from 'react'\nimport { isEmpty } from 'lodash'\nimport { TranslationsContext } from '../contexts/Localisation/translationsContext'\n\ninterface ContextData {\n  [key: string]: number | string\n}\n\nconst useI18n = () => {\n  const { translations } = useContext(TranslationsContext)\n\n  return (translationId: number, fallback: string, data: ContextData = {}) => {\n    if (translations.length === 0) {\n      return fallback\n    }\n\n    const foundTranslation = translations.find((translation) => {\n      return translation.data.stringId === translationId\n    })\n\n    if (foundTranslation) {\n      const { text } = foundTranslation.data\n      const includesVariable = text.includes('%')\n\n      if (includesVariable) {\n        let interpolatedText = text\n\n        // If dynamic tags are found but no data was passed return the fallback\n        if (isEmpty(data)) {\n          return fallback\n        }\n\n        Object.keys(data).forEach((dataKey) => {\n          const templateKey = new RegExp(`%${dataKey}%`, 'g')\n          interpolatedText = interpolatedText.replace(templateKey, data[dataKey])\n        })\n\n        return interpolatedText\n      }\n\n      return text\n    }\n\n    return fallback\n  }\n}\n\nexport default useI18n\n","import { useEffect, useState, useMemo } from 'react'\nimport { AbiItem } from 'web3-utils'\nimport { ContractOptions } from 'web3-eth-contract'\nimport useWeb3 from 'hooks/useWeb3'\nimport {\n  getMasterChefAddress,\n  getMasterChef3Address,\n  getCakeAddress,\n  getCake3Address,\n  getLotteryAddress,\n  getLotteryTicketAddress,\n} from 'utils/addressHelpers'\nimport {\n  getBunnyFactoryContract,\n  getClaimRefundContract, getErc721Contract,\n  getIfoV1Contract,\n  getIfoV2Contract,\n  getPointCenterIfoContract, getProfileContract,\n} from 'utils/contractHelpers'\nimport { poolsConfig } from 'config/constants'\nimport { PoolCategory } from 'config/constants/types'\nimport ido from 'config/abi/ido.json'\nimport erc20 from 'config/abi/erc20.json'\nimport rabbitmintingfarm from 'config/abi/rabbitmintingfarm.json'\nimport pancakeRabbits from 'config/abi/pancakeRabbits.json'\nimport lottery from 'config/abi/lottery.json'\nimport lotteryTicket from 'config/abi/lotteryNft.json'\nimport masterChef from 'config/abi/masterchef.json'\nimport masterChef3 from 'config/abi/masterchef3.json'\nimport sousChef from 'config/abi/sousChef.json'\nimport smartChefBnb from 'config/abi/sousChefBnb.json'\n\nconst CHAIN_ID = process.env.REACT_APP_CHAIN_ID\n\nconst useContract = (abi: AbiItem, address: string, contractOptions?: ContractOptions) => {\n  const web3 = useWeb3()\n  const [contract, setContract] = useState(new web3.eth.Contract(abi, address, contractOptions))\n\n  useEffect(() => {\n    setContract(new web3.eth.Contract(abi, address, contractOptions))\n  }, [abi, address, contractOptions, web3])\n\n  return contract\n}\n\nexport const useIdoContract = (address: string) => {\n  const idoAbi = (ido as unknown) as AbiItem\n  return useContract(idoAbi, address)\n}\n\nexport const useERC20 = (address: string) => {\n  const erc20Abi = (erc20 as unknown) as AbiItem\n  return useContract(erc20Abi, address)\n}\n\nexport const useCake = () => {\n  return useERC20(getCakeAddress())\n}\n\nexport const useCake3 = () => {\n  return useERC20(getCake3Address())\n}\n\nexport const useRabbitMintingFarm = (address: string) => {\n  const rabbitMintingFarmAbi = (rabbitmintingfarm as unknown) as AbiItem\n  return useContract(rabbitMintingFarmAbi, address)\n}\n\nexport const usePancakeRabbits = (address: string) => {\n  const pancakeRabbitsAbi = (pancakeRabbits as unknown) as AbiItem\n  return useContract(pancakeRabbitsAbi, address)\n}\n\nexport const useLottery = () => {\n  const abi = (lottery as unknown) as AbiItem\n  return useContract(abi, getLotteryAddress())\n}\n\nexport const useLotteryTicket = () => {\n  const abi = (lotteryTicket as unknown) as AbiItem\n  return useContract(abi, getLotteryTicketAddress())\n}\n\nexport const useMasterchef = () => {\n  const abi = (masterChef as unknown) as AbiItem\n  return useContract(abi, getMasterChefAddress())\n}\n\nexport const useMasterchef3 = () => {\n  const abi = (masterChef3 as unknown) as AbiItem\n  return useContract(abi, getMasterChef3Address())\n}\n\nexport const useSmartChef = (id: number) => {\n  const config = poolsConfig.find((pool) => pool.sousId === id)\n  const rawAbi = config.poolCategory === PoolCategory.BINANCE ? smartChefBnb : sousChef\n  const abi = (rawAbi as unknown) as AbiItem\n  return useContract(abi, config.contractAddress[CHAIN_ID])\n}\n/**\n * Helper hooks to get specific contracts (by ABI)\n */\n\nexport const useIfoV1Contract = (address: string) => {\n  const web3 = useWeb3()\n  return useMemo(() => getIfoV1Contract(address, web3), [address, web3])\n}\n\nexport const useIfoV2Contract = (address: string) => {\n  const web3 = useWeb3()\n  return useMemo(() => getIfoV2Contract(address, web3), [address, web3])\n}\n\nexport const usePointCenterIfoContract = () => {\n  const web3 = useWeb3()\n  return useMemo(() => getPointCenterIfoContract(web3), [web3])\n}\n\nexport const useClaimRefundContract = () => {\n  const web3 = useWeb3()\n  return useMemo(() => getClaimRefundContract(web3), [web3])\n}\n\nexport const useProfile = () => {\n  const web3 = useWeb3()\n  return useMemo(() => getProfileContract(web3), [web3])\n}\n/**\n * @see https://docs.openzeppelin.com/contracts/3.x/api/token/erc721\n */\nexport const useERC721 = (address: string) => {\n  const web3 = useWeb3()\n  return useMemo(() => getErc721Contract(address, web3), [address, web3])\n}\n\nexport const useBunnyFactory = () => {\n  const web3 = useWeb3()\n  return useMemo(() => getBunnyFactoryContract(web3), [web3])\n}\n\nexport default useContract\n","import React from 'react'\nimport { Button, useWalletModal } from '@pancakeswap-libs/uikit'\nimport { useWallet } from '@binance-chain/bsc-use-wallet'\nimport useI18n from 'hooks/useI18n'\n\nconst UnlockButton = (props) => {\n  const TranslateString = useI18n()\n  const { connect, reset } = useWallet()\n  const { onPresentConnectModal } = useWalletModal(connect, reset)\n\n  return (\n    <Button onClick={onPresentConnectModal} {...props}>\n      {TranslateString(292, 'Unlock Wallet')}\n    </Button>\n  )\n}\n\nexport default UnlockButton\n","import farmsConfig from './farms'\nimport farms3Config from './farms3'\n\nconst communityFarms = farmsConfig.filter((farm) => farm.isCommunity).map((farm) => farm.tokenSymbol)\n\nconst communityFarms3 = farms3Config.filter((farm) => farm.isCommunity).map((farm) => farm.tokenSymbol)\n\nexport { farmsConfig, communityFarms, farms3Config, communityFarms3 }\nexport { default as poolsConfig } from './pools'\nexport { default as ifosConfig } from './ifo'\n","import Web3 from 'web3'\nimport { provider as ProviderType } from 'web3-core'\nimport { Contract } from 'web3-eth-contract'\nimport { AbiItem } from 'web3-utils'\nimport erc20 from 'config/abi/erc20.json'\n\nexport const getContract = (provider: ProviderType, address: string) => {\n  const web3 = new Web3(provider)\n  const contract = new web3.eth.Contract((erc20 as unknown) as AbiItem, address)\n  return contract\n}\n\nexport const getAllowance = async (\n  lpContract: Contract,\n  masterChefContract: Contract,\n  account: string,\n): Promise<string> => {\n  try {\n    const allowance: string = await lpContract.methods.allowance(account, masterChefContract.options.address).call()\n    return allowance\n  } catch (e) {\n    return '0'\n  }\n}\n\nexport const getTokenBalance = async (\n  provider: ProviderType,\n  tokenAddress: string,\n  userAddress: string,\n): Promise<string> => {\n  const contract = getContract(provider, tokenAddress)\n  try {\n    const balance: string = await contract.methods.balanceOf(userAddress).call()\n    return balance\n  } catch (e) {\n    return '0'\n  }\n}\n","import { useEffect, useState, useRef } from 'react'\nimport Web3 from 'web3'\nimport { HttpProviderOptions } from 'web3-core-helpers'\nimport { provider as ProviderType } from 'web3-core'\nimport { useWallet } from '@binance-chain/bsc-use-wallet'\nimport getRpcUrl from 'utils/getRpcUrl'\n\nconst RPC_URL = getRpcUrl()\nconst httpProvider = new Web3.providers.HttpProvider(RPC_URL, { timeout: 10000 } as HttpProviderOptions)\n\n/**\n * Provides a web3 instance using the provider provided by useWallet\n * with a fallback of an httpProver\n * Recreate web3 instance only if the ethereum provider change\n */\nconst useWeb3 = () => {\n  const { ethereum }: { ethereum: ProviderType } = useWallet()\n  const refEth = useRef(ethereum)\n  const [web3, setweb3] = useState(new Web3(ethereum || httpProvider))\n\n  useEffect(() => {\n    if (ethereum !== refEth.current) {\n      setweb3(new Web3(ethereum || httpProvider))\n      refEth.current = ethereum\n    }\n  }, [ethereum])\n\n  return web3\n}\n\nexport default useWeb3\n"],"sourceRoot":""}