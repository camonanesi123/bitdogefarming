{"ast":null,"code":"var _s = $RefreshSig$();\n\nimport BigNumber from 'bignumber.js';\nimport { BSC_BLOCK_TIME } from 'config';\nimport { PoolIds } from 'config/constants/types';\nimport { useBlock, useLpTokenPrice } from 'state/hooks';\nimport { useIfoV1Contract } from 'hooks/useContract';\nimport { useEffect, useState } from 'react';\nimport makeBatchRequest from 'utils/makeBatchRequest';\nimport { getStatus } from '../helpers';\n/**\n * Gets all public data of an IFO\n */\n\nconst useGetPublicIfoData = ifo => {\n  _s();\n\n  const {\n    address,\n    releaseBlockNumber\n  } = ifo;\n  const lpTokenPriceInUsd = useLpTokenPrice(ifo.currency.symbol);\n  const [state, setState] = useState({\n    status: 'idle',\n    blocksRemaining: 0,\n    secondsUntilStart: 0,\n    progress: 5,\n    secondsUntilEnd: 0,\n    startBlockNum: 0,\n    endBlockNum: 0,\n    numberPoints: null,\n    [PoolIds.poolUnlimited]: {\n      raisingAmountPool: new BigNumber(0),\n      totalAmountPool: new BigNumber(0),\n      offeringAmountPool: new BigNumber(0),\n      // Not know\n      limitPerUserInLP: new BigNumber(0),\n      //  Not used\n      taxRate: 0,\n      //  Not used\n      sumTaxesOverflow: new BigNumber(0) //  Not used\n\n    }\n  });\n  const {\n    currentBlock\n  } = useBlock();\n  const contract = useIfoV1Contract(address);\n  useEffect(() => {\n    const fetchProgress = async () => {\n      const [startBlock, endBlock, raisingAmount, totalAmount] = await makeBatchRequest([contract.methods.startBlock().call, contract.methods.endBlock().call, contract.methods.raisingAmount().call, contract.methods.totalAmount().call]);\n      const startBlockNum = parseInt(startBlock, 10);\n      const endBlockNum = parseInt(endBlock, 10);\n      const status = getStatus(currentBlock, startBlockNum, endBlockNum);\n      const totalBlocks = endBlockNum - startBlockNum;\n      const blocksRemaining = endBlockNum - currentBlock; // Calculate the total progress until finished or until start\n\n      const progress = currentBlock > startBlockNum ? (currentBlock - startBlockNum) / totalBlocks * 100 : (currentBlock - releaseBlockNumber) / (startBlockNum - releaseBlockNumber) * 100;\n      setState(prev => ({\n        status,\n        blocksRemaining,\n        secondsUntilStart: (startBlockNum - currentBlock) * BSC_BLOCK_TIME,\n        progress,\n        secondsUntilEnd: blocksRemaining * BSC_BLOCK_TIME,\n        startBlockNum,\n        endBlockNum,\n        currencyPriceInUSD: null,\n        numberPoints: null,\n        [PoolIds.poolUnlimited]: { ...prev.poolUnlimited,\n          raisingAmountPool: new BigNumber(raisingAmount),\n          totalAmountPool: new BigNumber(totalAmount)\n        }\n      }));\n    };\n\n    fetchProgress();\n  }, [address, currentBlock, contract, releaseBlockNumber, setState]);\n  return { ...state,\n    currencyPriceInUSD: lpTokenPriceInUsd\n  };\n};\n\n_s(useGetPublicIfoData, \"m3BYJmgEKtvJNew0VRv1W7LeQtk=\", false, function () {\n  return [useLpTokenPrice, useBlock, useIfoV1Contract];\n});\n\nexport default useGetPublicIfoData;","map":{"version":3,"sources":["C:/Users/hexia/Desktop/pancake_fork/frontend/src/hooks/ifo/v1/useGetPublicIfoData.ts"],"names":["BigNumber","BSC_BLOCK_TIME","PoolIds","useBlock","useLpTokenPrice","useIfoV1Contract","useEffect","useState","makeBatchRequest","getStatus","useGetPublicIfoData","ifo","address","releaseBlockNumber","lpTokenPriceInUsd","currency","symbol","state","setState","status","blocksRemaining","secondsUntilStart","progress","secondsUntilEnd","startBlockNum","endBlockNum","numberPoints","poolUnlimited","raisingAmountPool","totalAmountPool","offeringAmountPool","limitPerUserInLP","taxRate","sumTaxesOverflow","currentBlock","contract","fetchProgress","startBlock","endBlock","raisingAmount","totalAmount","methods","call","parseInt","totalBlocks","prev","currencyPriceInUSD"],"mappings":"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","sourcesContent":["import BigNumber from 'bignumber.js'\nimport { BSC_BLOCK_TIME } from 'config'\nimport { Ifo, IfoStatus, PoolIds } from 'config/constants/types'\nimport { useBlock, useLpTokenPrice } from 'state/hooks'\nimport { useIfoV1Contract } from 'hooks/useContract'\nimport { useEffect, useState } from 'react'\nimport makeBatchRequest from 'utils/makeBatchRequest'\nimport { PublicIfoData } from '../types'\nimport { getStatus } from '../helpers'\n\n/**\n * Gets all public data of an IFO\n */\nconst useGetPublicIfoData = (ifo: Ifo): PublicIfoData => {\n  const { address, releaseBlockNumber } = ifo\n  const lpTokenPriceInUsd = useLpTokenPrice(ifo.currency.symbol)\n  const [state, setState] = useState({\n    status: 'idle' as IfoStatus,\n    blocksRemaining: 0,\n    secondsUntilStart: 0,\n    progress: 5,\n    secondsUntilEnd: 0,\n    startBlockNum: 0,\n    endBlockNum: 0,\n    numberPoints: null,\n    [PoolIds.poolUnlimited]: {\n      raisingAmountPool: new BigNumber(0),\n      totalAmountPool: new BigNumber(0),\n      offeringAmountPool: new BigNumber(0), // Not know\n      limitPerUserInLP: new BigNumber(0), //  Not used\n      taxRate: 0, //  Not used\n      sumTaxesOverflow: new BigNumber(0), //  Not used\n    },\n  })\n  const { currentBlock } = useBlock()\n  const contract = useIfoV1Contract(address)\n\n  useEffect(() => {\n    const fetchProgress = async () => {\n      const [startBlock, endBlock, raisingAmount, totalAmount] = (await makeBatchRequest([\n        contract.methods.startBlock().call,\n        contract.methods.endBlock().call,\n        contract.methods.raisingAmount().call,\n        contract.methods.totalAmount().call,\n      ])) as [string, string, string, string]\n\n      const startBlockNum = parseInt(startBlock, 10)\n      const endBlockNum = parseInt(endBlock, 10)\n\n      const status = getStatus(currentBlock, startBlockNum, endBlockNum)\n      const totalBlocks = endBlockNum - startBlockNum\n      const blocksRemaining = endBlockNum - currentBlock\n\n      // Calculate the total progress until finished or until start\n      const progress =\n        currentBlock > startBlockNum\n          ? ((currentBlock - startBlockNum) / totalBlocks) * 100\n          : ((currentBlock - releaseBlockNumber) / (startBlockNum - releaseBlockNumber)) * 100\n\n      setState((prev) => ({\n        status,\n        blocksRemaining,\n        secondsUntilStart: (startBlockNum - currentBlock) * BSC_BLOCK_TIME,\n        progress,\n        secondsUntilEnd: blocksRemaining * BSC_BLOCK_TIME,\n        startBlockNum,\n        endBlockNum,\n        currencyPriceInUSD: null,\n        numberPoints: null,\n        [PoolIds.poolUnlimited]: {\n          ...prev.poolUnlimited,\n          raisingAmountPool: new BigNumber(raisingAmount),\n          totalAmountPool: new BigNumber(totalAmount),\n        },\n      }))\n    }\n\n    fetchProgress()\n  }, [address, currentBlock, contract, releaseBlockNumber, setState])\n\n  return { ...state, currencyPriceInUSD: lpTokenPriceInUsd }\n}\n\nexport default useGetPublicIfoData\n"]},"metadata":{},"sourceType":"module"}