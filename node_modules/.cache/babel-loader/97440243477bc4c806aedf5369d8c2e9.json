{"ast":null,"code":"var _s = $RefreshSig$(),\n    _s2 = $RefreshSig$(),\n    _s3 = $RefreshSig$();\n\nimport { useCallback } from 'react';\nimport { useWallet } from '@binance-chain/bsc-use-wallet';\nimport { useDispatch } from 'react-redux';\nimport { fetchFarmUserDataAsync, fetchFarm3UserDataAsync, updateUserStakedBalance, updateUserBalance } from 'state/actions';\nimport { stake, smartStakeBnb, smartStake } from 'utils/callHelpers';\nimport { useMasterchef, useMasterchef3, useSmartChef } from './useContract';\n\nconst useStake = pid => {\n  _s();\n\n  const dispatch = useDispatch();\n  const {\n    account\n  } = useWallet();\n  const masterChefContract = useMasterchef();\n  const handleStake = useCallback(async amount => {\n    const txHash = await stake(masterChefContract, pid, amount, account);\n    dispatch(fetchFarmUserDataAsync(account));\n    console.info(txHash);\n  }, [account, dispatch, masterChefContract, pid]);\n  return {\n    onStake: handleStake\n  };\n};\n\n_s(useStake, \"czMcmnP38Pb/7Q/GWJw52z/pz6w=\", false, function () {\n  return [useDispatch, useWallet, useMasterchef];\n});\n\nexport const useStake3 = pid => {\n  _s2();\n\n  const dispatch = useDispatch();\n  const {\n    account\n  } = useWallet();\n  const masterChef3Contract = useMasterchef3();\n  const handleStake = useCallback(async amount => {\n    const txHash = await stake(masterChef3Contract, pid, amount, account);\n    dispatch(fetchFarm3UserDataAsync(account));\n    console.info(txHash);\n  }, [account, dispatch, masterChef3Contract, pid]);\n  return {\n    onStake: handleStake\n  };\n};\n\n_s2(useStake3, \"cTGIHMnk9+xWvc3prHISgS6Gvxs=\", false, function () {\n  return [useDispatch, useWallet, useMasterchef3];\n});\n\nexport const useSmartStake = (sousId, isUsingBnb = false) => {\n  _s3();\n\n  const dispatch = useDispatch();\n  const {\n    account\n  } = useWallet();\n  const smartChefContract = useSmartChef(sousId);\n  const handleStake = useCallback(async amount => {\n    const stakeFn = isUsingBnb ? smartStakeBnb : smartStake;\n    await stakeFn(smartChefContract, amount, account);\n    dispatch(updateUserStakedBalance(String(sousId), account));\n    dispatch(updateUserBalance(String(sousId), account));\n  }, [account, dispatch, isUsingBnb, smartChefContract, sousId]);\n  return {\n    onStake: handleStake\n  };\n};\n\n_s3(useSmartStake, \"xw8w27H2cQx5H9wumOYwv2Cz6Gc=\", false, function () {\n  return [useDispatch, useWallet, useSmartChef];\n});\n\nexport default useStake;","map":{"version":3,"sources":["C:/Users/hexia/Desktop/pancake_fork/frontend/src/hooks/useStake.ts"],"names":["useCallback","useWallet","useDispatch","fetchFarmUserDataAsync","fetchFarm3UserDataAsync","updateUserStakedBalance","updateUserBalance","stake","smartStakeBnb","smartStake","useMasterchef","useMasterchef3","useSmartChef","useStake","pid","dispatch","account","masterChefContract","handleStake","amount","txHash","console","info","onStake","useStake3","masterChef3Contract","useSmartStake","sousId","isUsingBnb","smartChefContract","stakeFn","String"],"mappings":"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","sourcesContent":["import { useCallback } from 'react'\nimport { useWallet } from '@binance-chain/bsc-use-wallet'\nimport { useDispatch } from 'react-redux'\nimport { fetchFarmUserDataAsync, fetchFarm3UserDataAsync, updateUserStakedBalance, updateUserBalance } from 'state/actions'\nimport { stake, smartStakeBnb, smartStake } from 'utils/callHelpers'\nimport { useMasterchef, useMasterchef3, useSmartChef } from './useContract'\n\nconst useStake = (pid: number) => {\n  const dispatch = useDispatch()\n  const { account } = useWallet()\n  const masterChefContract = useMasterchef()\n\n  const handleStake = useCallback(\n    async (amount: string) => {\n      const txHash = await stake(masterChefContract, pid, amount, account)\n      dispatch(fetchFarmUserDataAsync(account))\n      console.info(txHash)\n    },\n    [account, dispatch, masterChefContract, pid],\n  )\n\n  return { onStake: handleStake }\n}\n\nexport const useStake3 = (pid: number) => {\n  const dispatch = useDispatch()\n  const { account } = useWallet()\n  const masterChef3Contract = useMasterchef3()\n\n  const handleStake = useCallback(\n    async (amount: string) => {\n      const txHash = await stake(masterChef3Contract, pid, amount, account)\n      dispatch(fetchFarm3UserDataAsync(account))\n      console.info(txHash)\n    },\n    [account, dispatch, masterChef3Contract, pid],\n  )\n\n  return { onStake: handleStake }\n}\n\nexport const useSmartStake = (sousId: number, isUsingBnb = false) => {\n  const dispatch = useDispatch()\n  const { account } = useWallet()\n  const smartChefContract = useSmartChef(sousId)\n\n  const handleStake = useCallback(\n    async (amount: string) => {\n      const stakeFn = isUsingBnb ? smartStakeBnb : smartStake\n      await stakeFn(smartChefContract, amount, account)\n      dispatch(updateUserStakedBalance(String(sousId), account))\n      dispatch(updateUserBalance(String(sousId), account))\n    },\n    [account, dispatch, isUsingBnb, smartChefContract, sousId],\n  )\n\n  return { onStake: handleStake }\n}\n\nexport default useStake\n"]},"metadata":{},"sourceType":"module"}