{"ast":null,"code":"import _regeneratorRuntime from\"D:/task159/frontend/node_modules/babel-preset-react-app/node_modules/@babel/runtime/regenerator\";import _defineProperty from\"D:/task159/frontend/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/defineProperty\";import _objectSpread from\"D:/task159/frontend/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/objectSpread2\";import _asyncToGenerator from\"D:/task159/frontend/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/asyncToGenerator\";/* eslint-disable no-param-reassign */import{createAsyncThunk,createSlice}from'@reduxjs/toolkit';var initialState={isLoading:false,lastUpdated:null,data:null};// Thunks\nexport var fetchPrices=createAsyncThunk('prices/fetch',/*#__PURE__*/_asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee(){var response,data;return _regeneratorRuntime.wrap(function _callee$(_context){while(1){switch(_context.prev=_context.next){case 0:_context.next=2;return fetch('https://api.pancakeswap.info/api/tokens');case 2:response=_context.sent;_context.next=5;return response.json();case 5:data=_context.sent;return _context.abrupt(\"return\",{updated_at:data.updated_at,data:Object.keys(data.data).reduce(function(accum,token){return _objectSpread(_objectSpread({},accum),{},_defineProperty({},token.toLowerCase(),parseFloat(data.data[token].price)));},{})});case 7:case\"end\":return _context.stop();}}},_callee);})));export var pricesSlice=createSlice({name:'prices',initialState:initialState,reducers:{},extraReducers:function extraReducers(builder){builder.addCase(fetchPrices.pending,function(state){state.isLoading=true;});builder.addCase(fetchPrices.fulfilled,function(state,action){state.isLoading=false;state.lastUpdated=action.payload.updated_at;state.data=action.payload.data;});}});export default pricesSlice.reducer;","map":{"version":3,"sources":["D:/task159/frontend/src/state/prices/index.ts"],"names":["createAsyncThunk","createSlice","initialState","isLoading","lastUpdated","data","fetchPrices","fetch","response","json","updated_at","Object","keys","reduce","accum","token","toLowerCase","parseFloat","price","pricesSlice","name","reducers","extraReducers","builder","addCase","pending","state","fulfilled","action","payload","reducer"],"mappings":"siBAAA,sCACA,OAASA,gBAAT,CAA2BC,WAA3B,KAA6D,kBAA7D,CAGA,GAAMC,CAAAA,YAAwB,CAAG,CAC/BC,SAAS,CAAE,KADoB,CAE/BC,WAAW,CAAE,IAFkB,CAG/BC,IAAI,CAAE,IAHyB,CAAjC,CAMA;AACA,MAAO,IAAMC,CAAAA,WAAW,CAAGN,gBAAgB,CAAgB,cAAhB,sEAAgC,2KAClDO,CAAAA,KAAK,CAAC,yCAAD,CAD6C,QACnEC,QADmE,qCAErDA,CAAAA,QAAQ,CAACC,IAAT,EAFqD,QAEnEJ,IAFmE,+CAIlE,CACLK,UAAU,CAAEL,IAAI,CAACK,UADZ,CAELL,IAAI,CAAEM,MAAM,CAACC,IAAP,CAAYP,IAAI,CAACA,IAAjB,EAAuBQ,MAAvB,CAA8B,SAACC,KAAD,CAAQC,KAAR,CAAkB,CACpD,sCACKD,KADL,wBAEGC,KAAK,CAACC,WAAN,EAFH,CAEyBC,UAAU,CAACZ,IAAI,CAACA,IAAL,CAAUU,KAAV,EAAiBG,KAAlB,CAFnC,GAID,CALK,CAKH,EALG,CAFD,CAJkE,wDAAhC,GAApC,CAeP,MAAO,IAAMC,CAAAA,WAAW,CAAGlB,WAAW,CAAC,CACrCmB,IAAI,CAAE,QAD+B,CAErClB,YAAY,CAAZA,YAFqC,CAGrCmB,QAAQ,CAAE,EAH2B,CAIrCC,aAAa,CAAE,uBAACC,OAAD,CAAa,CAC1BA,OAAO,CAACC,OAAR,CAAgBlB,WAAW,CAACmB,OAA5B,CAAqC,SAACC,KAAD,CAAW,CAC9CA,KAAK,CAACvB,SAAN,CAAkB,IAAlB,CACD,CAFD,EAGAoB,OAAO,CAACC,OAAR,CAAgBlB,WAAW,CAACqB,SAA5B,CAAuC,SAACD,KAAD,CAAQE,MAAR,CAAiD,CACtFF,KAAK,CAACvB,SAAN,CAAkB,KAAlB,CACAuB,KAAK,CAACtB,WAAN,CAAoBwB,MAAM,CAACC,OAAP,CAAenB,UAAnC,CACAgB,KAAK,CAACrB,IAAN,CAAauB,MAAM,CAACC,OAAP,CAAexB,IAA5B,CACD,CAJD,EAKD,CAboC,CAAD,CAA/B,CAgBP,cAAec,CAAAA,WAAW,CAACW,OAA3B","sourcesContent":["/* eslint-disable no-param-reassign */\nimport { createAsyncThunk, createSlice, PayloadAction } from '@reduxjs/toolkit'\nimport { PriceApiResponse, PriceApiThunk, PriceState } from 'state/types'\n\nconst initialState: PriceState = {\n  isLoading: false,\n  lastUpdated: null,\n  data: null,\n}\n\n// Thunks\nexport const fetchPrices = createAsyncThunk<PriceApiThunk>('prices/fetch', async () => {\n  const response = await fetch('https://api.pancakeswap.info/api/tokens')\n  const data = (await response.json()) as PriceApiResponse\n  // Return normalized token names\n  return {\n    updated_at: data.updated_at,\n    data: Object.keys(data.data).reduce((accum, token) => {\n      return {\n        ...accum,\n        [token.toLowerCase()]: parseFloat(data.data[token].price),\n      }\n    }, {}),\n  }\n})\n\nexport const pricesSlice = createSlice({\n  name: 'prices',\n  initialState,\n  reducers: {},\n  extraReducers: (builder) => {\n    builder.addCase(fetchPrices.pending, (state) => {\n      state.isLoading = true\n    })\n    builder.addCase(fetchPrices.fulfilled, (state, action: PayloadAction<PriceApiThunk>) => {\n      state.isLoading = false\n      state.lastUpdated = action.payload.updated_at\n      state.data = action.payload.data\n    })\n  },\n})\n\nexport default pricesSlice.reducer\n"]},"metadata":{},"sourceType":"module"}