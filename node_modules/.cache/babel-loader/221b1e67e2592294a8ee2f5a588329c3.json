{"ast":null,"code":"var _s = $RefreshSig$(),\n    _s2 = $RefreshSig$(),\n    _s3 = $RefreshSig$(),\n    _s4 = $RefreshSig$(),\n    _s5 = $RefreshSig$();\n\nimport { useCallback } from 'react';\nimport { useWallet } from '@binance-chain/bsc-use-wallet';\nimport { useDispatch } from 'react-redux';\nimport { fetchFarmUserDataAsync, fetchFarm3UserDataAsync, updateUserBalance, updateUserPendingReward } from 'state/actions';\nimport { smartHarvest, smartHarvestBnb, harvest } from 'utils/callHelpers';\nimport { useMasterchef, useMasterchef3, useSmartChef } from './useContract';\nexport const useHarvest = farmPid => {\n  _s();\n\n  const dispatch = useDispatch();\n  const {\n    account\n  } = useWallet();\n  const masterChefContract = useMasterchef();\n  const handleHarvest = useCallback(async () => {\n    const txHash = await harvest(masterChefContract, farmPid, account);\n    dispatch(fetchFarmUserDataAsync(account));\n    return txHash;\n  }, [account, dispatch, farmPid, masterChefContract]);\n  return {\n    onReward: handleHarvest\n  };\n};\n\n_s(useHarvest, \"UT4quCg5r96YBGnHn7yg5VONUdg=\", false, function () {\n  return [useDispatch, useWallet, useMasterchef];\n});\n\nexport const useAllHarvest = farmPids => {\n  _s2();\n\n  const {\n    account\n  } = useWallet();\n  const masterChefContract = useMasterchef();\n  const handleHarvest = useCallback(async () => {\n    const harvestPromises = farmPids.reduce((accum, pid) => {\n      return [...accum, harvest(masterChefContract, pid, account)];\n    }, []);\n    return Promise.all(harvestPromises);\n  }, [account, farmPids, masterChefContract]);\n  return {\n    onReward: handleHarvest\n  };\n};\n\n_s2(useAllHarvest, \"MxLQ/Cd4zmOMdglbbhX6+hOW2K0=\", false, function () {\n  return [useWallet, useMasterchef];\n});\n\nexport const useHarvest3 = farmPid => {\n  _s3();\n\n  const dispatch = useDispatch();\n  const {\n    account\n  } = useWallet();\n  const masterChef3Contract = useMasterchef3();\n  const handleHarvest = useCallback(async () => {\n    const txHash = await harvest(masterChef3Contract, farmPid, account);\n    dispatch(fetchFarm3UserDataAsync(account));\n    return txHash;\n  }, [account, dispatch, farmPid, masterChef3Contract]);\n  return {\n    onReward: handleHarvest\n  };\n};\n\n_s3(useHarvest3, \"6Z/VF7IIJqOE4V3CJLycLOD+Opk=\", false, function () {\n  return [useDispatch, useWallet, useMasterchef3];\n});\n\nexport const useAllHarvest3 = farmPids => {\n  _s4();\n\n  const {\n    account\n  } = useWallet();\n  const masterChef3Contract = useMasterchef3();\n  const handleHarvest = useCallback(async () => {\n    const harvestPromises = farmPids.reduce((accum, pid) => {\n      return [...accum, harvest(masterChef3Contract, pid, account)];\n    }, []);\n    return Promise.all(harvestPromises);\n  }, [account, farmPids, masterChef3Contract]);\n  return {\n    onReward: handleHarvest\n  };\n};\n\n_s4(useAllHarvest3, \"QOAd/h+VgOaxrLjbHWB5eKgG4dQ=\", false, function () {\n  return [useWallet, useMasterchef3];\n});\n\nexport const useSmartChefHarvest = (sousId, isUsingBnb = false) => {\n  _s5();\n\n  const dispatch = useDispatch();\n  const {\n    account\n  } = useWallet();\n  const smartChefContract = useSmartChef(sousId);\n  const handleHarvest = useCallback(async () => {\n    const harvestFn = isUsingBnb ? smartHarvestBnb : smartHarvest;\n    await harvestFn(smartChefContract, account);\n    dispatch(updateUserPendingReward(sousId, account));\n    dispatch(updateUserBalance(sousId, account));\n  }, [account, dispatch, isUsingBnb, smartChefContract, sousId]);\n  return {\n    onReward: handleHarvest\n  };\n};\n\n_s5(useSmartChefHarvest, \"sEBq/v6rYgIp1Ul5nBKdght9EcY=\", false, function () {\n  return [useDispatch, useWallet, useSmartChef];\n});","map":{"version":3,"sources":["C:/Users/hexia/Desktop/pancake_fork/frontend/src/hooks/useHarvest.ts"],"names":["useCallback","useWallet","useDispatch","fetchFarmUserDataAsync","fetchFarm3UserDataAsync","updateUserBalance","updateUserPendingReward","smartHarvest","smartHarvestBnb","harvest","useMasterchef","useMasterchef3","useSmartChef","useHarvest","farmPid","dispatch","account","masterChefContract","handleHarvest","txHash","onReward","useAllHarvest","farmPids","harvestPromises","reduce","accum","pid","Promise","all","useHarvest3","masterChef3Contract","useAllHarvest3","useSmartChefHarvest","sousId","isUsingBnb","smartChefContract","harvestFn"],"mappings":"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","sourcesContent":["import { useCallback } from 'react'\nimport { useWallet } from '@binance-chain/bsc-use-wallet'\nimport { useDispatch } from 'react-redux'\nimport { fetchFarmUserDataAsync, fetchFarm3UserDataAsync, updateUserBalance, updateUserPendingReward } from 'state/actions'\nimport { smartHarvest, smartHarvestBnb, harvest } from 'utils/callHelpers'\nimport { useMasterchef, useMasterchef3, useSmartChef } from './useContract'\n\nexport const useHarvest = (farmPid: number) => {\n  const dispatch = useDispatch()\n  const { account } = useWallet()\n  const masterChefContract = useMasterchef()\n\n  const handleHarvest = useCallback(async () => {\n    const txHash = await harvest(masterChefContract, farmPid, account)\n    dispatch(fetchFarmUserDataAsync(account))\n    return txHash\n  }, [account, dispatch, farmPid, masterChefContract])\n\n  return { onReward: handleHarvest }\n}\n\nexport const useAllHarvest = (farmPids: number[]) => {\n  const { account } = useWallet()\n  const masterChefContract = useMasterchef()\n\n  const handleHarvest = useCallback(async () => {\n    const harvestPromises = farmPids.reduce((accum, pid) => {\n      return [...accum, harvest(masterChefContract, pid, account)]\n    }, [])\n\n    return Promise.all(harvestPromises)\n  }, [account, farmPids, masterChefContract])\n\n  return { onReward: handleHarvest }\n}\n\n\nexport const useHarvest3 = (farmPid: number) => {\n  const dispatch = useDispatch()\n  const { account } = useWallet()\n  const masterChef3Contract = useMasterchef3()\n\n  const handleHarvest = useCallback(async () => {\n    const txHash = await harvest(masterChef3Contract, farmPid, account)\n    dispatch(fetchFarm3UserDataAsync(account))\n    return txHash\n  }, [account, dispatch, farmPid, masterChef3Contract])\n\n  return { onReward: handleHarvest }\n}\n\nexport const useAllHarvest3 = (farmPids: number[]) => {\n  const { account } = useWallet()\n  const masterChef3Contract = useMasterchef3()\n\n  const handleHarvest = useCallback(async () => {\n    const harvestPromises = farmPids.reduce((accum, pid) => {\n      return [...accum, harvest(masterChef3Contract, pid, account)]\n    }, [])\n\n    return Promise.all(harvestPromises)\n  }, [account, farmPids, masterChef3Contract])\n\n  return { onReward: handleHarvest }\n}\n\nexport const useSmartChefHarvest = (sousId, isUsingBnb = false) => {\n  const dispatch = useDispatch()\n  const { account } = useWallet()\n  const smartChefContract = useSmartChef(sousId)\n\n  const handleHarvest = useCallback(async () => {\n    const harvestFn = isUsingBnb ? smartHarvestBnb : smartHarvest\n    await harvestFn(smartChefContract, account)\n    dispatch(updateUserPendingReward(sousId, account))\n    dispatch(updateUserBalance(sousId, account))\n  }, [account, dispatch, isUsingBnb, smartChefContract, sousId])\n\n  return { onReward: handleHarvest }\n}\n"]},"metadata":{},"sourceType":"module"}