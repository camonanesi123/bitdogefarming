{"ast":null,"code":"var _s = $RefreshSig$();\n\nimport { useEffect, useState } from 'react';\nimport BigNumber from 'bignumber.js';\nimport { PoolIds } from 'config/constants/types';\nimport { useERC20, useIfoV2Contract } from 'hooks/useContract';\nimport { useIfoAllowance } from 'hooks/useAllowance';\nimport useRefresh from 'hooks/useRefresh';\nimport makeBatchRequest from 'utils/makeBatchRequest';\nimport { getAddress } from 'utils/addressHelpers';\nimport { useWallet } from '@binance-chain/bsc-use-wallet';\n\n/**\n * Gets all data from an IFO related to a wallet\n */\nconst useGetWalletIfoData = ifo => {\n  _s();\n\n  const {\n    fastRefresh\n  } = useRefresh();\n  const [state, setState] = useState({\n    poolBasic: {\n      amountTokenCommittedInLP: new BigNumber(0),\n      offeringAmountInToken: new BigNumber(0),\n      refundingAmountInLP: new BigNumber(0),\n      taxAmountInLP: new BigNumber(0),\n      hasClaimed: false,\n      isPendingTx: false\n    },\n    poolUnlimited: {\n      amountTokenCommittedInLP: new BigNumber(0),\n      offeringAmountInToken: new BigNumber(0),\n      refundingAmountInLP: new BigNumber(0),\n      taxAmountInLP: new BigNumber(0),\n      hasClaimed: false,\n      isPendingTx: false\n    }\n  });\n  const {\n    address,\n    currency\n  } = ifo; // const { account } = useWeb3React()\n\n  const {\n    account\n  } = useWallet();\n  const contract = useIfoV2Contract(address);\n  const currencyContract = useERC20(getAddress(currency.address));\n  const allowance = useIfoAllowance(currencyContract, address);\n\n  const setPendingTx = (status, poolId) => setState(prevState => ({ ...prevState,\n    [poolId]: { ...prevState[poolId],\n      isPendingTx: status\n    }\n  }));\n\n  const addUserContributedAmount = async (amount, poolId) => {\n    const [[offeringAmountInToken]] = await contract.methods.viewUserOfferingAndRefundingAmountsForPools(account, [poolId === PoolIds.poolBasic ? 0 : 1]).call();\n    setState(prevState => ({ ...prevState,\n      [poolId]: { ...prevState[poolId],\n        amountTokenCommittedInLP: prevState[poolId].amountTokenCommittedInLP.plus(amount),\n        offeringAmountInToken\n      }\n    }));\n  };\n\n  const setIsClaimed = poolId => {\n    setState(prevState => ({ ...prevState,\n      [poolId]: { ...prevState[poolId],\n        hasClaimed: true\n      }\n    }));\n  };\n\n  useEffect(() => {\n    const fetchIfoData = async () => {\n      const [userInfo, amounts] = await makeBatchRequest([contract.methods.viewUserInfo(account, [0, 1]).call, contract.methods.viewUserOfferingAndRefundingAmountsForPools(account, [0, 1]).call]);\n      setState(prevState => ({ ...prevState,\n        poolBasic: { ...prevState.poolBasic,\n          amountTokenCommittedInLP: new BigNumber(userInfo[0][0]),\n          offeringAmountInToken: new BigNumber(amounts[0][0]),\n          refundingAmountInLP: new BigNumber(amounts[0][1]),\n          taxAmountInLP: new BigNumber(amounts[0][2]),\n          hasClaimed: userInfo[1][0]\n        },\n        poolUnlimited: { ...prevState.poolUnlimited,\n          amountTokenCommittedInLP: new BigNumber(userInfo[0][1]),\n          offeringAmountInToken: new BigNumber(amounts[1][0]),\n          refundingAmountInLP: new BigNumber(amounts[1][1]),\n          taxAmountInLP: new BigNumber(amounts[1][2]),\n          hasClaimed: userInfo[1][1]\n        }\n      }));\n    };\n\n    if (account) {\n      fetchIfoData();\n    }\n  }, [account, contract, fastRefresh]);\n  return { ...state,\n    allowance,\n    contract,\n    setPendingTx,\n    addUserContributedAmount,\n    setIsClaimed\n  };\n};\n\n_s(useGetWalletIfoData, \"T0gJZ9+Mz+s/dYpIyQLQfQ4FS7g=\", false, function () {\n  return [useRefresh, useWallet, useIfoV2Contract, useERC20, useIfoAllowance];\n});\n\nexport default useGetWalletIfoData;","map":{"version":3,"sources":["C:/Users/hexia/Desktop/pancake_fork/frontend/src/hooks/ifo/v2/useGetWalletIfoData.ts"],"names":["useEffect","useState","BigNumber","PoolIds","useERC20","useIfoV2Contract","useIfoAllowance","useRefresh","makeBatchRequest","getAddress","useWallet","useGetWalletIfoData","ifo","fastRefresh","state","setState","poolBasic","amountTokenCommittedInLP","offeringAmountInToken","refundingAmountInLP","taxAmountInLP","hasClaimed","isPendingTx","poolUnlimited","address","currency","account","contract","currencyContract","allowance","setPendingTx","status","poolId","prevState","addUserContributedAmount","amount","methods","viewUserOfferingAndRefundingAmountsForPools","call","plus","setIsClaimed","fetchIfoData","userInfo","amounts","viewUserInfo"],"mappings":"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","sourcesContent":["import { useEffect, useState } from 'react'\nimport { useWeb3React } from '@web3-react/core'\nimport BigNumber from 'bignumber.js'\nimport { Ifo, PoolIds } from 'config/constants/types'\nimport { useERC20, useIfoV2Contract } from 'hooks/useContract'\nimport { useIfoAllowance } from 'hooks/useAllowance'\nimport useRefresh from 'hooks/useRefresh'\nimport makeBatchRequest from 'utils/makeBatchRequest'\nimport { getAddress } from 'utils/addressHelpers'\nimport { useWallet } from '@binance-chain/bsc-use-wallet'\nimport { WalletIfoState, WalletIfoData } from '../types'\n\n\n/**\n * Gets all data from an IFO related to a wallet\n */\nconst useGetWalletIfoData = (ifo: Ifo): WalletIfoData => {\n  const { fastRefresh } = useRefresh()\n  const [state, setState] = useState<WalletIfoState>({\n    poolBasic: {\n      amountTokenCommittedInLP: new BigNumber(0),\n      offeringAmountInToken: new BigNumber(0),\n      refundingAmountInLP: new BigNumber(0),\n      taxAmountInLP: new BigNumber(0),\n      hasClaimed: false,\n      isPendingTx: false,\n    },\n    poolUnlimited: {\n      amountTokenCommittedInLP: new BigNumber(0),\n      offeringAmountInToken: new BigNumber(0),\n      refundingAmountInLP: new BigNumber(0),\n      taxAmountInLP: new BigNumber(0),\n      hasClaimed: false,\n      isPendingTx: false,\n    },\n  })\n\n  const { address, currency } = ifo\n\n  // const { account } = useWeb3React()\n  const { account } = useWallet()\n  const contract = useIfoV2Contract(address)\n  const currencyContract = useERC20(getAddress(currency.address))\n  const allowance = useIfoAllowance(currencyContract, address)\n\n  const setPendingTx = (status: boolean, poolId: PoolIds) =>\n    setState((prevState) => ({\n      ...prevState,\n      [poolId]: {\n        ...prevState[poolId],\n        isPendingTx: status,\n      },\n    }))\n\n  const addUserContributedAmount = async (amount: BigNumber, poolId: PoolIds) => {\n    const [[offeringAmountInToken]] = await contract.methods\n      .viewUserOfferingAndRefundingAmountsForPools(account, [poolId === PoolIds.poolBasic ? 0 : 1])\n      .call()\n    setState((prevState) => ({\n      ...prevState,\n      [poolId]: {\n        ...prevState[poolId],\n        amountTokenCommittedInLP: prevState[poolId].amountTokenCommittedInLP.plus(amount),\n        offeringAmountInToken,\n      },\n    }))\n  }\n\n  const setIsClaimed = (poolId: PoolIds) => {\n    setState((prevState) => ({\n      ...prevState,\n      [poolId]: {\n        ...prevState[poolId],\n        hasClaimed: true,\n      },\n    }))\n  }\n\n  useEffect(() => {\n    const fetchIfoData = async () => {\n      const [userInfo, amounts] = await makeBatchRequest([\n        contract.methods.viewUserInfo(account, [0, 1]).call,\n        contract.methods.viewUserOfferingAndRefundingAmountsForPools(account, [0, 1]).call,\n      ])\n\n      setState((prevState) => ({\n        ...prevState,\n        poolBasic: {\n          ...prevState.poolBasic,\n          amountTokenCommittedInLP: new BigNumber(userInfo[0][0]),\n          offeringAmountInToken: new BigNumber(amounts[0][0]),\n          refundingAmountInLP: new BigNumber(amounts[0][1]),\n          taxAmountInLP: new BigNumber(amounts[0][2]),\n          hasClaimed: userInfo[1][0],\n        },\n        poolUnlimited: {\n          ...prevState.poolUnlimited,\n          amountTokenCommittedInLP: new BigNumber(userInfo[0][1]),\n          offeringAmountInToken: new BigNumber(amounts[1][0]),\n          refundingAmountInLP: new BigNumber(amounts[1][1]),\n          taxAmountInLP: new BigNumber(amounts[1][2]),\n          hasClaimed: userInfo[1][1],\n        },\n      }))\n    }\n\n    if (account) {\n      fetchIfoData()\n    }\n  }, [account, contract, fastRefresh])\n\n  return { ...state, allowance, contract, setPendingTx, addUserContributedAmount, setIsClaimed }\n}\n\nexport default useGetWalletIfoData\n"]},"metadata":{},"sourceType":"module"}