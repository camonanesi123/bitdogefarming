{"ast":null,"code":"import _regeneratorRuntime from\"D:/task159/frontend/node_modules/babel-preset-react-app/node_modules/@babel/runtime/regenerator\";import _objectSpread from\"D:/task159/frontend/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/objectSpread2\";import _slicedToArray from\"D:/task159/frontend/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/slicedToArray\";import _asyncToGenerator from\"D:/task159/frontend/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/asyncToGenerator\";import BigNumber from'bignumber.js';import erc20 from'config/abi/erc20.json';import masterchefABI from'config/abi/masterchef.json';import multicall from'utils/multicall';import{getMasterChefAddress}from'utils/addressHelpers';import farmsConfig from'config/constants/farms';import{QuoteToken}from'../../config/constants/types';var CHAIN_ID=process.env.REACT_APP_CHAIN_ID;var fetchFarms=/*#__PURE__*/function(){var _ref=_asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee2(){var data;return _regeneratorRuntime.wrap(function _callee2$(_context2){while(1){switch(_context2.prev=_context2.next){case 0:_context2.next=2;return Promise.all(farmsConfig.map(/*#__PURE__*/function(){var _ref2=_asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee(farmConfig){var lpAdress,calls,_yield$multicall,_yield$multicall2,tokenBalanceLP,quoteTokenBlanceLP,lpTokenBalanceMC,lpTotalSupply,tokenDecimals,quoteTokenDecimals,tokenAmount,lpTotalInQuoteToken,tokenPriceVsQuote,lpTokenRatio,quoteTokenAmount,_yield$multicall3,_yield$multicall4,info,totalAllocPoint,dballPerBlock,allocPoint,poolWeight;return _regeneratorRuntime.wrap(function _callee$(_context){while(1){switch(_context.prev=_context.next){case 0:lpAdress=farmConfig.lpAddresses[CHAIN_ID];calls=[// Balance of token in the LP contract\n{address:farmConfig.tokenAddresses[CHAIN_ID],name:'balanceOf',params:[lpAdress]},// Balance of quote token on LP contract\n{address:farmConfig.quoteTokenAdresses[CHAIN_ID],name:'balanceOf',params:[lpAdress]},// Balance of LP tokens in the master chef contract\n{address:farmConfig.isTokenOnly?farmConfig.tokenAddresses[CHAIN_ID]:lpAdress,name:'balanceOf',params:[getMasterChefAddress()]},// Total supply of LP tokens\n{address:lpAdress,name:'totalSupply'},// Token decimals\n{address:farmConfig.tokenAddresses[CHAIN_ID],name:'decimals'},// Quote token decimals\n{address:farmConfig.quoteTokenAdresses[CHAIN_ID],name:'decimals'}];_context.next=4;return multicall(erc20,calls);case 4:_yield$multicall=_context.sent;_yield$multicall2=_slicedToArray(_yield$multicall,6);tokenBalanceLP=_yield$multicall2[0];quoteTokenBlanceLP=_yield$multicall2[1];lpTokenBalanceMC=_yield$multicall2[2];lpTotalSupply=_yield$multicall2[3];tokenDecimals=_yield$multicall2[4];quoteTokenDecimals=_yield$multicall2[5];if(farmConfig.isTokenOnly){tokenAmount=new BigNumber(lpTokenBalanceMC).div(new BigNumber(10).pow(tokenDecimals));if(farmConfig.tokenSymbol===QuoteToken.BUSD&&farmConfig.quoteTokenSymbol===QuoteToken.BUSD){tokenPriceVsQuote=new BigNumber(1);}else{tokenPriceVsQuote=new BigNumber(quoteTokenBlanceLP).div(new BigNumber(tokenBalanceLP));}lpTotalInQuoteToken=tokenAmount.times(tokenPriceVsQuote);}else{// Ratio in % a LP tokens that are in staking, vs the total number in circulation\nlpTokenRatio=new BigNumber(lpTokenBalanceMC).div(new BigNumber(lpTotalSupply));// Total value in staking in quote token value\nlpTotalInQuoteToken=new BigNumber(quoteTokenBlanceLP).div(new BigNumber(10).pow(18)).times(new BigNumber(2)).times(lpTokenRatio);// Amount of token in the LP that are considered staking (i.e amount of token * lp ratio)\ntokenAmount=new BigNumber(tokenBalanceLP).div(new BigNumber(10).pow(tokenDecimals)).times(lpTokenRatio);quoteTokenAmount=new BigNumber(quoteTokenBlanceLP).div(new BigNumber(10).pow(quoteTokenDecimals)).times(lpTokenRatio);if(tokenAmount.comparedTo(0)>0){tokenPriceVsQuote=quoteTokenAmount.div(tokenAmount);}else{tokenPriceVsQuote=new BigNumber(quoteTokenBlanceLP).div(new BigNumber(tokenBalanceLP));}}_context.next=15;return multicall(masterchefABI,[{address:getMasterChefAddress(),name:'poolInfo',params:[farmConfig.pid]},{address:getMasterChefAddress(),name:'totalAllocPoint'},{address:getMasterChefAddress(),name:'dballPerBlock'}]);case 15:_yield$multicall3=_context.sent;_yield$multicall4=_slicedToArray(_yield$multicall3,3);info=_yield$multicall4[0];totalAllocPoint=_yield$multicall4[1];dballPerBlock=_yield$multicall4[2];allocPoint=new BigNumber(info.allocPoint._hex);poolWeight=allocPoint.div(new BigNumber(totalAllocPoint));return _context.abrupt(\"return\",_objectSpread(_objectSpread({},farmConfig),{},{tokenAmount:tokenAmount.toJSON(),// quoteTokenAmount: quoteTokenAmount,\nlpTotalInQuoteToken:lpTotalInQuoteToken.toJSON(),tokenPriceVsQuote:tokenPriceVsQuote.toJSON(),poolWeight:poolWeight.toNumber(),multiplier:\"\".concat(allocPoint.div(100).toString(),\"X\"),depositFeeBP:info.depositFeeBP,unstakingFeeBP:info.unstakingFeeBP,dballPerBlock:new BigNumber(dballPerBlock).toNumber()}));case 23:case\"end\":return _context.stop();}}},_callee);}));return function(_x){return _ref2.apply(this,arguments);};}()));case 2:data=_context2.sent;return _context2.abrupt(\"return\",data);case 4:case\"end\":return _context2.stop();}}},_callee2);}));return function fetchFarms(){return _ref.apply(this,arguments);};}();export default fetchFarms;","map":{"version":3,"sources":["D:/task159/frontend/src/state/farms/fetchFarms.ts"],"names":["BigNumber","erc20","masterchefABI","multicall","getMasterChefAddress","farmsConfig","QuoteToken","CHAIN_ID","process","env","REACT_APP_CHAIN_ID","fetchFarms","Promise","all","map","farmConfig","lpAdress","lpAddresses","calls","address","tokenAddresses","name","params","quoteTokenAdresses","isTokenOnly","tokenBalanceLP","quoteTokenBlanceLP","lpTokenBalanceMC","lpTotalSupply","tokenDecimals","quoteTokenDecimals","tokenAmount","div","pow","tokenSymbol","BUSD","quoteTokenSymbol","tokenPriceVsQuote","lpTotalInQuoteToken","times","lpTokenRatio","quoteTokenAmount","comparedTo","pid","info","totalAllocPoint","dballPerBlock","allocPoint","_hex","poolWeight","toJSON","toNumber","multiplier","toString","depositFeeBP","unstakingFeeBP","data"],"mappings":"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","sourcesContent":["import BigNumber from 'bignumber.js'\nimport erc20 from 'config/abi/erc20.json'\nimport masterchefABI from 'config/abi/masterchef.json'\nimport multicall from 'utils/multicall'\nimport { getMasterChefAddress } from 'utils/addressHelpers'\nimport farmsConfig from 'config/constants/farms'\nimport { QuoteToken } from '../../config/constants/types'\n\nconst CHAIN_ID = process.env.REACT_APP_CHAIN_ID\n\nconst fetchFarms = async () => {\n  const data = await Promise.all(\n    farmsConfig.map(async (farmConfig) => {\n      const lpAdress = farmConfig.lpAddresses[CHAIN_ID]\n      const calls = [\n        // Balance of token in the LP contract\n        {\n          address: farmConfig.tokenAddresses[CHAIN_ID],\n          name: 'balanceOf',\n          params: [lpAdress],\n        },\n        // Balance of quote token on LP contract\n        {\n          address: farmConfig.quoteTokenAdresses[CHAIN_ID],\n          name: 'balanceOf',\n          params: [lpAdress],\n        },\n        // Balance of LP tokens in the master chef contract\n        {\n          address: farmConfig.isTokenOnly ? farmConfig.tokenAddresses[CHAIN_ID] : lpAdress,\n          name: 'balanceOf',\n          params: [getMasterChefAddress()],\n        },\n        // Total supply of LP tokens\n        {\n          address: lpAdress,\n          name: 'totalSupply',\n        },\n        // Token decimals\n        {\n          address: farmConfig.tokenAddresses[CHAIN_ID],\n          name: 'decimals',\n        },\n        // Quote token decimals\n        {\n          address: farmConfig.quoteTokenAdresses[CHAIN_ID],\n          name: 'decimals',\n        },\n      ]\n\n      const [\n        tokenBalanceLP,\n        quoteTokenBlanceLP,\n        lpTokenBalanceMC,\n        lpTotalSupply,\n        tokenDecimals,\n        quoteTokenDecimals\n      ] = await multicall(erc20, calls)\n\n      let tokenAmount;\n      let lpTotalInQuoteToken;\n      let tokenPriceVsQuote;\n      if(farmConfig.isTokenOnly){\n        tokenAmount = new BigNumber(lpTokenBalanceMC).div(new BigNumber(10).pow(tokenDecimals));\n        if(farmConfig.tokenSymbol === QuoteToken.BUSD && farmConfig.quoteTokenSymbol === QuoteToken.BUSD){\n          tokenPriceVsQuote = new BigNumber(1);\n        }else{\n          tokenPriceVsQuote = new BigNumber(quoteTokenBlanceLP).div(new BigNumber(tokenBalanceLP));\n        }\n        lpTotalInQuoteToken = tokenAmount.times(tokenPriceVsQuote);\n      }else{\n        // Ratio in % a LP tokens that are in staking, vs the total number in circulation\n        const lpTokenRatio = new BigNumber(lpTokenBalanceMC).div(new BigNumber(lpTotalSupply))\n\n        // Total value in staking in quote token value\n        lpTotalInQuoteToken = new BigNumber(quoteTokenBlanceLP)\n          .div(new BigNumber(10).pow(18))\n          .times(new BigNumber(2))\n          .times(lpTokenRatio)\n\n        // Amount of token in the LP that are considered staking (i.e amount of token * lp ratio)\n        tokenAmount = new BigNumber(tokenBalanceLP).div(new BigNumber(10).pow(tokenDecimals)).times(lpTokenRatio)\n        const quoteTokenAmount = new BigNumber(quoteTokenBlanceLP)\n          .div(new BigNumber(10).pow(quoteTokenDecimals))\n          .times(lpTokenRatio)\n\n        if(tokenAmount.comparedTo(0) > 0){\n          tokenPriceVsQuote = quoteTokenAmount.div(tokenAmount);\n        }else{\n          tokenPriceVsQuote = new BigNumber(quoteTokenBlanceLP).div(new BigNumber(tokenBalanceLP));\n        }\n      }\n\n      const [info, totalAllocPoint, dballPerBlock] = await multicall(masterchefABI, [\n        {\n          address: getMasterChefAddress(),\n          name: 'poolInfo',\n          params: [farmConfig.pid],\n        },\n        {\n          address: getMasterChefAddress(),\n          name: 'totalAllocPoint',\n        },\n        {\n          address: getMasterChefAddress(),\n          name: 'dballPerBlock',\n        },\n      ])\n\n      const allocPoint = new BigNumber(info.allocPoint._hex)\n      const poolWeight = allocPoint.div(new BigNumber(totalAllocPoint))\n\n      return {\n        ...farmConfig,\n        tokenAmount: tokenAmount.toJSON(),\n        // quoteTokenAmount: quoteTokenAmount,\n        lpTotalInQuoteToken: lpTotalInQuoteToken.toJSON(),\n        tokenPriceVsQuote: tokenPriceVsQuote.toJSON(),\n        poolWeight: poolWeight.toNumber(),\n        multiplier: `${allocPoint.div(100).toString()}X`,\n        depositFeeBP: info.depositFeeBP,\n        unstakingFeeBP: info.unstakingFeeBP,\n        dballPerBlock: new BigNumber(dballPerBlock).toNumber(),\n      }\n    }),\n  )\n  return data\n}\n\nexport default fetchFarms\n"]},"metadata":{},"sourceType":"module"}