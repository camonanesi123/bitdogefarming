{"ast":null,"code":"import _regeneratorRuntime from\"D:/task159/frontend/node_modules/babel-preset-react-app/node_modules/@babel/runtime/regenerator\";import _asyncToGenerator from\"D:/task159/frontend/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/asyncToGenerator\";import _objectSpread from\"D:/task159/frontend/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/objectSpread2\";import _toConsumableArray from\"D:/task159/frontend/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/toConsumableArray\";/* eslint-disable no-param-reassign */import{createSlice}from'@reduxjs/toolkit';import farms3Config from'config/constants/farms3';import fetchFarms3 from'./fetchFarms3';import{fetchFarm3UserEarnings,fetchFarm3UserAllowances,fetchFarm3UserTokenBalances,fetchFarm3UserStakedBalances}from'./fetchFarmUser3';var initialState={data:_toConsumableArray(farms3Config)};export var farms3Slice=createSlice({name:'Farms',initialState:initialState,reducers:{setFarms3PublicData:function setFarms3PublicData(state,action){var liveFarmsData=action.payload;state.data=state.data.map(function(farm){var liveFarmData=liveFarmsData.find(function(f){return f.pid===farm.pid;});return _objectSpread(_objectSpread({},farm),liveFarmData);});},setFarm3UserData:function setFarm3UserData(state,action){var arrayOfUserDataObjects=action.payload.arrayOfUserDataObjects;arrayOfUserDataObjects.forEach(function(userDataEl){var index=userDataEl.index;state.data[index]=_objectSpread(_objectSpread({},state.data[index]),{},{userData:userDataEl});});}}});// Actions\nvar _farms3Slice$actions=farms3Slice.actions,setFarms3PublicData=_farms3Slice$actions.setFarms3PublicData,setFarm3UserData=_farms3Slice$actions.setFarm3UserData;// Thunks\nexport{setFarms3PublicData,setFarm3UserData};export var fetchFarms3PublicDataAsync=function fetchFarms3PublicDataAsync(){return/*#__PURE__*/function(){var _ref=_asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee(dispatch){var farms3;return _regeneratorRuntime.wrap(function _callee$(_context){while(1){switch(_context.prev=_context.next){case 0:_context.next=2;return fetchFarms3();case 2:farms3=_context.sent;dispatch(setFarms3PublicData(farms3));case 4:case\"end\":return _context.stop();}}},_callee);}));return function(_x){return _ref.apply(this,arguments);};}();};export var fetchFarm3UserDataAsync=function fetchFarm3UserDataAsync(account){return/*#__PURE__*/function(){var _ref2=_asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee2(dispatch){var userFarm3Allowances,userFarm3TokenBalances,userStakedBalances3,userFarm3Earnings,arrayOfUserDataObjects;return _regeneratorRuntime.wrap(function _callee2$(_context2){while(1){switch(_context2.prev=_context2.next){case 0:_context2.next=2;return fetchFarm3UserAllowances(account);case 2:userFarm3Allowances=_context2.sent;_context2.next=5;return fetchFarm3UserTokenBalances(account);case 5:userFarm3TokenBalances=_context2.sent;_context2.next=8;return fetchFarm3UserStakedBalances(account);case 8:userStakedBalances3=_context2.sent;_context2.next=11;return fetchFarm3UserEarnings(account);case 11:userFarm3Earnings=_context2.sent;arrayOfUserDataObjects=userFarm3Allowances.map(function(farm3Allowance,index){return{index:index,allowance:userFarm3Allowances[index],tokenBalance:userFarm3TokenBalances[index],stakedBalance:userStakedBalances3[index],earnings:userFarm3Earnings[index]};});dispatch(setFarm3UserData({arrayOfUserDataObjects:arrayOfUserDataObjects}));case 14:case\"end\":return _context2.stop();}}},_callee2);}));return function(_x2){return _ref2.apply(this,arguments);};}();};export default farms3Slice.reducer;","map":{"version":3,"sources":["D:/task159/frontend/src/state/farms3/index.ts"],"names":["createSlice","farms3Config","fetchFarms3","fetchFarm3UserEarnings","fetchFarm3UserAllowances","fetchFarm3UserTokenBalances","fetchFarm3UserStakedBalances","initialState","data","farms3Slice","name","reducers","setFarms3PublicData","state","action","liveFarmsData","payload","map","farm","liveFarmData","find","f","pid","setFarm3UserData","arrayOfUserDataObjects","forEach","userDataEl","index","userData","actions","fetchFarms3PublicDataAsync","dispatch","farms3","fetchFarm3UserDataAsync","account","userFarm3Allowances","userFarm3TokenBalances","userStakedBalances3","userFarm3Earnings","farm3Allowance","allowance","tokenBalance","stakedBalance","earnings","reducer"],"mappings":"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","sourcesContent":["/* eslint-disable no-param-reassign */\nimport { createSlice } from '@reduxjs/toolkit'\nimport farms3Config from 'config/constants/farms3'\nimport fetchFarms3 from './fetchFarms3'\nimport {\n  fetchFarm3UserEarnings,\n  fetchFarm3UserAllowances,\n  fetchFarm3UserTokenBalances,\n  fetchFarm3UserStakedBalances,\n} from './fetchFarmUser3'\nimport { Farms3State, Farm3 } from '../types'\n\nconst initialState: Farms3State = { data: [...farms3Config] }\n\nexport const farms3Slice = createSlice({\n  name: 'Farms',\n  initialState,\n  reducers: {\n    setFarms3PublicData: (state, action) => {\n      const liveFarmsData: Farm3[] = action.payload\n      state.data = state.data.map((farm) => {\n        const liveFarmData = liveFarmsData.find((f) => f.pid === farm.pid)\n        return { ...farm, ...liveFarmData }\n      })\n    },\n    setFarm3UserData: (state, action) => {\n      const { arrayOfUserDataObjects } = action.payload\n      arrayOfUserDataObjects.forEach((userDataEl) => {\n        const { index } = userDataEl\n        state.data[index] = { ...state.data[index], userData: userDataEl }\n      })\n    },\n  },\n})\n\n// Actions\nexport const { setFarms3PublicData, setFarm3UserData } = farms3Slice.actions\n\n// Thunks\nexport const fetchFarms3PublicDataAsync = () => async (dispatch) => {\n  const farms3 = await fetchFarms3()\n  dispatch(setFarms3PublicData(farms3))\n}\nexport const fetchFarm3UserDataAsync = (account) => async (dispatch) => {\n  const userFarm3Allowances = await fetchFarm3UserAllowances(account)\n  const userFarm3TokenBalances = await fetchFarm3UserTokenBalances(account)\n  const userStakedBalances3 = await fetchFarm3UserStakedBalances(account)\n  const userFarm3Earnings = await fetchFarm3UserEarnings(account)\n\n  const arrayOfUserDataObjects = userFarm3Allowances.map((farm3Allowance, index) => {\n    return {\n      index,\n      allowance: userFarm3Allowances[index],\n      tokenBalance: userFarm3TokenBalances[index],\n      stakedBalance: userStakedBalances3[index],\n      earnings: userFarm3Earnings[index],\n    }\n  })\n\n  dispatch(setFarm3UserData({ arrayOfUserDataObjects }))\n}\n\nexport default farms3Slice.reducer\n"]},"metadata":{},"sourceType":"module"}