{"ast":null,"code":"var _s = $RefreshSig$();\n\nimport BigNumber from 'bignumber.js';\nimport { BSC_BLOCK_TIME } from 'config';\nimport { useBlock, useLpTokenPrice } from 'state/hooks';\nimport { useIfoV2Contract } from 'hooks/useContract';\nimport useRefresh from 'hooks/useRefresh';\nimport { useEffect, useState } from 'react';\nimport makeBatchRequest from 'utils/makeBatchRequest';\nimport Web3 from 'web3';\nimport { getStatus } from '../helpers'; // https://github.com/pancakeswap/pancake-contracts/blob/master/projects/ifo/contracts/IFOV2.sol#L431\n// 1,000,000,000 / 100\n\nconst TAX_PRECISION = 10000000000;\n\nconst formatPool = pool => ({\n  raisingAmountPool: new BigNumber(pool[0]),\n  offeringAmountPool: new BigNumber(pool[1]),\n  limitPerUserInLP: new BigNumber(pool[2]),\n  hasTax: pool[3],\n  totalAmountPool: new BigNumber(pool[4]),\n  sumTaxesOverflow: new BigNumber(pool[5])\n});\n/**\n * Gets all public data of an IFO\n */\n\n\nconst useGetPublicIfoData = ifo => {\n  _s();\n\n  const {\n    address,\n    releaseBlockNumber\n  } = ifo;\n  const lpTokenPriceInUsd = useLpTokenPrice(ifo.currency.symbol);\n  const {\n    fastRefresh\n  } = useRefresh();\n  const [state, setState] = useState({\n    status: 'idle',\n    blocksRemaining: 0,\n    secondsUntilStart: 0,\n    progress: 5,\n    secondsUntilEnd: 0,\n    poolBasic: {\n      raisingAmountPool: new BigNumber(0),\n      offeringAmountPool: new BigNumber(0),\n      limitPerUserInLP: new BigNumber(0),\n      taxRate: 0,\n      totalAmountPool: new BigNumber(0),\n      sumTaxesOverflow: new BigNumber(0)\n    },\n    poolUnlimited: {\n      raisingAmountPool: new BigNumber(0),\n      offeringAmountPool: new BigNumber(0),\n      limitPerUserInLP: new BigNumber(0),\n      taxRate: 0,\n      totalAmountPool: new BigNumber(0),\n      sumTaxesOverflow: new BigNumber(0)\n    },\n    startBlockNum: 0,\n    endBlockNum: 0,\n    numberPoints: 0\n  });\n  const {\n    currentBlock\n  } = useBlock();\n  const contract = useIfoV2Contract(address);\n  const [currentBlock1, setCurrentBlock1] = useState(69999);\n  useEffect(() => {\n    const fetchProgress = async () => {\n      const [startBlock, endBlock, poolBasic, poolUnlimited, taxRate, numberPoints] = await makeBatchRequest([contract.methods.startBlock().call, contract.methods.endBlock().call, contract.methods.viewPoolInformation(0).call, contract.methods.viewPoolInformation(1).call, contract.methods.viewPoolTaxRateOverflow(1).call, contract.methods.numberPoints().call]);\n      const poolBasicFormatted = formatPool(poolBasic);\n      const poolUnlimitedFormatted = formatPool(poolUnlimited);\n      const web3 = new Web3('https://bsc-dataseed.binance.org');\n      await web3.eth.getBlockNumber().then(function (result) {\n        setCurrentBlock1(result);\n        const startBlockNum = parseInt(startBlock, 10);\n        const endBlockNum = parseInt(endBlock, 10);\n        console.log(currentBlock1);\n        const status = getStatus(currentBlock1, startBlockNum, endBlockNum);\n        const totalBlocks = endBlockNum - startBlockNum;\n        const blocksRemaining = endBlockNum - currentBlock1; // Calculate the total progress until finished or until start\n\n        const progress = currentBlock1 > startBlockNum ? (currentBlock1 - startBlockNum) / totalBlocks * 100 : (currentBlock1 - releaseBlockNumber) / (startBlockNum - releaseBlockNumber) * 100;\n        setState(prev => ({ ...prev,\n          secondsUntilEnd: blocksRemaining * BSC_BLOCK_TIME,\n          secondsUntilStart: (startBlockNum - currentBlock1) * BSC_BLOCK_TIME,\n          poolBasic: { ...poolBasicFormatted,\n            taxRate: 0\n          },\n          poolUnlimited: { ...poolUnlimitedFormatted,\n            taxRate: taxRate / TAX_PRECISION\n          },\n          status,\n          progress,\n          blocksRemaining,\n          startBlockNum,\n          endBlockNum,\n          numberPoints\n        }));\n      });\n    };\n\n    fetchProgress();\n  }, [contract, currentBlock1, releaseBlockNumber, fastRefresh]);\n  return { ...state,\n    currencyPriceInUSD: lpTokenPriceInUsd\n  };\n};\n\n_s(useGetPublicIfoData, \"wA98S8B9dyW3kb5hXSgtw8uyQb0=\", false, function () {\n  return [useLpTokenPrice, useRefresh, useBlock, useIfoV2Contract];\n});\n\nexport default useGetPublicIfoData;","map":{"version":3,"sources":["D:/task159/frontend/src/hooks/ifo/v2/useGetPublicIfoData.ts"],"names":["BigNumber","BSC_BLOCK_TIME","useBlock","useLpTokenPrice","useIfoV2Contract","useRefresh","useEffect","useState","makeBatchRequest","Web3","getStatus","TAX_PRECISION","formatPool","pool","raisingAmountPool","offeringAmountPool","limitPerUserInLP","hasTax","totalAmountPool","sumTaxesOverflow","useGetPublicIfoData","ifo","address","releaseBlockNumber","lpTokenPriceInUsd","currency","symbol","fastRefresh","state","setState","status","blocksRemaining","secondsUntilStart","progress","secondsUntilEnd","poolBasic","taxRate","poolUnlimited","startBlockNum","endBlockNum","numberPoints","currentBlock","contract","currentBlock1","setCurrentBlock1","fetchProgress","startBlock","endBlock","methods","call","viewPoolInformation","viewPoolTaxRateOverflow","poolBasicFormatted","poolUnlimitedFormatted","web3","eth","getBlockNumber","then","result","parseInt","console","log","totalBlocks","prev","currencyPriceInUSD"],"mappings":"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","sourcesContent":["import BigNumber from 'bignumber.js'\nimport { BSC_BLOCK_TIME } from 'config'\nimport { Ifo, IfoStatus } from 'config/constants/types'\nimport { useBlock, useLpTokenPrice } from 'state/hooks'\nimport { useIfoV2Contract } from 'hooks/useContract'\nimport useRefresh from 'hooks/useRefresh'\nimport { useEffect, useState } from 'react'\nimport makeBatchRequest from 'utils/makeBatchRequest'\nimport Web3 from 'web3'\nimport { PublicIfoData, PoolCharacteristics } from '../types'\nimport { getStatus } from '../helpers'\n\n\n// https://github.com/pancakeswap/pancake-contracts/blob/master/projects/ifo/contracts/IFOV2.sol#L431\n// 1,000,000,000 / 100\nconst TAX_PRECISION = 10000000000\n\nconst formatPool = (pool) => ({\n  raisingAmountPool: new BigNumber(pool[0]),\n  offeringAmountPool: new BigNumber(pool[1]),\n  limitPerUserInLP: new BigNumber(pool[2]),\n  hasTax: pool[3],\n  totalAmountPool: new BigNumber(pool[4]),\n  sumTaxesOverflow: new BigNumber(pool[5]),\n})\n\n/**\n * Gets all public data of an IFO\n */\nconst useGetPublicIfoData = (ifo: Ifo): PublicIfoData => {\n  const { address, releaseBlockNumber } = ifo\n  const lpTokenPriceInUsd = useLpTokenPrice(ifo.currency.symbol)\n  const { fastRefresh } = useRefresh()\n\n  const [state, setState] = useState({\n    status: 'idle' as IfoStatus,\n    blocksRemaining: 0,\n    secondsUntilStart: 0,\n    progress: 5,\n    secondsUntilEnd: 0,\n    poolBasic: {\n      raisingAmountPool: new BigNumber(0),\n      offeringAmountPool: new BigNumber(0),\n      limitPerUserInLP: new BigNumber(0),\n      taxRate: 0,\n      totalAmountPool: new BigNumber(0),\n      sumTaxesOverflow: new BigNumber(0),\n    },\n    poolUnlimited: {\n      raisingAmountPool: new BigNumber(0),\n      offeringAmountPool: new BigNumber(0),\n      limitPerUserInLP: new BigNumber(0),\n      taxRate: 0,\n      totalAmountPool: new BigNumber(0),\n      sumTaxesOverflow: new BigNumber(0),\n    },\n    startBlockNum: 0,\n    endBlockNum: 0,\n    numberPoints: 0,\n  })\n  const { currentBlock } = useBlock()\n  \n  const contract = useIfoV2Contract(address)\n  const [ currentBlock1, setCurrentBlock1 ] = useState<number>(69999);\n\n  useEffect(() => {\n    const fetchProgress = async () => {\n      const [startBlock, endBlock, poolBasic, poolUnlimited, taxRate, numberPoints] = (await makeBatchRequest([\n        contract.methods.startBlock().call,\n        contract.methods.endBlock().call,\n        contract.methods.viewPoolInformation(0).call,\n        contract.methods.viewPoolInformation(1).call,\n        contract.methods.viewPoolTaxRateOverflow(1).call,\n        contract.methods.numberPoints().call,\n      ])) as [string, string, PoolCharacteristics, PoolCharacteristics, number, number]\n\n      const poolBasicFormatted = formatPool(poolBasic)\n      const poolUnlimitedFormatted = formatPool(poolUnlimited)\n\n      const web3 = new Web3('https://bsc-dataseed.binance.org')\n      await web3.eth.getBlockNumber().then(function (result){\n        setCurrentBlock1(result)\n        const startBlockNum = parseInt(startBlock, 10)\n        const endBlockNum = parseInt(endBlock, 10)\n        console.log(currentBlock1)\n        const status = getStatus(currentBlock1, startBlockNum, endBlockNum)\n        const totalBlocks = endBlockNum - startBlockNum\n        const blocksRemaining = endBlockNum - currentBlock1\n\n        // Calculate the total progress until finished or until start\n        const progress =\n        currentBlock1 > startBlockNum\n            ? ((currentBlock1 - startBlockNum) / totalBlocks) * 100\n            : ((currentBlock1 - releaseBlockNumber) / (startBlockNum - releaseBlockNumber)) * 100\n\n        setState((prev) => ({\n          ...prev,\n          secondsUntilEnd: blocksRemaining * BSC_BLOCK_TIME,\n          secondsUntilStart: (startBlockNum - currentBlock1) * BSC_BLOCK_TIME,\n          poolBasic: { ...poolBasicFormatted, taxRate: 0 },\n          poolUnlimited: { ...poolUnlimitedFormatted, taxRate: taxRate / TAX_PRECISION },\n          status,\n          progress,\n          blocksRemaining,\n          startBlockNum,\n          endBlockNum,\n          numberPoints,\n        }))\n      })\n      \n    }\n\n    fetchProgress()\n  }, [contract, currentBlock1, releaseBlockNumber, fastRefresh])\n\n  return { ...state, currencyPriceInUSD: lpTokenPriceInUsd }\n}\n\nexport default useGetPublicIfoData\n"]},"metadata":{},"sourceType":"module"}