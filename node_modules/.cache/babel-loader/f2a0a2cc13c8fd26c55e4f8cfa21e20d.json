{"ast":null,"code":"import _regeneratorRuntime from\"D:/task159/frontend/node_modules/babel-preset-react-app/node_modules/@babel/runtime/regenerator\";import _asyncToGenerator from\"D:/task159/frontend/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/asyncToGenerator\";import _defineProperty from\"D:/task159/frontend/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/defineProperty\";import _objectSpread from\"D:/task159/frontend/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/objectSpread2\";import _slicedToArray from\"D:/task159/frontend/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/slicedToArray\";import{useEffect,useState}from'react';import BigNumber from'bignumber.js';import{PoolIds}from'config/constants/types';import{useERC20,useIfoV2Contract}from'hooks/useContract';import{useIfoAllowance}from'hooks/useAllowance';import useRefresh from'hooks/useRefresh';import makeBatchRequest from'utils/makeBatchRequest';import{getAddress}from'utils/addressHelpers';import{useWallet}from'@binance-chain/bsc-use-wallet';/**\n * Gets all data from an IFO related to a wallet\n */var useGetWalletIfoData=function useGetWalletIfoData(ifo){var _useRefresh=useRefresh(),fastRefresh=_useRefresh.fastRefresh;var _useState=useState({poolBasic:{amountTokenCommittedInLP:new BigNumber(0),offeringAmountInToken:new BigNumber(0),refundingAmountInLP:new BigNumber(0),taxAmountInLP:new BigNumber(0),hasClaimed:false,isPendingTx:false},poolUnlimited:{amountTokenCommittedInLP:new BigNumber(0),offeringAmountInToken:new BigNumber(0),refundingAmountInLP:new BigNumber(0),taxAmountInLP:new BigNumber(0),hasClaimed:false,isPendingTx:false}}),_useState2=_slicedToArray(_useState,2),state=_useState2[0],setState=_useState2[1];var address=ifo.address,currency=ifo.currency;// const { account } = useWeb3React()\nvar _useWallet=useWallet(),account=_useWallet.account;var contract=useIfoV2Contract(address);var currencyContract=useERC20(getAddress(currency.address));var allowance=useIfoAllowance(currencyContract,address);var setPendingTx=function setPendingTx(status,poolId){return setState(function(prevState){return _objectSpread(_objectSpread({},prevState),{},_defineProperty({},poolId,_objectSpread(_objectSpread({},prevState[poolId]),{},{isPendingTx:status})));});};var addUserContributedAmount=/*#__PURE__*/function(){var _ref=_asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee(amount,poolId){var _yield$contract$metho,_yield$contract$metho2,_yield$contract$metho3,offeringAmountInToken;return _regeneratorRuntime.wrap(function _callee$(_context){while(1){switch(_context.prev=_context.next){case 0:_context.next=2;return contract.methods.viewUserOfferingAndRefundingAmountsForPools(account,[poolId===PoolIds.poolBasic?0:1]).call();case 2:_yield$contract$metho=_context.sent;_yield$contract$metho2=_slicedToArray(_yield$contract$metho,1);_yield$contract$metho3=_slicedToArray(_yield$contract$metho2[0],1);offeringAmountInToken=_yield$contract$metho3[0];setState(function(prevState){return _objectSpread(_objectSpread({},prevState),{},_defineProperty({},poolId,_objectSpread(_objectSpread({},prevState[poolId]),{},{amountTokenCommittedInLP:prevState[poolId].amountTokenCommittedInLP.plus(amount),offeringAmountInToken:offeringAmountInToken})));});case 7:case\"end\":return _context.stop();}}},_callee);}));return function addUserContributedAmount(_x,_x2){return _ref.apply(this,arguments);};}();var setIsClaimed=function setIsClaimed(poolId){setState(function(prevState){return _objectSpread(_objectSpread({},prevState),{},_defineProperty({},poolId,_objectSpread(_objectSpread({},prevState[poolId]),{},{hasClaimed:true})));});};useEffect(function(){var fetchIfoData=/*#__PURE__*/function(){var _ref2=_asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee2(){var _yield$makeBatchReque,_yield$makeBatchReque2,userInfo,amounts;return _regeneratorRuntime.wrap(function _callee2$(_context2){while(1){switch(_context2.prev=_context2.next){case 0:_context2.next=2;return makeBatchRequest([contract.methods.viewUserInfo(account,[0,1]).call,contract.methods.viewUserOfferingAndRefundingAmountsForPools(account,[0,1]).call]);case 2:_yield$makeBatchReque=_context2.sent;_yield$makeBatchReque2=_slicedToArray(_yield$makeBatchReque,2);userInfo=_yield$makeBatchReque2[0];amounts=_yield$makeBatchReque2[1];setState(function(prevState){return _objectSpread(_objectSpread({},prevState),{},{poolBasic:_objectSpread(_objectSpread({},prevState.poolBasic),{},{amountTokenCommittedInLP:new BigNumber(userInfo[0][0]),offeringAmountInToken:new BigNumber(amounts[0][0]),refundingAmountInLP:new BigNumber(amounts[0][1]),taxAmountInLP:new BigNumber(amounts[0][2]),hasClaimed:userInfo[1][0]}),poolUnlimited:_objectSpread(_objectSpread({},prevState.poolUnlimited),{},{amountTokenCommittedInLP:new BigNumber(userInfo[0][1]),offeringAmountInToken:new BigNumber(amounts[1][0]),refundingAmountInLP:new BigNumber(amounts[1][1]),taxAmountInLP:new BigNumber(amounts[1][2]),hasClaimed:userInfo[1][1]})});});case 7:case\"end\":return _context2.stop();}}},_callee2);}));return function fetchIfoData(){return _ref2.apply(this,arguments);};}();if(account){fetchIfoData();}},[account,contract,fastRefresh]);return _objectSpread(_objectSpread({},state),{},{allowance:allowance,contract:contract,setPendingTx:setPendingTx,addUserContributedAmount:addUserContributedAmount,setIsClaimed:setIsClaimed});};export default useGetWalletIfoData;","map":{"version":3,"sources":["D:/task159/frontend/src/hooks/ifo/v2/useGetWalletIfoData.ts"],"names":["useEffect","useState","BigNumber","PoolIds","useERC20","useIfoV2Contract","useIfoAllowance","useRefresh","makeBatchRequest","getAddress","useWallet","useGetWalletIfoData","ifo","fastRefresh","poolBasic","amountTokenCommittedInLP","offeringAmountInToken","refundingAmountInLP","taxAmountInLP","hasClaimed","isPendingTx","poolUnlimited","state","setState","address","currency","account","contract","currencyContract","allowance","setPendingTx","status","poolId","prevState","addUserContributedAmount","amount","methods","viewUserOfferingAndRefundingAmountsForPools","call","plus","setIsClaimed","fetchIfoData","viewUserInfo","userInfo","amounts"],"mappings":"grBAAA,OAASA,SAAT,CAAoBC,QAApB,KAAoC,OAApC,CAEA,MAAOC,CAAAA,SAAP,KAAsB,cAAtB,CACA,OAAcC,OAAd,KAA6B,wBAA7B,CACA,OAASC,QAAT,CAAmBC,gBAAnB,KAA2C,mBAA3C,CACA,OAASC,eAAT,KAAgC,oBAAhC,CACA,MAAOC,CAAAA,UAAP,KAAuB,kBAAvB,CACA,MAAOC,CAAAA,gBAAP,KAA6B,wBAA7B,CACA,OAASC,UAAT,KAA2B,sBAA3B,CACA,OAASC,SAAT,KAA0B,+BAA1B,CAIA;AACA;AACA,GACA,GAAMC,CAAAA,mBAAmB,CAAG,QAAtBA,CAAAA,mBAAsB,CAACC,GAAD,CAA6B,iBAC/BL,UAAU,EADqB,CAC/CM,WAD+C,aAC/CA,WAD+C,eAE7BZ,QAAQ,CAAiB,CACjDa,SAAS,CAAE,CACTC,wBAAwB,CAAE,GAAIb,CAAAA,SAAJ,CAAc,CAAd,CADjB,CAETc,qBAAqB,CAAE,GAAId,CAAAA,SAAJ,CAAc,CAAd,CAFd,CAGTe,mBAAmB,CAAE,GAAIf,CAAAA,SAAJ,CAAc,CAAd,CAHZ,CAITgB,aAAa,CAAE,GAAIhB,CAAAA,SAAJ,CAAc,CAAd,CAJN,CAKTiB,UAAU,CAAE,KALH,CAMTC,WAAW,CAAE,KANJ,CADsC,CASjDC,aAAa,CAAE,CACbN,wBAAwB,CAAE,GAAIb,CAAAA,SAAJ,CAAc,CAAd,CADb,CAEbc,qBAAqB,CAAE,GAAId,CAAAA,SAAJ,CAAc,CAAd,CAFV,CAGbe,mBAAmB,CAAE,GAAIf,CAAAA,SAAJ,CAAc,CAAd,CAHR,CAIbgB,aAAa,CAAE,GAAIhB,CAAAA,SAAJ,CAAc,CAAd,CAJF,CAKbiB,UAAU,CAAE,KALC,CAMbC,WAAW,CAAE,KANA,CATkC,CAAjB,CAFqB,wCAEhDE,KAFgD,eAEzCC,QAFyC,kBAqB/CC,CAAAA,OArB+C,CAqBzBZ,GArByB,CAqB/CY,OArB+C,CAqBtCC,QArBsC,CAqBzBb,GArByB,CAqBtCa,QArBsC,CAuBvD;AAvBuD,eAwBnCf,SAAS,EAxB0B,CAwB/CgB,OAxB+C,YAwB/CA,OAxB+C,CAyBvD,GAAMC,CAAAA,QAAQ,CAAGtB,gBAAgB,CAACmB,OAAD,CAAjC,CACA,GAAMI,CAAAA,gBAAgB,CAAGxB,QAAQ,CAACK,UAAU,CAACgB,QAAQ,CAACD,OAAV,CAAX,CAAjC,CACA,GAAMK,CAAAA,SAAS,CAAGvB,eAAe,CAACsB,gBAAD,CAAmBJ,OAAnB,CAAjC,CAEA,GAAMM,CAAAA,YAAY,CAAG,QAAfA,CAAAA,YAAe,CAACC,MAAD,CAAkBC,MAAlB,QACnBT,CAAAA,QAAQ,CAAC,SAACU,SAAD,wCACJA,SADI,wBAEND,MAFM,gCAGFC,SAAS,CAACD,MAAD,CAHP,MAILZ,WAAW,CAAEW,MAJR,MAAD,CADW,EAArB,CASA,GAAMG,CAAAA,wBAAwB,0FAAG,iBAAOC,MAAP,CAA0BH,MAA1B,sOACSL,CAAAA,QAAQ,CAACS,OAAT,CACrCC,2CADqC,CACOX,OADP,CACgB,CAACM,MAAM,GAAK7B,OAAO,CAACW,SAAnB,CAA+B,CAA/B,CAAmC,CAApC,CADhB,EAErCwB,IAFqC,EADT,8KACvBtB,qBADuB,2BAI/BO,QAAQ,CAAC,SAACU,SAAD,wCACJA,SADI,wBAEND,MAFM,gCAGFC,SAAS,CAACD,MAAD,CAHP,MAILjB,wBAAwB,CAAEkB,SAAS,CAACD,MAAD,CAAT,CAAkBjB,wBAAlB,CAA2CwB,IAA3C,CAAgDJ,MAAhD,CAJrB,CAKLnB,qBAAqB,CAArBA,qBALK,MAAD,CAAR,CAJ+B,sDAAH,kBAAxBkB,CAAAA,wBAAwB,gDAA9B,CAcA,GAAMM,CAAAA,YAAY,CAAG,QAAfA,CAAAA,YAAe,CAACR,MAAD,CAAqB,CACxCT,QAAQ,CAAC,SAACU,SAAD,wCACJA,SADI,wBAEND,MAFM,gCAGFC,SAAS,CAACD,MAAD,CAHP,MAILb,UAAU,CAAE,IAJP,MAAD,CAAR,CAOD,CARD,CAUAnB,SAAS,CAAC,UAAM,CACd,GAAMyC,CAAAA,YAAY,2FAAG,iOACejC,CAAAA,gBAAgB,CAAC,CACjDmB,QAAQ,CAACS,OAAT,CAAiBM,YAAjB,CAA8BhB,OAA9B,CAAuC,CAAC,CAAD,CAAI,CAAJ,CAAvC,EAA+CY,IADE,CAEjDX,QAAQ,CAACS,OAAT,CAAiBC,2CAAjB,CAA6DX,OAA7D,CAAsE,CAAC,CAAD,CAAI,CAAJ,CAAtE,EAA8EY,IAF7B,CAAD,CAD/B,4GACZK,QADY,2BACFC,OADE,2BAMnBrB,QAAQ,CAAC,SAACU,SAAD,wCACJA,SADI,MAEPnB,SAAS,gCACJmB,SAAS,CAACnB,SADN,MAEPC,wBAAwB,CAAE,GAAIb,CAAAA,SAAJ,CAAcyC,QAAQ,CAAC,CAAD,CAAR,CAAY,CAAZ,CAAd,CAFnB,CAGP3B,qBAAqB,CAAE,GAAId,CAAAA,SAAJ,CAAc0C,OAAO,CAAC,CAAD,CAAP,CAAW,CAAX,CAAd,CAHhB,CAIP3B,mBAAmB,CAAE,GAAIf,CAAAA,SAAJ,CAAc0C,OAAO,CAAC,CAAD,CAAP,CAAW,CAAX,CAAd,CAJd,CAKP1B,aAAa,CAAE,GAAIhB,CAAAA,SAAJ,CAAc0C,OAAO,CAAC,CAAD,CAAP,CAAW,CAAX,CAAd,CALR,CAMPzB,UAAU,CAAEwB,QAAQ,CAAC,CAAD,CAAR,CAAY,CAAZ,CANL,EAFF,CAUPtB,aAAa,gCACRY,SAAS,CAACZ,aADF,MAEXN,wBAAwB,CAAE,GAAIb,CAAAA,SAAJ,CAAcyC,QAAQ,CAAC,CAAD,CAAR,CAAY,CAAZ,CAAd,CAFf,CAGX3B,qBAAqB,CAAE,GAAId,CAAAA,SAAJ,CAAc0C,OAAO,CAAC,CAAD,CAAP,CAAW,CAAX,CAAd,CAHZ,CAIX3B,mBAAmB,CAAE,GAAIf,CAAAA,SAAJ,CAAc0C,OAAO,CAAC,CAAD,CAAP,CAAW,CAAX,CAAd,CAJV,CAKX1B,aAAa,CAAE,GAAIhB,CAAAA,SAAJ,CAAc0C,OAAO,CAAC,CAAD,CAAP,CAAW,CAAX,CAAd,CALJ,CAMXzB,UAAU,CAAEwB,QAAQ,CAAC,CAAD,CAAR,CAAY,CAAZ,CAND,EAVN,IAAD,CAAR,CANmB,wDAAH,kBAAZF,CAAAA,YAAY,2CAAlB,CA2BA,GAAIf,OAAJ,CAAa,CACXe,YAAY,GACb,CACF,CA/BQ,CA+BN,CAACf,OAAD,CAAUC,QAAV,CAAoBd,WAApB,CA/BM,CAAT,CAiCA,sCAAYS,KAAZ,MAAmBO,SAAS,CAATA,SAAnB,CAA8BF,QAAQ,CAARA,QAA9B,CAAwCG,YAAY,CAAZA,YAAxC,CAAsDI,wBAAwB,CAAxBA,wBAAtD,CAAgFM,YAAY,CAAZA,YAAhF,GACD,CAhGD,CAkGA,cAAe7B,CAAAA,mBAAf","sourcesContent":["import { useEffect, useState } from 'react'\nimport { useWeb3React } from '@web3-react/core'\nimport BigNumber from 'bignumber.js'\nimport { Ifo, PoolIds } from 'config/constants/types'\nimport { useERC20, useIfoV2Contract } from 'hooks/useContract'\nimport { useIfoAllowance } from 'hooks/useAllowance'\nimport useRefresh from 'hooks/useRefresh'\nimport makeBatchRequest from 'utils/makeBatchRequest'\nimport { getAddress } from 'utils/addressHelpers'\nimport { useWallet } from '@binance-chain/bsc-use-wallet'\nimport { WalletIfoState, WalletIfoData } from '../types'\n\n\n/**\n * Gets all data from an IFO related to a wallet\n */\nconst useGetWalletIfoData = (ifo: Ifo): WalletIfoData => {\n  const { fastRefresh } = useRefresh()\n  const [state, setState] = useState<WalletIfoState>({\n    poolBasic: {\n      amountTokenCommittedInLP: new BigNumber(0),\n      offeringAmountInToken: new BigNumber(0),\n      refundingAmountInLP: new BigNumber(0),\n      taxAmountInLP: new BigNumber(0),\n      hasClaimed: false,\n      isPendingTx: false,\n    },\n    poolUnlimited: {\n      amountTokenCommittedInLP: new BigNumber(0),\n      offeringAmountInToken: new BigNumber(0),\n      refundingAmountInLP: new BigNumber(0),\n      taxAmountInLP: new BigNumber(0),\n      hasClaimed: false,\n      isPendingTx: false,\n    },\n  })\n\n  const { address, currency } = ifo\n\n  // const { account } = useWeb3React()\n  const { account } = useWallet()\n  const contract = useIfoV2Contract(address)\n  const currencyContract = useERC20(getAddress(currency.address))\n  const allowance = useIfoAllowance(currencyContract, address)\n\n  const setPendingTx = (status: boolean, poolId: PoolIds) =>\n    setState((prevState) => ({\n      ...prevState,\n      [poolId]: {\n        ...prevState[poolId],\n        isPendingTx: status,\n      },\n    }))\n\n  const addUserContributedAmount = async (amount: BigNumber, poolId: PoolIds) => {\n    const [[offeringAmountInToken]] = await contract.methods\n      .viewUserOfferingAndRefundingAmountsForPools(account, [poolId === PoolIds.poolBasic ? 0 : 1])\n      .call()\n    setState((prevState) => ({\n      ...prevState,\n      [poolId]: {\n        ...prevState[poolId],\n        amountTokenCommittedInLP: prevState[poolId].amountTokenCommittedInLP.plus(amount),\n        offeringAmountInToken,\n      },\n    }))\n  }\n\n  const setIsClaimed = (poolId: PoolIds) => {\n    setState((prevState) => ({\n      ...prevState,\n      [poolId]: {\n        ...prevState[poolId],\n        hasClaimed: true,\n      },\n    }))\n  }\n\n  useEffect(() => {\n    const fetchIfoData = async () => {\n      const [userInfo, amounts] = await makeBatchRequest([\n        contract.methods.viewUserInfo(account, [0, 1]).call,\n        contract.methods.viewUserOfferingAndRefundingAmountsForPools(account, [0, 1]).call,\n      ])\n\n      setState((prevState) => ({\n        ...prevState,\n        poolBasic: {\n          ...prevState.poolBasic,\n          amountTokenCommittedInLP: new BigNumber(userInfo[0][0]),\n          offeringAmountInToken: new BigNumber(amounts[0][0]),\n          refundingAmountInLP: new BigNumber(amounts[0][1]),\n          taxAmountInLP: new BigNumber(amounts[0][2]),\n          hasClaimed: userInfo[1][0],\n        },\n        poolUnlimited: {\n          ...prevState.poolUnlimited,\n          amountTokenCommittedInLP: new BigNumber(userInfo[0][1]),\n          offeringAmountInToken: new BigNumber(amounts[1][0]),\n          refundingAmountInLP: new BigNumber(amounts[1][1]),\n          taxAmountInLP: new BigNumber(amounts[1][2]),\n          hasClaimed: userInfo[1][1],\n        },\n      }))\n    }\n\n    if (account) {\n      fetchIfoData()\n    }\n  }, [account, contract, fastRefresh])\n\n  return { ...state, allowance, contract, setPendingTx, addUserContributedAmount, setIsClaimed }\n}\n\nexport default useGetWalletIfoData\n"]},"metadata":{},"sourceType":"module"}