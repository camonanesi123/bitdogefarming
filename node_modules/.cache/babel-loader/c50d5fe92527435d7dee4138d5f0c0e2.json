{"ast":null,"code":"import _regeneratorRuntime from\"D:/task159/frontend/node_modules/babel-preset-react-app/node_modules/@babel/runtime/regenerator\";import _asyncToGenerator from\"D:/task159/frontend/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/asyncToGenerator\";import{useCallback}from'react';import{useWallet}from'@binance-chain/bsc-use-wallet';import{useDispatch}from'react-redux';import{fetchFarmUserDataAsync,fetchFarm3UserDataAsync,updateUserStakedBalance,updateUserBalance}from'state/actions';import{stake,smartStakeBnb,smartStake}from'utils/callHelpers';import{useMasterchef,useMasterchef3,useSmartChef}from'./useContract';var useStake=function useStake(pid){var dispatch=useDispatch();var _useWallet=useWallet(),account=_useWallet.account;var masterChefContract=useMasterchef();var handleStake=useCallback(/*#__PURE__*/function(){var _ref=_asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee(amount){var txHash;return _regeneratorRuntime.wrap(function _callee$(_context){while(1){switch(_context.prev=_context.next){case 0:_context.next=2;return stake(masterChefContract,pid,amount,account);case 2:txHash=_context.sent;dispatch(fetchFarmUserDataAsync(account));console.info(txHash);case 5:case\"end\":return _context.stop();}}},_callee);}));return function(_x){return _ref.apply(this,arguments);};}(),[account,dispatch,masterChefContract,pid]);return{onStake:handleStake};};export var useStake3=function useStake3(pid){var dispatch=useDispatch();var _useWallet2=useWallet(),account=_useWallet2.account;var masterChef3Contract=useMasterchef3();var handleStake=useCallback(/*#__PURE__*/function(){var _ref2=_asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee2(amount){var txHash;return _regeneratorRuntime.wrap(function _callee2$(_context2){while(1){switch(_context2.prev=_context2.next){case 0:_context2.next=2;return stake(masterChef3Contract,pid,amount,account);case 2:txHash=_context2.sent;dispatch(fetchFarm3UserDataAsync(account));console.info(txHash);case 5:case\"end\":return _context2.stop();}}},_callee2);}));return function(_x2){return _ref2.apply(this,arguments);};}(),[account,dispatch,masterChef3Contract,pid]);return{onStake:handleStake};};export var useSmartStake=function useSmartStake(sousId){var isUsingBnb=arguments.length>1&&arguments[1]!==undefined?arguments[1]:false;var dispatch=useDispatch();var _useWallet3=useWallet(),account=_useWallet3.account;var smartChefContract=useSmartChef(sousId);var handleStake=useCallback(/*#__PURE__*/function(){var _ref3=_asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee3(amount){var stakeFn;return _regeneratorRuntime.wrap(function _callee3$(_context3){while(1){switch(_context3.prev=_context3.next){case 0:stakeFn=isUsingBnb?smartStakeBnb:smartStake;_context3.next=3;return stakeFn(smartChefContract,amount,account);case 3:dispatch(updateUserStakedBalance(String(sousId),account));dispatch(updateUserBalance(String(sousId),account));case 5:case\"end\":return _context3.stop();}}},_callee3);}));return function(_x3){return _ref3.apply(this,arguments);};}(),[account,dispatch,isUsingBnb,smartChefContract,sousId]);return{onStake:handleStake};};export default useStake;","map":{"version":3,"sources":["D:/task159/frontend/src/hooks/useStake.ts"],"names":["useCallback","useWallet","useDispatch","fetchFarmUserDataAsync","fetchFarm3UserDataAsync","updateUserStakedBalance","updateUserBalance","stake","smartStakeBnb","smartStake","useMasterchef","useMasterchef3","useSmartChef","useStake","pid","dispatch","account","masterChefContract","handleStake","amount","txHash","console","info","onStake","useStake3","masterChef3Contract","useSmartStake","sousId","isUsingBnb","smartChefContract","stakeFn","String"],"mappings":"iRAAA,OAASA,WAAT,KAA4B,OAA5B,CACA,OAASC,SAAT,KAA0B,+BAA1B,CACA,OAASC,WAAT,KAA4B,aAA5B,CACA,OAASC,sBAAT,CAAiCC,uBAAjC,CAA0DC,uBAA1D,CAAmFC,iBAAnF,KAA4G,eAA5G,CACA,OAASC,KAAT,CAAgBC,aAAhB,CAA+BC,UAA/B,KAAiD,mBAAjD,CACA,OAASC,aAAT,CAAwBC,cAAxB,CAAwCC,YAAxC,KAA4D,eAA5D,CAEA,GAAMC,CAAAA,QAAQ,CAAG,QAAXA,CAAAA,QAAW,CAACC,GAAD,CAAiB,CAChC,GAAMC,CAAAA,QAAQ,CAAGb,WAAW,EAA5B,CADgC,eAEZD,SAAS,EAFG,CAExBe,OAFwB,YAExBA,OAFwB,CAGhC,GAAMC,CAAAA,kBAAkB,CAAGP,aAAa,EAAxC,CAEA,GAAMQ,CAAAA,WAAW,CAAGlB,WAAW,0FAC7B,iBAAOmB,MAAP,mJACuBZ,CAAAA,KAAK,CAACU,kBAAD,CAAqBH,GAArB,CAA0BK,MAA1B,CAAkCH,OAAlC,CAD5B,QACQI,MADR,eAEEL,QAAQ,CAACZ,sBAAsB,CAACa,OAAD,CAAvB,CAAR,CACAK,OAAO,CAACC,IAAR,CAAaF,MAAb,EAHF,sDAD6B,+DAM7B,CAACJ,OAAD,CAAUD,QAAV,CAAoBE,kBAApB,CAAwCH,GAAxC,CAN6B,CAA/B,CASA,MAAO,CAAES,OAAO,CAAEL,WAAX,CAAP,CACD,CAfD,CAiBA,MAAO,IAAMM,CAAAA,SAAS,CAAG,QAAZA,CAAAA,SAAY,CAACV,GAAD,CAAiB,CACxC,GAAMC,CAAAA,QAAQ,CAAGb,WAAW,EAA5B,CADwC,gBAEpBD,SAAS,EAFW,CAEhCe,OAFgC,aAEhCA,OAFgC,CAGxC,GAAMS,CAAAA,mBAAmB,CAAGd,cAAc,EAA1C,CAEA,GAAMO,CAAAA,WAAW,CAAGlB,WAAW,2FAC7B,kBAAOmB,MAAP,wJACuBZ,CAAAA,KAAK,CAACkB,mBAAD,CAAsBX,GAAtB,CAA2BK,MAA3B,CAAmCH,OAAnC,CAD5B,QACQI,MADR,gBAEEL,QAAQ,CAACX,uBAAuB,CAACY,OAAD,CAAxB,CAAR,CACAK,OAAO,CAACC,IAAR,CAAaF,MAAb,EAHF,wDAD6B,iEAM7B,CAACJ,OAAD,CAAUD,QAAV,CAAoBU,mBAApB,CAAyCX,GAAzC,CAN6B,CAA/B,CASA,MAAO,CAAES,OAAO,CAAEL,WAAX,CAAP,CACD,CAfM,CAiBP,MAAO,IAAMQ,CAAAA,aAAa,CAAG,QAAhBA,CAAAA,aAAgB,CAACC,MAAD,CAAwC,IAAvBC,CAAAA,UAAuB,2DAAV,KAAU,CACnE,GAAMb,CAAAA,QAAQ,CAAGb,WAAW,EAA5B,CADmE,gBAE/CD,SAAS,EAFsC,CAE3De,OAF2D,aAE3DA,OAF2D,CAGnE,GAAMa,CAAAA,iBAAiB,CAAGjB,YAAY,CAACe,MAAD,CAAtC,CAEA,GAAMT,CAAAA,WAAW,CAAGlB,WAAW,2FAC7B,kBAAOmB,MAAP,kIACQW,OADR,CACkBF,UAAU,CAAGpB,aAAH,CAAmBC,UAD/C,wBAEQqB,CAAAA,OAAO,CAACD,iBAAD,CAAoBV,MAApB,CAA4BH,OAA5B,CAFf,QAGED,QAAQ,CAACV,uBAAuB,CAAC0B,MAAM,CAACJ,MAAD,CAAP,CAAiBX,OAAjB,CAAxB,CAAR,CACAD,QAAQ,CAACT,iBAAiB,CAACyB,MAAM,CAACJ,MAAD,CAAP,CAAiBX,OAAjB,CAAlB,CAAR,CAJF,wDAD6B,iEAO7B,CAACA,OAAD,CAAUD,QAAV,CAAoBa,UAApB,CAAgCC,iBAAhC,CAAmDF,MAAnD,CAP6B,CAA/B,CAUA,MAAO,CAAEJ,OAAO,CAAEL,WAAX,CAAP,CACD,CAhBM,CAkBP,cAAeL,CAAAA,QAAf","sourcesContent":["import { useCallback } from 'react'\nimport { useWallet } from '@binance-chain/bsc-use-wallet'\nimport { useDispatch } from 'react-redux'\nimport { fetchFarmUserDataAsync, fetchFarm3UserDataAsync, updateUserStakedBalance, updateUserBalance } from 'state/actions'\nimport { stake, smartStakeBnb, smartStake } from 'utils/callHelpers'\nimport { useMasterchef, useMasterchef3, useSmartChef } from './useContract'\n\nconst useStake = (pid: number) => {\n  const dispatch = useDispatch()\n  const { account } = useWallet()\n  const masterChefContract = useMasterchef()\n\n  const handleStake = useCallback(\n    async (amount: string) => {\n      const txHash = await stake(masterChefContract, pid, amount, account)\n      dispatch(fetchFarmUserDataAsync(account))\n      console.info(txHash)\n    },\n    [account, dispatch, masterChefContract, pid],\n  )\n\n  return { onStake: handleStake }\n}\n\nexport const useStake3 = (pid: number) => {\n  const dispatch = useDispatch()\n  const { account } = useWallet()\n  const masterChef3Contract = useMasterchef3()\n\n  const handleStake = useCallback(\n    async (amount: string) => {\n      const txHash = await stake(masterChef3Contract, pid, amount, account)\n      dispatch(fetchFarm3UserDataAsync(account))\n      console.info(txHash)\n    },\n    [account, dispatch, masterChef3Contract, pid],\n  )\n\n  return { onStake: handleStake }\n}\n\nexport const useSmartStake = (sousId: number, isUsingBnb = false) => {\n  const dispatch = useDispatch()\n  const { account } = useWallet()\n  const smartChefContract = useSmartChef(sousId)\n\n  const handleStake = useCallback(\n    async (amount: string) => {\n      const stakeFn = isUsingBnb ? smartStakeBnb : smartStake\n      await stakeFn(smartChefContract, amount, account)\n      dispatch(updateUserStakedBalance(String(sousId), account))\n      dispatch(updateUserBalance(String(sousId), account))\n    },\n    [account, dispatch, isUsingBnb, smartChefContract, sousId],\n  )\n\n  return { onStake: handleStake }\n}\n\nexport default useStake\n"]},"metadata":{},"sourceType":"module"}