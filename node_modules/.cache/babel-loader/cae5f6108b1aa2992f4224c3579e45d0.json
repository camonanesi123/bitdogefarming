{"ast":null,"code":"import{jsx as _jsx}from\"react/jsx-runtime\";import _regeneratorRuntime from\"D:/task159/frontend/node_modules/babel-preset-react-app/node_modules/@babel/runtime/regenerator\";import _asyncToGenerator from\"D:/task159/frontend/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/asyncToGenerator\";import React from'react';import{AutoRenewIcon,Button}from'@pancakeswap-libs/uikit';import{PoolIds}from'config/constants/types';import{useToast}from'state/hooks';import useI18n from'hooks/useI18n';import{useWallet}from'@binance-chain/bsc-use-wallet';var ClaimButton=function ClaimButton(_ref){var poolId=_ref.poolId,walletIfoData=_ref.walletIfoData;var userPoolCharacteristics=walletIfoData[poolId];var TranslateString=useI18n();// const { account } = useWeb3React()\nvar _useWallet=useWallet(),account=_useWallet.account;var _useToast=useToast(),toastError=_useToast.toastError,toastSuccess=_useToast.toastSuccess;var setPendingTx=function setPendingTx(isPending){return walletIfoData.setPendingTx(isPending,poolId);};var handleClaim=/*#__PURE__*/function(){var _ref2=_asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee(){return _regeneratorRuntime.wrap(function _callee$(_context){while(1){switch(_context.prev=_context.next){case 0:_context.prev=0;setPendingTx(true);_context.next=4;return walletIfoData.contract.methods.harvestPool(poolId===PoolIds.poolBasic?0:1).send({from:account});case 4:walletIfoData.setIsClaimed(poolId);toastSuccess('Success!','You have successfully claimed your rewards.');_context.next=12;break;case 8:_context.prev=8;_context.t0=_context[\"catch\"](0);toastError('Error',_context.t0===null||_context.t0===void 0?void 0:_context.t0.message);console.error(_context.t0);case 12:_context.prev=12;setPendingTx(false);return _context.finish(12);case 15:case\"end\":return _context.stop();}}},_callee,null,[[0,8,12,15]]);}));return function handleClaim(){return _ref2.apply(this,arguments);};}();return/*#__PURE__*/_jsx(Button,{onClick:handleClaim,disabled:userPoolCharacteristics.isPendingTx,width:\"100%\",isLoading:userPoolCharacteristics.isPendingTx,endIcon:userPoolCharacteristics.isPendingTx?/*#__PURE__*/_jsx(AutoRenewIcon,{spin:true,color:\"currentColor\"}):null,children:TranslateString(999,'Claim')});};export default ClaimButton;","map":{"version":3,"sources":["D:/task159/frontend/src/views/Ifos/components/IfoFoldableCard/IfoPoolCard/ClaimButton.tsx"],"names":["React","AutoRenewIcon","Button","PoolIds","useToast","useI18n","useWallet","ClaimButton","poolId","walletIfoData","userPoolCharacteristics","TranslateString","account","toastError","toastSuccess","setPendingTx","isPending","handleClaim","contract","methods","harvestPool","poolBasic","send","from","setIsClaimed","message","console","error","isPendingTx"],"mappings":"4TAAA,MAAOA,CAAAA,KAAP,KAAkB,OAAlB,CACA,OAASC,aAAT,CAAwBC,MAAxB,KAAsC,yBAAtC,CAEA,OAASC,OAAT,KAAwB,wBAAxB,CAEA,OAASC,QAAT,KAAyB,aAAzB,CACA,MAAOC,CAAAA,OAAP,KAAoB,eAApB,CACA,OAASC,SAAT,KAA0B,+BAA1B,CAOA,GAAMC,CAAAA,WAA4B,CAAG,QAA/BA,CAAAA,WAA+B,MAA+B,IAA5BC,CAAAA,MAA4B,MAA5BA,MAA4B,CAApBC,aAAoB,MAApBA,aAAoB,CAClE,GAAMC,CAAAA,uBAAuB,CAAGD,aAAa,CAACD,MAAD,CAA7C,CACA,GAAMG,CAAAA,eAAe,CAAGN,OAAO,EAA/B,CACA;AAHkE,eAI9CC,SAAS,EAJqC,CAI1DM,OAJ0D,YAI1DA,OAJ0D,eAK7BR,QAAQ,EALqB,CAK1DS,UAL0D,WAK1DA,UAL0D,CAK9CC,YAL8C,WAK9CA,YAL8C,CAOlE,GAAMC,CAAAA,YAAY,CAAG,QAAfA,CAAAA,YAAe,CAACC,SAAD,QAAwBP,CAAAA,aAAa,CAACM,YAAd,CAA2BC,SAA3B,CAAsCR,MAAtC,CAAxB,EAArB,CAEA,GAAMS,CAAAA,WAAW,2FAAG,mJAEhBF,YAAY,CAAC,IAAD,CAAZ,CAFgB,sBAGVN,CAAAA,aAAa,CAACS,QAAd,CAAuBC,OAAvB,CAA+BC,WAA/B,CAA2CZ,MAAM,GAAKL,OAAO,CAACkB,SAAnB,CAA+B,CAA/B,CAAmC,CAA9E,EAAiFC,IAAjF,CAAsF,CAAEC,IAAI,CAAEX,OAAR,CAAtF,CAHU,QAIhBH,aAAa,CAACe,YAAd,CAA2BhB,MAA3B,EACAM,YAAY,CAAC,UAAD,CAAa,6CAAb,CAAZ,CALgB,+EAOhBD,UAAU,CAAC,OAAD,iDAAU,YAAOY,OAAjB,CAAV,CACAC,OAAO,CAACC,KAAR,cARgB,yBAUhBZ,YAAY,CAAC,KAAD,CAAZ,CAVgB,qGAAH,kBAAXE,CAAAA,WAAW,2CAAjB,CAcA,mBACE,KAAC,MAAD,EACE,OAAO,CAAEA,WADX,CAEE,QAAQ,CAAEP,uBAAuB,CAACkB,WAFpC,CAGE,KAAK,CAAC,MAHR,CAIE,SAAS,CAAElB,uBAAuB,CAACkB,WAJrC,CAKE,OAAO,CAAElB,uBAAuB,CAACkB,WAAxB,cAAsC,KAAC,aAAD,EAAe,IAAI,KAAnB,CAAoB,KAAK,CAAC,cAA1B,EAAtC,CAAoF,IAL/F,UAOGjB,eAAe,CAAC,GAAD,CAAM,OAAN,CAPlB,EADF,CAWD,CAlCD,CAoCA,cAAeJ,CAAAA,WAAf","sourcesContent":["import React from 'react'\nimport { AutoRenewIcon, Button } from '@pancakeswap-libs/uikit'\nimport { useWeb3React } from '@web3-react/core'\nimport { PoolIds } from 'config/constants/types'\nimport { WalletIfoData } from 'hooks/ifo/types'\nimport { useToast } from 'state/hooks'\nimport useI18n from 'hooks/useI18n'\nimport { useWallet } from '@binance-chain/bsc-use-wallet'\n\ninterface Props {\n  poolId: PoolIds\n  walletIfoData: WalletIfoData\n}\n\nconst ClaimButton: React.FC<Props> = ({ poolId, walletIfoData }) => {\n  const userPoolCharacteristics = walletIfoData[poolId]\n  const TranslateString = useI18n()\n  // const { account } = useWeb3React()\n  const { account } = useWallet()\n  const { toastError, toastSuccess } = useToast()\n\n  const setPendingTx = (isPending: boolean) => walletIfoData.setPendingTx(isPending, poolId)\n\n  const handleClaim = async () => {\n    try {\n      setPendingTx(true)\n      await walletIfoData.contract.methods.harvestPool(poolId === PoolIds.poolBasic ? 0 : 1).send({ from: account })\n      walletIfoData.setIsClaimed(poolId)\n      toastSuccess('Success!', 'You have successfully claimed your rewards.')\n    } catch (error) {\n      toastError('Error', error?.message)\n      console.error(error)\n    } finally {\n      setPendingTx(false)\n    }\n  }\n\n  return (\n    <Button\n      onClick={handleClaim}\n      disabled={userPoolCharacteristics.isPendingTx}\n      width=\"100%\"\n      isLoading={userPoolCharacteristics.isPendingTx}\n      endIcon={userPoolCharacteristics.isPendingTx ? <AutoRenewIcon spin color=\"currentColor\" /> : null}\n    >\n      {TranslateString(999, 'Claim')}\n    </Button>\n  )\n}\n\nexport default ClaimButton\n"]},"metadata":{},"sourceType":"module"}