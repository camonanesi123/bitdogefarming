{"ast":null,"code":"import _toConsumableArray from\"D:/task159/frontend/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/toConsumableArray\";import _regeneratorRuntime from\"D:/task159/frontend/node_modules/babel-preset-react-app/node_modules/@babel/runtime/regenerator\";import _taggedTemplateLiteral from\"D:/task159/frontend/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/taggedTemplateLiteral\";import _asyncToGenerator from\"D:/task159/frontend/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/asyncToGenerator\";function _templateObject(){var data=_taggedTemplateLiteral([\"\\n        query getUserPointIncreaseEvents($account: ID!) {\\n          user(id: $account) {\\n            points {\\n              id\\n              campaignId\\n              points\\n            }\\n          }\\n        }\\n      \"]);_templateObject=function _templateObject(){return data;};return data;}import{campaignMap}from'config/constants/campaigns';import{getAchievementTitle,getAchievementDescription}from'utils/achievements';import request,{gql}from'graphql-request/dist';var profileSubgraphApi=process.env.REACT_APP_SUBGRAPH_PROFILE;/**\n * Gets all user point increase events on the profile filtered by wallet address\n */export var getUserPointIncreaseEvents=/*#__PURE__*/function(){var _ref=_asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee(account){var _yield$request,user;return _regeneratorRuntime.wrap(function _callee$(_context){while(1){switch(_context.prev=_context.next){case 0:_context.prev=0;_context.next=3;return request(profileSubgraphApi,gql(_templateObject()),{account:account.toLowerCase()});case 3:_yield$request=_context.sent;user=_yield$request.user;return _context.abrupt(\"return\",user.points);case 8:_context.prev=8;_context.t0=_context[\"catch\"](0);return _context.abrupt(\"return\",null);case 11:case\"end\":return _context.stop();}}},_callee,null,[[0,8]]);}));return function getUserPointIncreaseEvents(_x){return _ref.apply(this,arguments);};}();/**\n * Gets all user point increase events and adds achievement meta\n */export var getAchievements=/*#__PURE__*/function(){var _ref2=_asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee2(account){var pointIncreaseEvents;return _regeneratorRuntime.wrap(function _callee2$(_context2){while(1){switch(_context2.prev=_context2.next){case 0:_context2.next=2;return getUserPointIncreaseEvents(account);case 2:pointIncreaseEvents=_context2.sent;if(pointIncreaseEvents){_context2.next=5;break;}return _context2.abrupt(\"return\",[]);case 5:return _context2.abrupt(\"return\",pointIncreaseEvents.reduce(function(accum,userPoint){var campaignMeta=campaignMap.get(userPoint.campaignId);return[].concat(_toConsumableArray(accum),[{id:userPoint.campaignId,type:campaignMeta.type,address:userPoint.id,title:getAchievementTitle(campaignMeta),description:getAchievementDescription(campaignMeta),badge:campaignMeta.badge,points:Number(userPoint.points)}]);},[]));case 6:case\"end\":return _context2.stop();}}},_callee2);}));return function getAchievements(_x2){return _ref2.apply(this,arguments);};}();","map":{"version":3,"sources":["D:/task159/frontend/src/state/achievements/helpers.ts"],"names":["campaignMap","getAchievementTitle","getAchievementDescription","request","gql","profileSubgraphApi","process","env","REACT_APP_SUBGRAPH_PROFILE","getUserPointIncreaseEvents","account","toLowerCase","user","points","getAchievements","pointIncreaseEvents","reduce","accum","userPoint","campaignMeta","get","campaignId","id","type","address","title","description","badge","Number"],"mappings":"s6BAAA,OAASA,WAAT,KAA4B,4BAA5B,CAEA,OAASC,mBAAT,CAA8BC,yBAA9B,KAA+D,oBAA/D,CACA,MAAOC,CAAAA,OAAP,EAAkBC,GAAlB,KAA6B,sBAA7B,CAQA,GAAMC,CAAAA,kBAAkB,CAAGC,OAAO,CAACC,GAAR,CAAYC,0BAAvC,CAEA;AACA;AACA,GACA,MAAO,IAAMC,CAAAA,0BAA0B,0FAAG,iBAAOC,OAAP,gLAEfP,CAAAA,OAAO,CAC5BE,kBAD4B,CAE5BD,GAF4B,oBAa5B,CACEM,OAAO,CAAEA,OAAO,CAACC,WAAR,EADX,CAb4B,CAFQ,qCAE9BC,IAF8B,gBAE9BA,IAF8B,iCAoB/BA,IAAI,CAACC,MApB0B,0FAsB/B,IAtB+B,sEAAH,kBAA1BJ,CAAAA,0BAA0B,4CAAhC,CA0BP;AACA;AACA,GACA,MAAO,IAAMK,CAAAA,eAAe,2FAAG,kBAAOJ,OAAP,qKACKD,CAAAA,0BAA0B,CAACC,OAAD,CAD/B,QACvBK,mBADuB,mBAGxBA,mBAHwB,2DAIpB,EAJoB,0CAOtBA,mBAAmB,CAACC,MAApB,CAA2B,SAACC,KAAD,CAAQC,SAAR,CAAsB,CACtD,GAAMC,CAAAA,YAAY,CAAGnB,WAAW,CAACoB,GAAZ,CAAgBF,SAAS,CAACG,UAA1B,CAArB,CAEA,mCACKJ,KADL,GAEE,CACEK,EAAE,CAAEJ,SAAS,CAACG,UADhB,CAEEE,IAAI,CAAEJ,YAAY,CAACI,IAFrB,CAGEC,OAAO,CAAEN,SAAS,CAACI,EAHrB,CAIEG,KAAK,CAAExB,mBAAmB,CAACkB,YAAD,CAJ5B,CAKEO,WAAW,CAAExB,yBAAyB,CAACiB,YAAD,CALxC,CAMEQ,KAAK,CAAER,YAAY,CAACQ,KANtB,CAOEd,MAAM,CAAEe,MAAM,CAACV,SAAS,CAACL,MAAX,CAPhB,CAFF,GAYD,CAfM,CAeJ,EAfI,CAPsB,0DAAH,kBAAfC,CAAAA,eAAe,8CAArB","sourcesContent":["import { campaignMap } from 'config/constants/campaigns'\nimport { Achievement } from 'state/types'\nimport { getAchievementTitle, getAchievementDescription } from 'utils/achievements'\nimport request, { gql } from 'graphql-request/dist'\n\ninterface UserPointIncreaseEvent {\n  campaignId: string\n  id: string // wallet address\n  points: string\n}\n\nconst profileSubgraphApi = process.env.REACT_APP_SUBGRAPH_PROFILE\n\n/**\n * Gets all user point increase events on the profile filtered by wallet address\n */\nexport const getUserPointIncreaseEvents = async (account: string): Promise<UserPointIncreaseEvent[]> => {\n  try {\n    const { user } = await request(\n      profileSubgraphApi,\n      gql`\n        query getUserPointIncreaseEvents($account: ID!) {\n          user(id: $account) {\n            points {\n              id\n              campaignId\n              points\n            }\n          }\n        }\n      `,\n      {\n        account: account.toLowerCase(),\n      },\n    )\n\n    return user.points\n  } catch (error) {\n    return null\n  }\n}\n\n/**\n * Gets all user point increase events and adds achievement meta\n */\nexport const getAchievements = async (account: string): Promise<Achievement[]> => {\n  const pointIncreaseEvents = await getUserPointIncreaseEvents(account)\n\n  if (!pointIncreaseEvents) {\n    return []\n  }\n\n  return pointIncreaseEvents.reduce((accum, userPoint) => {\n    const campaignMeta = campaignMap.get(userPoint.campaignId)\n\n    return [\n      ...accum,\n      {\n        id: userPoint.campaignId,\n        type: campaignMeta.type,\n        address: userPoint.id,\n        title: getAchievementTitle(campaignMeta),\n        description: getAchievementDescription(campaignMeta),\n        badge: campaignMeta.badge,\n        points: Number(userPoint.points),\n      },\n    ]\n  }, [])\n}\n"]},"metadata":{},"sourceType":"module"}