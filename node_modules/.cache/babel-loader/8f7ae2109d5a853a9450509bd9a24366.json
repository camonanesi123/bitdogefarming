{"ast":null,"code":"import{jsxs as _jsxs}from\"react/jsx-runtime\";import{jsx as _jsx}from\"react/jsx-runtime\";import _regeneratorRuntime from\"D:/task159/frontend/node_modules/babel-preset-react-app/node_modules/@babel/runtime/regenerator\";import _asyncToGenerator from\"D:/task159/frontend/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/asyncToGenerator\";import _slicedToArray from\"D:/task159/frontend/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/slicedToArray\";import React,{useCallback,useEffect,useState}from'react';import{Modal,Text,Button,AutoRenewIcon}from'@pancakeswap-libs/uikit';import{useToast}from'state/hooks';import{useClaimRefundContract}from'hooks/useContract';import useI18n from'hooks/useI18n';import{getClaimRefundContract}from'utils/contractHelpers';import{useWallet}from'@binance-chain/bsc-use-wallet';export var useCanClaim=function useCanClaim(){var _useState=useState(false),_useState2=_slicedToArray(_useState,2),canClaim=_useState2[0],setCanClaim=_useState2[1];var _useState3=useState(1),_useState4=_slicedToArray(_useState3,2),refresh=_useState4[0],setRefresh=_useState4[1];var _useWallet=useWallet(),account=_useWallet.account;var checkClaimStatus=useCallback(function(){setRefresh(function(prevRefresh){return prevRefresh+1;});},[setRefresh]);useEffect(function(){var fetchClaimStatus=/*#__PURE__*/function(){var _ref=_asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee(){var claimRefundContract,walletCanClaim;return _regeneratorRuntime.wrap(function _callee$(_context){while(1){switch(_context.prev=_context.next){case 0:claimRefundContract=getClaimRefundContract();_context.next=3;return claimRefundContract.methods.canClaim(account).call();case 3:walletCanClaim=_context.sent;setCanClaim(walletCanClaim);case 5:case\"end\":return _context.stop();}}},_callee);}));return function fetchClaimStatus(){return _ref.apply(this,arguments);};}();if(account){fetchClaimStatus();}},[account,refresh,setCanClaim]);return{canClaim:canClaim,checkClaimStatus:checkClaimStatus};};var ClaimGift=function ClaimGift(_ref2){var onSuccess=_ref2.onSuccess,onDismiss=_ref2.onDismiss;var _useState5=useState(false),_useState6=_slicedToArray(_useState5,2),isConfirming=_useState6[0],setIsConfirming=_useState6[1];var _useWallet2=useWallet(),account=_useWallet2.account;var TranslateString=useI18n();var _useCanClaim=useCanClaim(),canClaim=_useCanClaim.canClaim;var claimRefundContract=useClaimRefundContract();var _useToast=useToast(),toastSuccess=_useToast.toastSuccess,toastError=_useToast.toastError;var handleClick=function handleClick(){claimRefundContract.methods.getCakeBack().send({from:account}).on('sending',function(){setIsConfirming(true);}).on('receipt',function(){toastSuccess('Success!');onSuccess();onDismiss();}).on('error',function(error){setIsConfirming(false);toastError('Error',error===null||error===void 0?void 0:error.message);});};return/*#__PURE__*/_jsx(Modal,{title:TranslateString(999,'Claim your Gift!'),onDismiss:onDismiss,children:/*#__PURE__*/_jsxs(\"div\",{style:{maxWidth:'640px'},children:[/*#__PURE__*/_jsx(Text,{as:\"p\",children:TranslateString(999,'Thank you for being a day-one user of Pancake Profiles!')}),/*#__PURE__*/_jsx(Text,{as:\"p\",mb:\"8px\",children:TranslateString(999,\"If you haven't already noticed, we made a mistake and the starter bunny you chose got mixed up and changed into another bunny. Oops!\")}),/*#__PURE__*/_jsx(Text,{as:\"p\",children:TranslateString(999,\"To make it up to you, we'll refund you the full 4 CAKE it cost to make your bunny.\")}),/*#__PURE__*/_jsx(Text,{as:\"p\",mb:\"8px\",children:TranslateString(999,\"We're also preparing an all-new collectible for you to claim (for free!) in the near future.\")}),/*#__PURE__*/_jsx(Text,{as:\"p\",mb:\"24px\",children:TranslateString(999,'Once you claim the refund, you can make another account with another wallet, mint a new bunny, and send it to your main account via the NFT page.')}),/*#__PURE__*/_jsx(Button,{endIcon:isConfirming?/*#__PURE__*/_jsx(AutoRenewIcon,{spin:true,color:\"currentColor\"}):null,isLoading:isConfirming,onClick:handleClick,disabled:!canClaim,children:TranslateString(999,'Claim Your CAKE')})]})});};export default ClaimGift;","map":{"version":3,"sources":["D:/task159/frontend/src/views/Profile/components/ClaimGiftModal.tsx"],"names":["React","useCallback","useEffect","useState","Modal","Text","Button","AutoRenewIcon","useToast","useClaimRefundContract","useI18n","getClaimRefundContract","useWallet","useCanClaim","canClaim","setCanClaim","refresh","setRefresh","account","checkClaimStatus","prevRefresh","fetchClaimStatus","claimRefundContract","methods","call","walletCanClaim","ClaimGift","onSuccess","onDismiss","isConfirming","setIsConfirming","TranslateString","toastSuccess","toastError","handleClick","getCakeBack","send","from","on","error","message","maxWidth"],"mappings":"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","sourcesContent":["import React, { useCallback, useEffect, useState } from 'react'\nimport { Modal, Text, InjectedModalProps, Button, AutoRenewIcon } from '@pancakeswap-libs/uikit'\nimport { useWeb3React } from '@web3-react/core'\nimport { useToast } from 'state/hooks'\nimport { useClaimRefundContract } from 'hooks/useContract'\nimport useI18n from 'hooks/useI18n'\nimport { getClaimRefundContract } from 'utils/contractHelpers'\nimport { useWallet } from '@binance-chain/bsc-use-wallet'\n\ninterface ClaimGiftProps extends InjectedModalProps {\n  onSuccess: () => void\n}\n\nexport const useCanClaim = () => {\n  const [canClaim, setCanClaim] = useState(false)\n  const [refresh, setRefresh] = useState(1)\n  const { account } = useWallet()\n\n  const checkClaimStatus = useCallback(() => {\n    setRefresh((prevRefresh) => prevRefresh + 1)\n  }, [setRefresh])\n\n  useEffect(() => {\n    const fetchClaimStatus = async () => {\n      const claimRefundContract = getClaimRefundContract()\n      const walletCanClaim = await claimRefundContract.methods.canClaim(account).call()\n      setCanClaim(walletCanClaim)\n    }\n\n    if (account) {\n      fetchClaimStatus()\n    }\n  }, [account, refresh, setCanClaim])\n\n  return { canClaim, checkClaimStatus }\n}\n\nconst ClaimGift: React.FC<ClaimGiftProps> = ({ onSuccess, onDismiss }) => {\n  const [isConfirming, setIsConfirming] = useState(false)\n  const { account } = useWallet()\n  const TranslateString = useI18n()\n  const { canClaim } = useCanClaim()\n  const claimRefundContract = useClaimRefundContract()\n  const { toastSuccess, toastError } = useToast()\n\n  const handleClick = () => {\n    claimRefundContract.methods\n      .getCakeBack()\n      .send({ from: account })\n      .on('sending', () => {\n        setIsConfirming(true)\n      })\n      .on('receipt', () => {\n        toastSuccess('Success!')\n        onSuccess()\n        onDismiss()\n      })\n      .on('error', (error) => {\n        setIsConfirming(false)\n        toastError('Error', error?.message)\n      })\n  }\n\n  return (\n    <Modal title={TranslateString(999, 'Claim your Gift!')} onDismiss={onDismiss}>\n      <div style={{ maxWidth: '640px' }}>\n        <Text as=\"p\">{TranslateString(999, 'Thank you for being a day-one user of Pancake Profiles!')}</Text>\n        <Text as=\"p\" mb=\"8px\">\n          {TranslateString(\n            999,\n            \"If you haven't already noticed, we made a mistake and the starter bunny you chose got mixed up and changed into another bunny. Oops!\",\n          )}\n        </Text>\n        <Text as=\"p\">\n          {TranslateString(999, \"To make it up to you, we'll refund you the full 4 CAKE it cost to make your bunny.\")}\n        </Text>\n        <Text as=\"p\" mb=\"8px\">\n          {TranslateString(\n            999,\n            \"We're also preparing an all-new collectible for you to claim (for free!) in the near future.\",\n          )}\n        </Text>\n        <Text as=\"p\" mb=\"24px\">\n          {TranslateString(\n            999,\n            'Once you claim the refund, you can make another account with another wallet, mint a new bunny, and send it to your main account via the NFT page.',\n          )}\n        </Text>\n        <Button\n          endIcon={isConfirming ? <AutoRenewIcon spin color=\"currentColor\" /> : null}\n          isLoading={isConfirming}\n          onClick={handleClick}\n          disabled={!canClaim}\n        >\n          {TranslateString(999, 'Claim Your CAKE')}\n        </Button>\n      </div>\n    </Modal>\n  )\n}\n\nexport default ClaimGift\n"]},"metadata":{},"sourceType":"module"}