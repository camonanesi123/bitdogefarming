{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nvar _jsxFileName = \"D:\\\\task159\\\\frontend\\\\src\\\\views\\\\Ifos\\\\components\\\\IfoFoldableCard\\\\IfoPoolCard\\\\PercentageOfTotal.tsx\",\n    _s = $RefreshSig$();\n\nimport React from 'react';\nimport { Text } from '@pancakeswap-libs/uikit';\nimport BigNumber from 'bignumber.js';\nimport useI18n from 'hooks/useI18n';\n\nconst PercentageOfTotal = ({\n  userAmount,\n  totalAmount,\n  ...props\n}) => {\n  _s();\n\n  const TranslateString = useI18n();\n  const percentOfUserContribution = totalAmount.isGreaterThan(0) ? userAmount.div(totalAmount).times(100).toNumber() : new BigNumber(0);\n  const percentOfUserDisplay = percentOfUserContribution.toLocaleString(undefined, {\n    maximumFractionDigits: 5\n  });\n  return /*#__PURE__*/_jsxDEV(Text, {\n    fontSize: \"14px\",\n    color: \"textSubtle\",\n    ...props,\n    children: TranslateString(999, `${percentOfUserDisplay}% of total`)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 19,\n    columnNumber: 5\n  }, this);\n};\n\n_s(PercentageOfTotal, \"SC/Zc+rnUQSfBje7TuuyRy0lI/g=\", false, function () {\n  return [useI18n];\n});\n\n_c = PercentageOfTotal;\nexport default PercentageOfTotal;\n\nvar _c;\n\n$RefreshReg$(_c, \"PercentageOfTotal\");","map":{"version":3,"sources":["D:/task159/frontend/src/views/Ifos/components/IfoFoldableCard/IfoPoolCard/PercentageOfTotal.tsx"],"names":["React","Text","BigNumber","useI18n","PercentageOfTotal","userAmount","totalAmount","props","TranslateString","percentOfUserContribution","isGreaterThan","div","times","toNumber","percentOfUserDisplay","toLocaleString","undefined","maximumFractionDigits"],"mappings":";;;;;AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,SAASC,IAAT,QAAgC,yBAAhC;AACA,OAAOC,SAAP,MAAsB,cAAtB;AACA,OAAOC,OAAP,MAAoB,eAApB;;AAOA,MAAMC,iBAAmD,GAAG,CAAC;AAAEC,EAAAA,UAAF;AAAcC,EAAAA,WAAd;AAA2B,KAAGC;AAA9B,CAAD,KAA2C;AAAA;;AACrG,QAAMC,eAAe,GAAGL,OAAO,EAA/B;AACA,QAAMM,yBAAyB,GAAGH,WAAW,CAACI,aAAZ,CAA0B,CAA1B,IAC9BL,UAAU,CAACM,GAAX,CAAeL,WAAf,EAA4BM,KAA5B,CAAkC,GAAlC,EAAuCC,QAAvC,EAD8B,GAE9B,IAAIX,SAAJ,CAAc,CAAd,CAFJ;AAGA,QAAMY,oBAAoB,GAAGL,yBAAyB,CAACM,cAA1B,CAAyCC,SAAzC,EAAoD;AAAEC,IAAAA,qBAAqB,EAAE;AAAzB,GAApD,CAA7B;AAEA,sBACE,QAAC,IAAD;AAAM,IAAA,QAAQ,EAAC,MAAf;AAAsB,IAAA,KAAK,EAAC,YAA5B;AAAA,OAA6CV,KAA7C;AAAA,cACGC,eAAe,CAAC,GAAD,EAAO,GAAEM,oBAAqB,YAA9B;AADlB;AAAA;AAAA;AAAA;AAAA,UADF;AAKD,CAZD;;GAAMV,iB;UACoBD,O;;;KADpBC,iB;AAcN,eAAeA,iBAAf","sourcesContent":["import React from 'react'\nimport { Text, TextProps } from '@pancakeswap-libs/uikit'\nimport BigNumber from 'bignumber.js'\nimport useI18n from 'hooks/useI18n'\n\ninterface PercentageOfTotalProps extends TextProps {\n  userAmount: BigNumber\n  totalAmount: BigNumber\n}\n\nconst PercentageOfTotal: React.FC<PercentageOfTotalProps> = ({ userAmount, totalAmount, ...props }) => {\n  const TranslateString = useI18n()\n  const percentOfUserContribution = totalAmount.isGreaterThan(0)\n    ? userAmount.div(totalAmount).times(100).toNumber()\n    : new BigNumber(0)\n  const percentOfUserDisplay = percentOfUserContribution.toLocaleString(undefined, { maximumFractionDigits: 5 })\n\n  return (\n    <Text fontSize=\"14px\" color=\"textSubtle\" {...props}>\n      {TranslateString(999, `${percentOfUserDisplay}% of total`)}\n    </Text>\n  )\n}\n\nexport default PercentageOfTotal\n"]},"metadata":{},"sourceType":"module"}