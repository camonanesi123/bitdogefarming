{"ast":null,"code":"import BigNumber from 'bignumber.js';\nimport erc20ABI from 'config/abi/erc20.json';\nimport masterchef3ABI from 'config/abi/masterchef3.json';\nimport multicall from 'utils/multicall';\nimport farms3Config from 'config/constants/farms3';\nimport { getMasterChef3Address } from 'utils/addressHelpers';\nconst CHAIN_ID = process.env.REACT_APP_CHAIN_ID;\nexport const fetchFarm3UserAllowances = async account => {\n  const masterChef3Adress = getMasterChef3Address();\n  const calls = farms3Config.map(farm => {\n    const lpContractAddress = farm.isTokenOnly ? farm.tokenAddresses[CHAIN_ID] : farm.lpAddresses[CHAIN_ID];\n    return {\n      address: lpContractAddress,\n      name: 'allowance',\n      params: [account, masterChef3Adress]\n    };\n  });\n  const rawLpAllowances = await multicall(erc20ABI, calls);\n  const parsedLpAllowances = rawLpAllowances.map(lpBalance => {\n    return new BigNumber(lpBalance).toJSON();\n  });\n  return parsedLpAllowances;\n};\nexport const fetchFarm3UserTokenBalances = async account => {\n  const calls = farms3Config.map(farm => {\n    const lpContractAddress = farm.isTokenOnly ? farm.tokenAddresses[CHAIN_ID] : farm.lpAddresses[CHAIN_ID];\n    return {\n      address: lpContractAddress,\n      name: 'balanceOf',\n      params: [account]\n    };\n  });\n  const rawTokenBalances = await multicall(erc20ABI, calls);\n  const parsedTokenBalances = rawTokenBalances.map(tokenBalance => {\n    return new BigNumber(tokenBalance).toJSON();\n  });\n  return parsedTokenBalances;\n};\nexport const fetchFarm3UserStakedBalances = async account => {\n  const masterChef3Adress = getMasterChef3Address();\n  const calls = farms3Config.map(farm => {\n    return {\n      address: masterChef3Adress,\n      name: 'userInfo',\n      params: [farm.pid, account]\n    };\n  });\n  const rawStakedBalances = await multicall(masterchef3ABI, calls);\n  const parsedStakedBalances = rawStakedBalances.map(stakedBalance => {\n    return new BigNumber(stakedBalance[0]._hex).toJSON();\n  });\n  return parsedStakedBalances;\n};\nexport const fetchFarm3UserEarnings = async account => {\n  const masterChef3Adress = getMasterChef3Address();\n  const calls = farms3Config.map(farm => {\n    return {\n      address: masterChef3Adress,\n      name: 'pendingEgg',\n      params: [farm.pid, account]\n    };\n  });\n  const rawEarnings = await multicall(masterchef3ABI, calls);\n  const parsedEarnings = rawEarnings.map(earnings => {\n    return new BigNumber(earnings).toJSON();\n  });\n  return parsedEarnings;\n};","map":{"version":3,"sources":["D:/task159/frontend/src/state/farms3/fetchFarmUser3.ts"],"names":["BigNumber","erc20ABI","masterchef3ABI","multicall","farms3Config","getMasterChef3Address","CHAIN_ID","process","env","REACT_APP_CHAIN_ID","fetchFarm3UserAllowances","account","masterChef3Adress","calls","map","farm","lpContractAddress","isTokenOnly","tokenAddresses","lpAddresses","address","name","params","rawLpAllowances","parsedLpAllowances","lpBalance","toJSON","fetchFarm3UserTokenBalances","rawTokenBalances","parsedTokenBalances","tokenBalance","fetchFarm3UserStakedBalances","pid","rawStakedBalances","parsedStakedBalances","stakedBalance","_hex","fetchFarm3UserEarnings","rawEarnings","parsedEarnings","earnings"],"mappings":"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","sourcesContent":["import BigNumber from 'bignumber.js'\nimport erc20ABI from 'config/abi/erc20.json'\nimport masterchef3ABI from 'config/abi/masterchef3.json'\nimport multicall from 'utils/multicall'\nimport farms3Config from 'config/constants/farms3'\nimport { getMasterChef3Address } from 'utils/addressHelpers'\n\nconst CHAIN_ID = process.env.REACT_APP_CHAIN_ID\n\nexport const fetchFarm3UserAllowances = async (account: string) => {\n  const masterChef3Adress = getMasterChef3Address()\n\n  const calls = farms3Config.map((farm) => {\n    const lpContractAddress = farm.isTokenOnly ? farm.tokenAddresses[CHAIN_ID] : farm.lpAddresses[CHAIN_ID]\n    return { address: lpContractAddress, name: 'allowance', params: [account, masterChef3Adress] }\n  })\n\n  const rawLpAllowances = await multicall(erc20ABI, calls)\n  const parsedLpAllowances = rawLpAllowances.map((lpBalance) => {\n    return new BigNumber(lpBalance).toJSON()\n  })\n  return parsedLpAllowances\n}\n\nexport const fetchFarm3UserTokenBalances = async (account: string) => {\n  const calls = farms3Config.map((farm) => {\n    const lpContractAddress = farm.isTokenOnly ? farm.tokenAddresses[CHAIN_ID] : farm.lpAddresses[CHAIN_ID]\n    return {\n      address: lpContractAddress,\n      name: 'balanceOf',\n      params: [account],\n    }\n  })\n\n  const rawTokenBalances = await multicall(erc20ABI, calls)\n  const parsedTokenBalances = rawTokenBalances.map((tokenBalance) => {\n    return new BigNumber(tokenBalance).toJSON()\n  })\n  return parsedTokenBalances\n}\n\nexport const fetchFarm3UserStakedBalances = async (account: string) => {\n  const masterChef3Adress = getMasterChef3Address()\n\n  const calls = farms3Config.map((farm) => {\n    return {\n      address: masterChef3Adress,\n      name: 'userInfo',\n      params: [farm.pid, account],\n    }\n  })\n\n  const rawStakedBalances = await multicall(masterchef3ABI, calls)\n  const parsedStakedBalances = rawStakedBalances.map((stakedBalance) => {\n    return new BigNumber(stakedBalance[0]._hex).toJSON()\n  })\n  return parsedStakedBalances\n}\n\nexport const fetchFarm3UserEarnings = async (account: string) => {\n  const masterChef3Adress = getMasterChef3Address()\n\n  const calls = farms3Config.map((farm) => {\n    return {\n      address: masterChef3Adress,\n      name: 'pendingEgg',\n      params: [farm.pid, account],\n    }\n  })\n\n  const rawEarnings = await multicall(masterchef3ABI, calls)\n  const parsedEarnings = rawEarnings.map((earnings) => {\n    return new BigNumber(earnings).toJSON()\n  })\n  return parsedEarnings\n}\n"]},"metadata":{},"sourceType":"module"}