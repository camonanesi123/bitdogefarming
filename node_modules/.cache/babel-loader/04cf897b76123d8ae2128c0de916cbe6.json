{"ast":null,"code":"import{jsxs as _jsxs}from\"react/jsx-runtime\";import{jsx as _jsx}from\"react/jsx-runtime\";import _slicedToArray from\"D:/task159/frontend/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/slicedToArray\";import _taggedTemplateLiteral from\"D:/task159/frontend/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/taggedTemplateLiteral\";function _templateObject3(){var data=_taggedTemplateLiteral([\"\\n  flex-direction: column;\\n  flex: 1;\\n  margin-left: 8px;\\n\\n  \",\" {\\n    align-items: center;\\n    flex-direction: row;\\n  }\\n\"]);_templateObject3=function _templateObject3(){return data;};return data;}function _templateObject2(){var data=_taggedTemplateLiteral([\"\\n  flex: 1;\\n\"]);_templateObject2=function _templateObject2(){return data;};return data;}function _templateObject(){var data=_taggedTemplateLiteral([\"\\n  border-bottom: 1px solid \",\";\\n  padding-bottom: 16px;\\n  padding-top: 16px;\\n\"]);_templateObject=function _templateObject(){return data;};return data;}import React,{useState}from'react';import styled from'styled-components';import{AutoRenewIcon,Button,Flex}from'@pancakeswap-libs/uikit';import{useToast}from'state/hooks';import useI18n from'hooks/useI18n';import{usePointCenterIfoContract}from'hooks/useContract';import{useWallet}from'@binance-chain/bsc-use-wallet';import ActionColumn from'../ActionColumn';import PointsLabel from'./PointsLabel';import AchievementTitle from'../AchievementTitle';import AchievementAvatar from'../AchievementAvatar';import AchievementDescription from'../AchievementDescription';var StyledAchievementRow=styled(Flex)(_templateObject(),function(_ref){var theme=_ref.theme;return theme.colors.borderColor;});var Details=styled.div(_templateObject2());var Body=styled(Flex)(_templateObject3(),function(_ref2){var theme=_ref2.theme;return theme.mediaQueries.md;});var AchievementRow=function AchievementRow(_ref3){var achievement=_ref3.achievement,onCollectSuccess=_ref3.onCollectSuccess;var _useState=useState(false),_useState2=_slicedToArray(_useState,2),isCollecting=_useState2[0],setIsCollecting=_useState2[1];var TranslateString=useI18n();var pointCenterContract=usePointCenterIfoContract();var _useWallet=useWallet(),account=_useWallet.account;var _useToast=useToast(),toastError=_useToast.toastError,toastSuccess=_useToast.toastSuccess;var handleCollectPoints=function handleCollectPoints(){pointCenterContract.methods.getPoints(achievement.address).send({from:account}).on('sending',function(){setIsCollecting(true);}).on('receipt',function(){setIsCollecting(false);onCollectSuccess(achievement);toastSuccess('Points Collected!');}).on('error',function(error){toastError('Error',error===null||error===void 0?void 0:error.message);setIsCollecting(false);});};return/*#__PURE__*/_jsxs(StyledAchievementRow,{children:[/*#__PURE__*/_jsx(AchievementAvatar,{badge:achievement.badge}),/*#__PURE__*/_jsxs(Body,{children:[/*#__PURE__*/_jsxs(Details,{children:[/*#__PURE__*/_jsx(AchievementTitle,{title:achievement.title}),/*#__PURE__*/_jsx(AchievementDescription,{description:achievement.description})]}),/*#__PURE__*/_jsx(PointsLabel,{points:achievement.points,px:[0,null,null,'32px'],mb:['16px',null,null,0]}),/*#__PURE__*/_jsx(ActionColumn,{children:/*#__PURE__*/_jsx(Button,{onClick:handleCollectPoints,isLoading:isCollecting,endIcon:isCollecting?/*#__PURE__*/_jsx(AutoRenewIcon,{spin:true,color:\"currentColor\"}):null,disabled:isCollecting,variant:\"secondary\",children:TranslateString(999,'Collect')})})]})]});};export default AchievementRow;","map":{"version":3,"sources":["D:/task159/frontend/src/views/Profile/components/AchievementRow/index.tsx"],"names":["React","useState","styled","AutoRenewIcon","Button","Flex","useToast","useI18n","usePointCenterIfoContract","useWallet","ActionColumn","PointsLabel","AchievementTitle","AchievementAvatar","AchievementDescription","StyledAchievementRow","theme","colors","borderColor","Details","div","Body","mediaQueries","md","AchievementRow","achievement","onCollectSuccess","isCollecting","setIsCollecting","TranslateString","pointCenterContract","account","toastError","toastSuccess","handleCollectPoints","methods","getPoints","address","send","from","on","error","message","badge","title","description","points"],"mappings":"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","sourcesContent":["import React, { useState } from 'react'\nimport { useWeb3React } from '@web3-react/core'\nimport styled from 'styled-components'\nimport { AutoRenewIcon, Button, Flex } from '@pancakeswap-libs/uikit'\nimport { Achievement } from 'state/types'\nimport { useToast } from 'state/hooks'\nimport useI18n from 'hooks/useI18n'\nimport { usePointCenterIfoContract } from 'hooks/useContract'\nimport { useWallet } from '@binance-chain/bsc-use-wallet'\nimport ActionColumn from '../ActionColumn'\nimport PointsLabel from './PointsLabel'\nimport AchievementTitle from '../AchievementTitle'\nimport AchievementAvatar from '../AchievementAvatar'\nimport AchievementDescription from '../AchievementDescription'\n\ninterface AchievementRowProps {\n  achievement: Achievement\n  onCollectSuccess?: (achievement: Achievement) => void\n}\n\nconst StyledAchievementRow = styled(Flex)`\n  border-bottom: 1px solid ${({ theme }) => theme.colors.borderColor};\n  padding-bottom: 16px;\n  padding-top: 16px;\n`\n\nconst Details = styled.div`\n  flex: 1;\n`\n\nconst Body = styled(Flex)`\n  flex-direction: column;\n  flex: 1;\n  margin-left: 8px;\n\n  ${({ theme }) => theme.mediaQueries.md} {\n    align-items: center;\n    flex-direction: row;\n  }\n`\n\nconst AchievementRow: React.FC<AchievementRowProps> = ({ achievement, onCollectSuccess }) => {\n  const [isCollecting, setIsCollecting] = useState(false)\n  const TranslateString = useI18n()\n  const pointCenterContract = usePointCenterIfoContract()\n  const { account } = useWallet()\n  const { toastError, toastSuccess } = useToast()\n\n  const handleCollectPoints = () => {\n    pointCenterContract.methods\n      .getPoints(achievement.address)\n      .send({ from: account })\n      .on('sending', () => {\n        setIsCollecting(true)\n      })\n      .on('receipt', () => {\n        setIsCollecting(false)\n        onCollectSuccess(achievement)\n        toastSuccess('Points Collected!')\n      })\n      .on('error', (error) => {\n        toastError('Error', error?.message)\n        setIsCollecting(false)\n      })\n  }\n\n  return (\n    <StyledAchievementRow>\n      <AchievementAvatar badge={achievement.badge} />\n      <Body>\n        <Details>\n          <AchievementTitle title={achievement.title} />\n          <AchievementDescription description={achievement.description} />\n        </Details>\n        <PointsLabel points={achievement.points} px={[0, null, null, '32px']} mb={['16px', null, null, 0]} />\n        <ActionColumn>\n          <Button\n            onClick={handleCollectPoints}\n            isLoading={isCollecting}\n            endIcon={isCollecting ? <AutoRenewIcon spin color=\"currentColor\" /> : null}\n            disabled={isCollecting}\n            variant=\"secondary\"\n          >\n            {TranslateString(999, 'Collect')}\n          </Button>\n        </ActionColumn>\n      </Body>\n    </StyledAchievementRow>\n  )\n}\n\nexport default AchievementRow\n"]},"metadata":{},"sourceType":"module"}