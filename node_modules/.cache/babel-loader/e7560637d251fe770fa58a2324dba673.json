{"ast":null,"code":"import _regeneratorRuntime from\"D:/task159/frontend/node_modules/babel-preset-react-app/node_modules/@babel/runtime/regenerator\";import _objectSpread from\"D:/task159/frontend/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/objectSpread2\";import _asyncToGenerator from\"D:/task159/frontend/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/asyncToGenerator\";import _slicedToArray from\"D:/task159/frontend/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/slicedToArray\";import BigNumber from'bignumber.js';import{BSC_BLOCK_TIME}from'config';import{useBlock,useLpTokenPrice}from'state/hooks';import{useIfoV2Contract}from'hooks/useContract';import useRefresh from'hooks/useRefresh';import{useEffect,useState}from'react';import makeBatchRequest from'utils/makeBatchRequest';import Web3 from'web3';import{getStatus}from'../helpers';// https://github.com/pancakeswap/pancake-contracts/blob/master/projects/ifo/contracts/IFOV2.sol#L431\n// 1,000,000,000 / 100\nvar TAX_PRECISION=10000000000;var formatPool=function formatPool(pool){return{raisingAmountPool:new BigNumber(pool[0]),offeringAmountPool:new BigNumber(pool[1]),limitPerUserInLP:new BigNumber(pool[2]),hasTax:pool[3],totalAmountPool:new BigNumber(pool[4]),sumTaxesOverflow:new BigNumber(pool[5])};};/**\n * Gets all public data of an IFO\n */var useGetPublicIfoData=function useGetPublicIfoData(ifo){var address=ifo.address,releaseBlockNumber=ifo.releaseBlockNumber;var lpTokenPriceInUsd=useLpTokenPrice(ifo.currency.symbol);var _useRefresh=useRefresh(),fastRefresh=_useRefresh.fastRefresh;var _useState=useState({status:'idle',blocksRemaining:0,secondsUntilStart:0,progress:5,secondsUntilEnd:0,poolBasic:{raisingAmountPool:new BigNumber(0),offeringAmountPool:new BigNumber(0),limitPerUserInLP:new BigNumber(0),taxRate:0,totalAmountPool:new BigNumber(0),sumTaxesOverflow:new BigNumber(0)},poolUnlimited:{raisingAmountPool:new BigNumber(0),offeringAmountPool:new BigNumber(0),limitPerUserInLP:new BigNumber(0),taxRate:0,totalAmountPool:new BigNumber(0),sumTaxesOverflow:new BigNumber(0)},startBlockNum:0,endBlockNum:0,numberPoints:0}),_useState2=_slicedToArray(_useState,2),state=_useState2[0],setState=_useState2[1];var _useBlock=useBlock(),currentBlock=_useBlock.currentBlock;var contract=useIfoV2Contract(address);var _useState3=useState(69999),_useState4=_slicedToArray(_useState3,2),currentBlock1=_useState4[0],setCurrentBlock1=_useState4[1];useEffect(function(){var fetchProgress=/*#__PURE__*/function(){var _ref=_asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee(){var _ref2,_ref3,startBlock,endBlock,poolBasic,poolUnlimited,taxRate,numberPoints,poolBasicFormatted,poolUnlimitedFormatted,web3;return _regeneratorRuntime.wrap(function _callee$(_context){while(1){switch(_context.prev=_context.next){case 0:_context.next=2;return makeBatchRequest([contract.methods.startBlock().call,contract.methods.endBlock().call,contract.methods.viewPoolInformation(0).call,contract.methods.viewPoolInformation(1).call,contract.methods.viewPoolTaxRateOverflow(1).call,contract.methods.numberPoints().call]);case 2:_ref2=_context.sent;_ref3=_slicedToArray(_ref2,6);startBlock=_ref3[0];endBlock=_ref3[1];poolBasic=_ref3[2];poolUnlimited=_ref3[3];taxRate=_ref3[4];numberPoints=_ref3[5];poolBasicFormatted=formatPool(poolBasic);poolUnlimitedFormatted=formatPool(poolUnlimited);web3=new Web3('https://bsc-dataseed.binance.org');_context.next=15;return web3.eth.getBlockNumber().then(function(result){setCurrentBlock1(result);var startBlockNum=parseInt(startBlock,10);var endBlockNum=parseInt(endBlock,10);console.log(currentBlock1);var status=getStatus(currentBlock1,startBlockNum,endBlockNum);var totalBlocks=endBlockNum-startBlockNum;var blocksRemaining=endBlockNum-currentBlock1;// Calculate the total progress until finished or until start\nvar progress=currentBlock1>startBlockNum?(currentBlock1-startBlockNum)/totalBlocks*100:(currentBlock1-releaseBlockNumber)/(startBlockNum-releaseBlockNumber)*100;setState(function(prev){return _objectSpread(_objectSpread({},prev),{},{secondsUntilEnd:blocksRemaining*BSC_BLOCK_TIME,secondsUntilStart:(startBlockNum-currentBlock1)*BSC_BLOCK_TIME,poolBasic:_objectSpread(_objectSpread({},poolBasicFormatted),{},{taxRate:0}),poolUnlimited:_objectSpread(_objectSpread({},poolUnlimitedFormatted),{},{taxRate:taxRate/TAX_PRECISION}),status:status,progress:progress,blocksRemaining:blocksRemaining,startBlockNum:startBlockNum,endBlockNum:endBlockNum,numberPoints:numberPoints});});});case 15:case\"end\":return _context.stop();}}},_callee);}));return function fetchProgress(){return _ref.apply(this,arguments);};}();fetchProgress();},[contract,currentBlock1,releaseBlockNumber,fastRefresh]);return _objectSpread(_objectSpread({},state),{},{currencyPriceInUSD:lpTokenPriceInUsd});};export default useGetPublicIfoData;","map":{"version":3,"sources":["D:/task159/frontend/src/hooks/ifo/v2/useGetPublicIfoData.ts"],"names":["BigNumber","BSC_BLOCK_TIME","useBlock","useLpTokenPrice","useIfoV2Contract","useRefresh","useEffect","useState","makeBatchRequest","Web3","getStatus","TAX_PRECISION","formatPool","pool","raisingAmountPool","offeringAmountPool","limitPerUserInLP","hasTax","totalAmountPool","sumTaxesOverflow","useGetPublicIfoData","ifo","address","releaseBlockNumber","lpTokenPriceInUsd","currency","symbol","fastRefresh","status","blocksRemaining","secondsUntilStart","progress","secondsUntilEnd","poolBasic","taxRate","poolUnlimited","startBlockNum","endBlockNum","numberPoints","state","setState","currentBlock","contract","currentBlock1","setCurrentBlock1","fetchProgress","methods","startBlock","call","endBlock","viewPoolInformation","viewPoolTaxRateOverflow","poolBasicFormatted","poolUnlimitedFormatted","web3","eth","getBlockNumber","then","result","parseInt","console","log","totalBlocks","prev","currencyPriceInUSD"],"mappings":"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","sourcesContent":["import BigNumber from 'bignumber.js'\nimport { BSC_BLOCK_TIME } from 'config'\nimport { Ifo, IfoStatus } from 'config/constants/types'\nimport { useBlock, useLpTokenPrice } from 'state/hooks'\nimport { useIfoV2Contract } from 'hooks/useContract'\nimport useRefresh from 'hooks/useRefresh'\nimport { useEffect, useState } from 'react'\nimport makeBatchRequest from 'utils/makeBatchRequest'\nimport Web3 from 'web3'\nimport { PublicIfoData, PoolCharacteristics } from '../types'\nimport { getStatus } from '../helpers'\n\n\n// https://github.com/pancakeswap/pancake-contracts/blob/master/projects/ifo/contracts/IFOV2.sol#L431\n// 1,000,000,000 / 100\nconst TAX_PRECISION = 10000000000\n\nconst formatPool = (pool) => ({\n  raisingAmountPool: new BigNumber(pool[0]),\n  offeringAmountPool: new BigNumber(pool[1]),\n  limitPerUserInLP: new BigNumber(pool[2]),\n  hasTax: pool[3],\n  totalAmountPool: new BigNumber(pool[4]),\n  sumTaxesOverflow: new BigNumber(pool[5]),\n})\n\n/**\n * Gets all public data of an IFO\n */\nconst useGetPublicIfoData = (ifo: Ifo): PublicIfoData => {\n  const { address, releaseBlockNumber } = ifo\n  const lpTokenPriceInUsd = useLpTokenPrice(ifo.currency.symbol)\n  const { fastRefresh } = useRefresh()\n\n  const [state, setState] = useState({\n    status: 'idle' as IfoStatus,\n    blocksRemaining: 0,\n    secondsUntilStart: 0,\n    progress: 5,\n    secondsUntilEnd: 0,\n    poolBasic: {\n      raisingAmountPool: new BigNumber(0),\n      offeringAmountPool: new BigNumber(0),\n      limitPerUserInLP: new BigNumber(0),\n      taxRate: 0,\n      totalAmountPool: new BigNumber(0),\n      sumTaxesOverflow: new BigNumber(0),\n    },\n    poolUnlimited: {\n      raisingAmountPool: new BigNumber(0),\n      offeringAmountPool: new BigNumber(0),\n      limitPerUserInLP: new BigNumber(0),\n      taxRate: 0,\n      totalAmountPool: new BigNumber(0),\n      sumTaxesOverflow: new BigNumber(0),\n    },\n    startBlockNum: 0,\n    endBlockNum: 0,\n    numberPoints: 0,\n  })\n  const { currentBlock } = useBlock()\n  \n  const contract = useIfoV2Contract(address)\n  const [ currentBlock1, setCurrentBlock1 ] = useState<number>(69999);\n\n  useEffect(() => {\n    const fetchProgress = async () => {\n      const [startBlock, endBlock, poolBasic, poolUnlimited, taxRate, numberPoints] = (await makeBatchRequest([\n        contract.methods.startBlock().call,\n        contract.methods.endBlock().call,\n        contract.methods.viewPoolInformation(0).call,\n        contract.methods.viewPoolInformation(1).call,\n        contract.methods.viewPoolTaxRateOverflow(1).call,\n        contract.methods.numberPoints().call,\n      ])) as [string, string, PoolCharacteristics, PoolCharacteristics, number, number]\n\n      const poolBasicFormatted = formatPool(poolBasic)\n      const poolUnlimitedFormatted = formatPool(poolUnlimited)\n\n      const web3 = new Web3('https://bsc-dataseed.binance.org')\n      await web3.eth.getBlockNumber().then(function (result){\n        setCurrentBlock1(result)\n        const startBlockNum = parseInt(startBlock, 10)\n        const endBlockNum = parseInt(endBlock, 10)\n        console.log(currentBlock1)\n        const status = getStatus(currentBlock1, startBlockNum, endBlockNum)\n        const totalBlocks = endBlockNum - startBlockNum\n        const blocksRemaining = endBlockNum - currentBlock1\n\n        // Calculate the total progress until finished or until start\n        const progress =\n        currentBlock1 > startBlockNum\n            ? ((currentBlock1 - startBlockNum) / totalBlocks) * 100\n            : ((currentBlock1 - releaseBlockNumber) / (startBlockNum - releaseBlockNumber)) * 100\n\n        setState((prev) => ({\n          ...prev,\n          secondsUntilEnd: blocksRemaining * BSC_BLOCK_TIME,\n          secondsUntilStart: (startBlockNum - currentBlock1) * BSC_BLOCK_TIME,\n          poolBasic: { ...poolBasicFormatted, taxRate: 0 },\n          poolUnlimited: { ...poolUnlimitedFormatted, taxRate: taxRate / TAX_PRECISION },\n          status,\n          progress,\n          blocksRemaining,\n          startBlockNum,\n          endBlockNum,\n          numberPoints,\n        }))\n      })\n      \n    }\n\n    fetchProgress()\n  }, [contract, currentBlock1, releaseBlockNumber, fastRefresh])\n\n  return { ...state, currencyPriceInUSD: lpTokenPriceInUsd }\n}\n\nexport default useGetPublicIfoData\n"]},"metadata":{},"sourceType":"module"}