{"ast":null,"code":"import BigNumber from 'bignumber.js';\nimport erc20 from 'config/abi/erc20.json';\nimport masterchef3ABI from 'config/abi/masterchef3.json';\nimport multicall from 'utils/multicall';\nimport { getMasterChef3Address } from 'utils/addressHelpers';\nimport farms3Config from 'config/constants/farms3';\nimport { QuoteToken } from '../../config/constants/types';\nconst CHAIN_ID = process.env.REACT_APP_CHAIN_ID;\n\nconst fetchFarms3 = async () => {\n  const data = await Promise.all(farms3Config.map(async farm3Config => {\n    const lpAdress = farm3Config.lpAddresses[CHAIN_ID];\n    const calls = [// Balance of token in the LP contract\n    {\n      address: farm3Config.tokenAddresses[CHAIN_ID],\n      name: 'balanceOf',\n      params: [lpAdress]\n    }, // Balance of quote token on LP contract\n    {\n      address: farm3Config.quoteTokenAdresses[CHAIN_ID],\n      name: 'balanceOf',\n      params: [lpAdress]\n    }, // Balance of LP tokens in the master chef contract\n    {\n      address: farm3Config.isTokenOnly ? farm3Config.tokenAddresses[CHAIN_ID] : lpAdress,\n      name: 'balanceOf',\n      params: [getMasterChef3Address()]\n    }, // Total supply of LP tokens\n    {\n      address: lpAdress,\n      name: 'totalSupply'\n    }, // Token decimals\n    {\n      address: farm3Config.tokenAddresses[CHAIN_ID],\n      name: 'decimals'\n    }, // Quote token decimals\n    {\n      address: farm3Config.quoteTokenAdresses[CHAIN_ID],\n      name: 'decimals'\n    }];\n    const [tokenBalanceLP, quoteTokenBlanceLP, lpTokenBalanceMC, lpTotalSupply, tokenDecimals, quoteTokenDecimals] = await multicall(erc20, calls);\n    let tokenAmount;\n    let lpTotalInQuoteToken;\n    let tokenPriceVsQuote;\n\n    if (farm3Config.isTokenOnly) {\n      tokenAmount = new BigNumber(lpTokenBalanceMC).div(new BigNumber(10).pow(tokenDecimals));\n\n      if (farm3Config.tokenSymbol === QuoteToken.BUSD && farm3Config.quoteTokenSymbol === QuoteToken.BUSD) {\n        tokenPriceVsQuote = new BigNumber(1);\n      } else {\n        tokenPriceVsQuote = new BigNumber(quoteTokenBlanceLP).div(new BigNumber(tokenBalanceLP));\n      }\n\n      lpTotalInQuoteToken = tokenAmount.times(tokenPriceVsQuote);\n    } else {\n      // Ratio in % a LP tokens that are in staking, vs the total number in circulation\n      const lpTokenRatio = new BigNumber(lpTokenBalanceMC).div(new BigNumber(lpTotalSupply)); // Total value in staking in quote token value\n\n      lpTotalInQuoteToken = new BigNumber(quoteTokenBlanceLP).div(new BigNumber(10).pow(18)).times(new BigNumber(2)).times(lpTokenRatio); // Amount of token in the LP that are considered staking (i.e amount of token * lp ratio)\n\n      tokenAmount = new BigNumber(tokenBalanceLP).div(new BigNumber(10).pow(tokenDecimals)).times(lpTokenRatio);\n      const quoteTokenAmount = new BigNumber(quoteTokenBlanceLP).div(new BigNumber(10).pow(quoteTokenDecimals)).times(lpTokenRatio);\n\n      if (tokenAmount.comparedTo(0) > 0) {\n        tokenPriceVsQuote = quoteTokenAmount.div(tokenAmount);\n      } else {\n        tokenPriceVsQuote = new BigNumber(quoteTokenBlanceLP).div(new BigNumber(tokenBalanceLP));\n      }\n    }\n\n    const [info, totalAllocPoint, senzuPerBlock] = await multicall(masterchef3ABI, [{\n      address: getMasterChef3Address(),\n      name: 'poolInfo',\n      params: [farm3Config.pid]\n    }, {\n      address: getMasterChef3Address(),\n      name: 'totalAllocPoint'\n    }, {\n      address: getMasterChef3Address(),\n      name: 'senzuPerBlock'\n    }]);\n    const allocPoint = new BigNumber(info.allocPoint._hex);\n    const poolWeight = allocPoint.div(new BigNumber(totalAllocPoint));\n    return { ...farm3Config,\n      tokenAmount: tokenAmount.toJSON(),\n      // quoteTokenAmount: quoteTokenAmount,\n      lpTotalInQuoteToken: lpTotalInQuoteToken.toJSON(),\n      tokenPriceVsQuote: tokenPriceVsQuote.toJSON(),\n      poolWeight: poolWeight.toNumber(),\n      multiplier: `${allocPoint.div(100).toString()}X`,\n      depositFeeBP: info.depositFeeBP,\n      senzuPerBlock: new BigNumber(senzuPerBlock).toNumber()\n    };\n    console.log(farm3Config, tokenAmount, lpTotalInQuoteToken, tokenPriceVsQuote, poolWeight, senzuPerBlock);\n  }));\n  return data;\n};\n\nexport default fetchFarms3;","map":{"version":3,"sources":["C:/Users/hexia/Desktop/pancake_fork/frontend/src/state/farms3/fetchFarms3.ts"],"names":["BigNumber","erc20","masterchef3ABI","multicall","getMasterChef3Address","farms3Config","QuoteToken","CHAIN_ID","process","env","REACT_APP_CHAIN_ID","fetchFarms3","data","Promise","all","map","farm3Config","lpAdress","lpAddresses","calls","address","tokenAddresses","name","params","quoteTokenAdresses","isTokenOnly","tokenBalanceLP","quoteTokenBlanceLP","lpTokenBalanceMC","lpTotalSupply","tokenDecimals","quoteTokenDecimals","tokenAmount","lpTotalInQuoteToken","tokenPriceVsQuote","div","pow","tokenSymbol","BUSD","quoteTokenSymbol","times","lpTokenRatio","quoteTokenAmount","comparedTo","info","totalAllocPoint","senzuPerBlock","pid","allocPoint","_hex","poolWeight","toJSON","toNumber","multiplier","toString","depositFeeBP","console","log"],"mappings":"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","sourcesContent":["import BigNumber from 'bignumber.js'\nimport erc20 from 'config/abi/erc20.json'\nimport masterchef3ABI from 'config/abi/masterchef3.json'\nimport multicall from 'utils/multicall'\nimport { getMasterChef3Address } from 'utils/addressHelpers'\nimport farms3Config from 'config/constants/farms3'\nimport { QuoteToken } from '../../config/constants/types'\n\nconst CHAIN_ID = process.env.REACT_APP_CHAIN_ID\n\nconst fetchFarms3 = async () => {\n  const data = await Promise.all(\n    farms3Config.map(async (farm3Config) => {\n      const lpAdress = farm3Config.lpAddresses[CHAIN_ID]\n      const calls = [\n        // Balance of token in the LP contract\n        {\n          address: farm3Config.tokenAddresses[CHAIN_ID],\n          name: 'balanceOf',\n          params: [lpAdress],\n        },\n        // Balance of quote token on LP contract\n        {\n          address: farm3Config.quoteTokenAdresses[CHAIN_ID],\n          name: 'balanceOf',\n          params: [lpAdress],\n        },\n        // Balance of LP tokens in the master chef contract\n        {\n          address: farm3Config.isTokenOnly ? farm3Config.tokenAddresses[CHAIN_ID] : lpAdress,\n          name: 'balanceOf',\n          params: [getMasterChef3Address()],\n        },\n        // Total supply of LP tokens\n        {\n          address: lpAdress,\n          name: 'totalSupply',\n        },\n        // Token decimals\n        {\n          address: farm3Config.tokenAddresses[CHAIN_ID],\n          name: 'decimals',\n        },\n        // Quote token decimals\n        {\n          address: farm3Config.quoteTokenAdresses[CHAIN_ID],\n          name: 'decimals',\n        },\n      ]\n\n      const [\n        tokenBalanceLP,\n        quoteTokenBlanceLP,\n        lpTokenBalanceMC,\n        lpTotalSupply,\n        tokenDecimals,\n        quoteTokenDecimals\n      ] = await multicall(erc20, calls)\n\n      let tokenAmount;\n      let lpTotalInQuoteToken;\n      let tokenPriceVsQuote;\n      if(farm3Config.isTokenOnly){\n        tokenAmount = new BigNumber(lpTokenBalanceMC).div(new BigNumber(10).pow(tokenDecimals));\n        if(farm3Config.tokenSymbol === QuoteToken.BUSD && farm3Config.quoteTokenSymbol === QuoteToken.BUSD){\n          tokenPriceVsQuote = new BigNumber(1);\n        }else{\n          tokenPriceVsQuote = new BigNumber(quoteTokenBlanceLP).div(new BigNumber(tokenBalanceLP));\n        }\n        lpTotalInQuoteToken = tokenAmount.times(tokenPriceVsQuote);\n      }else{\n        // Ratio in % a LP tokens that are in staking, vs the total number in circulation\n        const lpTokenRatio = new BigNumber(lpTokenBalanceMC).div(new BigNumber(lpTotalSupply))\n\n        // Total value in staking in quote token value\n        lpTotalInQuoteToken = new BigNumber(quoteTokenBlanceLP)\n          .div(new BigNumber(10).pow(18))\n          .times(new BigNumber(2))\n          .times(lpTokenRatio)\n\n        // Amount of token in the LP that are considered staking (i.e amount of token * lp ratio)\n        tokenAmount = new BigNumber(tokenBalanceLP).div(new BigNumber(10).pow(tokenDecimals)).times(lpTokenRatio)\n        const quoteTokenAmount = new BigNumber(quoteTokenBlanceLP)\n          .div(new BigNumber(10).pow(quoteTokenDecimals))\n          .times(lpTokenRatio)\n\n        if(tokenAmount.comparedTo(0) > 0){\n          tokenPriceVsQuote = quoteTokenAmount.div(tokenAmount);\n        }else{\n          tokenPriceVsQuote = new BigNumber(quoteTokenBlanceLP).div(new BigNumber(tokenBalanceLP));\n        }\n      }\n\n      const [info, totalAllocPoint, senzuPerBlock] = await multicall(masterchef3ABI, [\n        {\n          address: getMasterChef3Address(),\n          name: 'poolInfo',\n          params: [farm3Config.pid],\n        },\n        {\n          address: getMasterChef3Address(),\n          name: 'totalAllocPoint',\n        },\n        {\n          address: getMasterChef3Address(),\n          name: 'senzuPerBlock',\n        },\n      ])\n\n      const allocPoint = new BigNumber(info.allocPoint._hex)\n      const poolWeight = allocPoint.div(new BigNumber(totalAllocPoint))\n\n      return {\n        ...farm3Config,\n        tokenAmount: tokenAmount.toJSON(),\n        // quoteTokenAmount: quoteTokenAmount,\n        lpTotalInQuoteToken: lpTotalInQuoteToken.toJSON(),\n        tokenPriceVsQuote: tokenPriceVsQuote.toJSON(),\n        poolWeight: poolWeight.toNumber(),\n        multiplier: `${allocPoint.div(100).toString()}X`,\n        depositFeeBP: info.depositFeeBP,\n        senzuPerBlock: new BigNumber(senzuPerBlock).toNumber(),\n      }\n      console.log(\n        farm3Config,\n        tokenAmount,\n        lpTotalInQuoteToken,\n        tokenPriceVsQuote,\n        poolWeight,\n        senzuPerBlock,\n      )\n    }),\n  )\n  return data\n}\n\nexport default fetchFarms3\n"]},"metadata":{},"sourceType":"module"}