{"ast":null,"code":"import{Fragment as _Fragment}from\"react/jsx-runtime\";import{jsxs as _jsxs}from\"react/jsx-runtime\";import{jsx as _jsx}from\"react/jsx-runtime\";import React from'react';import{Text,Flex,Box}from'@pancakeswap-libs/uikit';import useI18n from'hooks/useI18n';import{PoolIds}from'config/constants/types';import{getBalanceNumber,formatNumber}from'utils/formatBalance';import{SkeletonCardDetails}from'./Skeletons';var FooterEntry=function FooterEntry(_ref){var label=_ref.label,value=_ref.value;return/*#__PURE__*/_jsxs(Flex,{justifyContent:\"space-between\",alignItems:\"center\",children:[/*#__PURE__*/_jsx(Text,{small:true,color:\"textSubtle\",children:label}),/*#__PURE__*/_jsx(Text,{small:true,textAlign:\"right\",children:value})]});};var IfoCardDetails=function IfoCardDetails(_ref2){var poolId=_ref2.poolId,ifo=_ref2.ifo,publicIfoData=_ref2.publicIfoData;var TranslateString=useI18n();var status=publicIfoData.status,currencyPriceInUSD=publicIfoData.currencyPriceInUSD;var poolCharacteristic=publicIfoData[poolId];/* Format start */var maxLpTokens=getBalanceNumber(poolCharacteristic.limitPerUserInLP,ifo.currency.decimals);var taxRate=\"\".concat(poolCharacteristic.taxRate,\"%\");var totalCommittedPercent=poolCharacteristic.totalAmountPool.div(poolCharacteristic.raisingAmountPool).times(100).toFixed(2);var totalLPCommitted=getBalanceNumber(poolCharacteristic.totalAmountPool,ifo.currency.decimals);var totalLPCommittedInUSD=currencyPriceInUSD.times(totalLPCommitted);var totalCommitted=\"~$\".concat(formatNumber(totalLPCommittedInUSD.toNumber()),\" (\").concat(totalCommittedPercent,\"%)\");/* Format end */var renderBasedOnIfoSttatus=function renderBasedOnIfoSttatus(){if(status==='coming_soon'){return/*#__PURE__*/_jsxs(_Fragment,{children:[poolId===PoolIds.poolBasic&&/*#__PURE__*/_jsx(FooterEntry,{label:TranslateString(999,'Max. LP token entry'),value:maxLpTokens}),/*#__PURE__*/_jsx(FooterEntry,{label:TranslateString(999,'Funds to raise:'),value:ifo[poolId].raiseAmount}),/*#__PURE__*/_jsx(FooterEntry,{label:TranslateString(999,'DBALL to burn:'),value:ifo[poolId].cakeToBurn}),/*#__PURE__*/_jsx(FooterEntry,{label:\"Price per \".concat(ifo.token.symbol,\": \"),value:\"$\".concat(ifo.tokenOfferingPrice)})]});}if(status==='live'){return/*#__PURE__*/_jsxs(_Fragment,{children:[poolId===PoolIds.poolBasic&&/*#__PURE__*/_jsx(FooterEntry,{label:TranslateString(999,'Max. LP token entry'),value:maxLpTokens}),poolId===PoolIds.poolUnlimited&&/*#__PURE__*/_jsx(FooterEntry,{label:TranslateString(999,'Additional fee:'),value:taxRate}),/*#__PURE__*/_jsx(FooterEntry,{label:TranslateString(999,'Total committed:'),value:totalCommitted})]});}if(status==='finished'){return/*#__PURE__*/_jsxs(_Fragment,{children:[poolId===PoolIds.poolBasic&&/*#__PURE__*/_jsx(FooterEntry,{label:TranslateString(999,'Max. LP token entry'),value:maxLpTokens}),poolId===PoolIds.poolUnlimited&&/*#__PURE__*/_jsx(FooterEntry,{label:TranslateString(999,'Additional fee:'),value:taxRate}),/*#__PURE__*/_jsx(FooterEntry,{label:TranslateString(999,'Total committed:'),value:totalCommitted}),/*#__PURE__*/_jsx(FooterEntry,{label:TranslateString(999,'Funds to raise:'),value:ifo[poolId].raiseAmount}),/*#__PURE__*/_jsx(FooterEntry,{label:TranslateString(999,'DBALL to burn:'),value:ifo[poolId].cakeToBurn}),/*#__PURE__*/_jsx(FooterEntry,{label:\"Price per \".concat(ifo.token.symbol,\": \"),value:\"$\".concat(ifo.tokenOfferingPrice?ifo.tokenOfferingPrice:'?')})]});}return/*#__PURE__*/_jsx(SkeletonCardDetails,{});};return/*#__PURE__*/_jsx(Box,{paddingTop:\"24px\",children:renderBasedOnIfoSttatus()});};export default IfoCardDetails;","map":{"version":3,"sources":["D:/task159/frontend/src/views/Ifos/components/IfoFoldableCard/IfoPoolCard/IfoCardDetails.tsx"],"names":["React","Text","Flex","Box","useI18n","PoolIds","getBalanceNumber","formatNumber","SkeletonCardDetails","FooterEntry","label","value","IfoCardDetails","poolId","ifo","publicIfoData","TranslateString","status","currencyPriceInUSD","poolCharacteristic","maxLpTokens","limitPerUserInLP","currency","decimals","taxRate","totalCommittedPercent","totalAmountPool","div","raisingAmountPool","times","toFixed","totalLPCommitted","totalLPCommittedInUSD","totalCommitted","toNumber","renderBasedOnIfoSttatus","poolBasic","raiseAmount","cakeToBurn","token","symbol","tokenOfferingPrice","poolUnlimited"],"mappings":"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","sourcesContent":["import React from 'react'\nimport { PublicIfoData } from 'hooks/ifo/types'\nimport { Text, Flex, Box } from '@pancakeswap-libs/uikit'\nimport useI18n from 'hooks/useI18n'\nimport { Ifo, PoolIds } from 'config/constants/types'\nimport { getBalanceNumber, formatNumber } from 'utils/formatBalance'\nimport { SkeletonCardDetails } from './Skeletons'\n\nexport interface IfoCardDetailsProps {\n  poolId: PoolIds\n  ifo: Ifo\n  publicIfoData: PublicIfoData\n}\n\nexport interface FooterEntryProps {\n  label: string\n  value: string | number\n}\n\nconst FooterEntry: React.FC<FooterEntryProps> = ({ label, value }) => {\n  return (\n    <Flex justifyContent=\"space-between\" alignItems=\"center\">\n      <Text small color=\"textSubtle\">\n        {label}\n      </Text>\n      <Text small textAlign=\"right\">\n        {value}\n      </Text>\n    </Flex>\n  )\n}\n\nconst IfoCardDetails: React.FC<IfoCardDetailsProps> = ({ poolId, ifo, publicIfoData }) => {\n  const TranslateString = useI18n()\n  const { status, currencyPriceInUSD } = publicIfoData\n  const poolCharacteristic = publicIfoData[poolId]\n\n  /* Format start */\n  const maxLpTokens = getBalanceNumber(poolCharacteristic.limitPerUserInLP, ifo.currency.decimals)\n  const taxRate = `${poolCharacteristic.taxRate}%`\n\n  const totalCommittedPercent = poolCharacteristic.totalAmountPool\n    .div(poolCharacteristic.raisingAmountPool)\n    .times(100)\n    .toFixed(2)\n  const totalLPCommitted = getBalanceNumber(poolCharacteristic.totalAmountPool, ifo.currency.decimals)\n  const totalLPCommittedInUSD = currencyPriceInUSD.times(totalLPCommitted)\n  const totalCommitted = `~$${formatNumber(totalLPCommittedInUSD.toNumber())} (${totalCommittedPercent}%)`\n\n  /* Format end */\n\n  const renderBasedOnIfoSttatus = () => {\n    if (status === 'coming_soon') {\n      return (\n        <>\n          {poolId === PoolIds.poolBasic && (\n            <FooterEntry label={TranslateString(999, 'Max. LP token entry')} value={maxLpTokens} />\n          )}\n          <FooterEntry label={TranslateString(999, 'Funds to raise:')} value={ifo[poolId].raiseAmount} />\n          <FooterEntry label={TranslateString(999, 'DBALL to burn:')} value={ifo[poolId].cakeToBurn} />\n          <FooterEntry label={`Price per ${ifo.token.symbol}: `} value={`$${ifo.tokenOfferingPrice}`} />\n        </>\n      )\n    }\n    if (status === 'live') {\n      return (\n        <>\n          {poolId === PoolIds.poolBasic && (\n            <FooterEntry label={TranslateString(999, 'Max. LP token entry')} value={maxLpTokens} />\n          )}\n          {poolId === PoolIds.poolUnlimited && (\n            <FooterEntry label={TranslateString(999, 'Additional fee:')} value={taxRate} />\n          )}\n          <FooterEntry label={TranslateString(999, 'Total committed:')} value={totalCommitted} />\n        </>\n      )\n    }\n    if (status === 'finished') {\n      return (\n        <>\n          {poolId === PoolIds.poolBasic && (\n            <FooterEntry label={TranslateString(999, 'Max. LP token entry')} value={maxLpTokens} />\n          )}\n          {poolId === PoolIds.poolUnlimited && (\n            <FooterEntry label={TranslateString(999, 'Additional fee:')} value={taxRate} />\n          )}\n          <FooterEntry label={TranslateString(999, 'Total committed:')} value={totalCommitted} />\n          <FooterEntry label={TranslateString(999, 'Funds to raise:')} value={ifo[poolId].raiseAmount} />\n          <FooterEntry label={TranslateString(999, 'DBALL to burn:')} value={ifo[poolId].cakeToBurn} />\n          <FooterEntry\n            label={`Price per ${ifo.token.symbol}: `}\n            value={`$${ifo.tokenOfferingPrice ? ifo.tokenOfferingPrice : '?'}`}\n          />\n        </>\n      )\n    }\n    return <SkeletonCardDetails />\n  }\n\n  return <Box paddingTop=\"24px\">{renderBasedOnIfoSttatus()}</Box>\n}\n\nexport default IfoCardDetails\n"]},"metadata":{},"sourceType":"module"}