{"ast":null,"code":"import { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nvar _jsxFileName = \"C:\\\\Users\\\\hexia\\\\Desktop\\\\pancake_fork\\\\frontend\\\\src\\\\views\\\\Ifos\\\\components\\\\IfoFoldableCard\\\\IfoPoolCard\\\\IfoCardDetails.tsx\",\n    _s = $RefreshSig$();\n\nimport React from 'react';\nimport { Text, Flex, Box } from '@pancakeswap-libs/uikit';\nimport useI18n from 'hooks/useI18n';\nimport { PoolIds } from 'config/constants/types';\nimport { getBalanceNumber, formatNumber } from 'utils/formatBalance';\nimport { SkeletonCardDetails } from './Skeletons';\n\nconst FooterEntry = ({\n  label,\n  value\n}) => {\n  return /*#__PURE__*/_jsxDEV(Flex, {\n    justifyContent: \"space-between\",\n    alignItems: \"center\",\n    children: [/*#__PURE__*/_jsxDEV(Text, {\n      small: true,\n      color: \"textSubtle\",\n      children: label\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 23,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Text, {\n      small: true,\n      textAlign: \"right\",\n      children: value\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 26,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 22,\n    columnNumber: 5\n  }, this);\n};\n\n_c = FooterEntry;\n\nconst IfoCardDetails = ({\n  poolId,\n  ifo,\n  publicIfoData\n}) => {\n  _s();\n\n  const TranslateString = useI18n();\n  const {\n    status,\n    currencyPriceInUSD\n  } = publicIfoData;\n  const poolCharacteristic = publicIfoData[poolId];\n  /* Format start */\n\n  const maxLpTokens = getBalanceNumber(poolCharacteristic.limitPerUserInLP, ifo.currency.decimals);\n  const taxRate = `${poolCharacteristic.taxRate}%`;\n  const totalCommittedPercent = poolCharacteristic.totalAmountPool.div(poolCharacteristic.raisingAmountPool).times(100).toFixed(2);\n  const totalLPCommitted = getBalanceNumber(poolCharacteristic.totalAmountPool, ifo.currency.decimals);\n  const totalLPCommittedInUSD = currencyPriceInUSD.times(totalLPCommitted);\n  const totalCommitted = `~$${formatNumber(totalLPCommittedInUSD.toNumber())} (${totalCommittedPercent}%)`;\n  /* Format end */\n\n  const renderBasedOnIfoSttatus = () => {\n    if (status === 'coming_soon') {\n      return /*#__PURE__*/_jsxDEV(_Fragment, {\n        children: [poolId === PoolIds.poolBasic && /*#__PURE__*/_jsxDEV(FooterEntry, {\n          label: TranslateString(999, 'Max. LP token entry'),\n          value: maxLpTokens\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 57,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(FooterEntry, {\n          label: TranslateString(999, 'Funds to raise:'),\n          value: ifo[poolId].raiseAmount\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 59,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(FooterEntry, {\n          label: TranslateString(999, 'DBALL to burn:'),\n          value: ifo[poolId].cakeToBurn\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 60,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(FooterEntry, {\n          label: `Price per ${ifo.token.symbol}: `,\n          value: `$${ifo.tokenOfferingPrice}`\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 61,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true);\n    }\n\n    if (status === 'live') {\n      return /*#__PURE__*/_jsxDEV(_Fragment, {\n        children: [poolId === PoolIds.poolBasic && /*#__PURE__*/_jsxDEV(FooterEntry, {\n          label: TranslateString(999, 'Max. LP token entry'),\n          value: maxLpTokens\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 69,\n          columnNumber: 13\n        }, this), poolId === PoolIds.poolUnlimited && /*#__PURE__*/_jsxDEV(FooterEntry, {\n          label: TranslateString(999, 'Additional fee:'),\n          value: taxRate\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 72,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(FooterEntry, {\n          label: TranslateString(999, 'Total committed:'),\n          value: totalCommitted\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 74,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true);\n    }\n\n    if (status === 'finished') {\n      return /*#__PURE__*/_jsxDEV(_Fragment, {\n        children: [poolId === PoolIds.poolBasic && /*#__PURE__*/_jsxDEV(FooterEntry, {\n          label: TranslateString(999, 'Max. LP token entry'),\n          value: maxLpTokens\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 82,\n          columnNumber: 13\n        }, this), poolId === PoolIds.poolUnlimited && /*#__PURE__*/_jsxDEV(FooterEntry, {\n          label: TranslateString(999, 'Additional fee:'),\n          value: taxRate\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 85,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(FooterEntry, {\n          label: TranslateString(999, 'Total committed:'),\n          value: totalCommitted\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 87,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(FooterEntry, {\n          label: TranslateString(999, 'Funds to raise:'),\n          value: ifo[poolId].raiseAmount\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 88,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(FooterEntry, {\n          label: TranslateString(999, 'DBALL to burn:'),\n          value: ifo[poolId].cakeToBurn\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 89,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(FooterEntry, {\n          label: `Price per ${ifo.token.symbol}: `,\n          value: `$${ifo.tokenOfferingPrice ? ifo.tokenOfferingPrice : '?'}`\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 90,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true);\n    }\n\n    return /*#__PURE__*/_jsxDEV(SkeletonCardDetails, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 97,\n      columnNumber: 12\n    }, this);\n  };\n\n  return /*#__PURE__*/_jsxDEV(Box, {\n    paddingTop: \"24px\",\n    children: renderBasedOnIfoSttatus()\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 100,\n    columnNumber: 10\n  }, this);\n};\n\n_s(IfoCardDetails, \"SC/Zc+rnUQSfBje7TuuyRy0lI/g=\", false, function () {\n  return [useI18n];\n});\n\n_c2 = IfoCardDetails;\nexport default IfoCardDetails;\n\nvar _c, _c2;\n\n$RefreshReg$(_c, \"FooterEntry\");\n$RefreshReg$(_c2, \"IfoCardDetails\");","map":{"version":3,"sources":["C:/Users/hexia/Desktop/pancake_fork/frontend/src/views/Ifos/components/IfoFoldableCard/IfoPoolCard/IfoCardDetails.tsx"],"names":["React","Text","Flex","Box","useI18n","PoolIds","getBalanceNumber","formatNumber","SkeletonCardDetails","FooterEntry","label","value","IfoCardDetails","poolId","ifo","publicIfoData","TranslateString","status","currencyPriceInUSD","poolCharacteristic","maxLpTokens","limitPerUserInLP","currency","decimals","taxRate","totalCommittedPercent","totalAmountPool","div","raisingAmountPool","times","toFixed","totalLPCommitted","totalLPCommittedInUSD","totalCommitted","toNumber","renderBasedOnIfoSttatus","poolBasic","raiseAmount","cakeToBurn","token","symbol","tokenOfferingPrice","poolUnlimited"],"mappings":"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","sourcesContent":["import React from 'react'\nimport { PublicIfoData } from 'hooks/ifo/types'\nimport { Text, Flex, Box } from '@pancakeswap-libs/uikit'\nimport useI18n from 'hooks/useI18n'\nimport { Ifo, PoolIds } from 'config/constants/types'\nimport { getBalanceNumber, formatNumber } from 'utils/formatBalance'\nimport { SkeletonCardDetails } from './Skeletons'\n\nexport interface IfoCardDetailsProps {\n  poolId: PoolIds\n  ifo: Ifo\n  publicIfoData: PublicIfoData\n}\n\nexport interface FooterEntryProps {\n  label: string\n  value: string | number\n}\n\nconst FooterEntry: React.FC<FooterEntryProps> = ({ label, value }) => {\n  return (\n    <Flex justifyContent=\"space-between\" alignItems=\"center\">\n      <Text small color=\"textSubtle\">\n        {label}\n      </Text>\n      <Text small textAlign=\"right\">\n        {value}\n      </Text>\n    </Flex>\n  )\n}\n\nconst IfoCardDetails: React.FC<IfoCardDetailsProps> = ({ poolId, ifo, publicIfoData }) => {\n  const TranslateString = useI18n()\n  const { status, currencyPriceInUSD } = publicIfoData\n  const poolCharacteristic = publicIfoData[poolId]\n\n  /* Format start */\n  const maxLpTokens = getBalanceNumber(poolCharacteristic.limitPerUserInLP, ifo.currency.decimals)\n  const taxRate = `${poolCharacteristic.taxRate}%`\n\n  const totalCommittedPercent = poolCharacteristic.totalAmountPool\n    .div(poolCharacteristic.raisingAmountPool)\n    .times(100)\n    .toFixed(2)\n  const totalLPCommitted = getBalanceNumber(poolCharacteristic.totalAmountPool, ifo.currency.decimals)\n  const totalLPCommittedInUSD = currencyPriceInUSD.times(totalLPCommitted)\n  const totalCommitted = `~$${formatNumber(totalLPCommittedInUSD.toNumber())} (${totalCommittedPercent}%)`\n\n  /* Format end */\n\n  const renderBasedOnIfoSttatus = () => {\n    if (status === 'coming_soon') {\n      return (\n        <>\n          {poolId === PoolIds.poolBasic && (\n            <FooterEntry label={TranslateString(999, 'Max. LP token entry')} value={maxLpTokens} />\n          )}\n          <FooterEntry label={TranslateString(999, 'Funds to raise:')} value={ifo[poolId].raiseAmount} />\n          <FooterEntry label={TranslateString(999, 'DBALL to burn:')} value={ifo[poolId].cakeToBurn} />\n          <FooterEntry label={`Price per ${ifo.token.symbol}: `} value={`$${ifo.tokenOfferingPrice}`} />\n        </>\n      )\n    }\n    if (status === 'live') {\n      return (\n        <>\n          {poolId === PoolIds.poolBasic && (\n            <FooterEntry label={TranslateString(999, 'Max. LP token entry')} value={maxLpTokens} />\n          )}\n          {poolId === PoolIds.poolUnlimited && (\n            <FooterEntry label={TranslateString(999, 'Additional fee:')} value={taxRate} />\n          )}\n          <FooterEntry label={TranslateString(999, 'Total committed:')} value={totalCommitted} />\n        </>\n      )\n    }\n    if (status === 'finished') {\n      return (\n        <>\n          {poolId === PoolIds.poolBasic && (\n            <FooterEntry label={TranslateString(999, 'Max. LP token entry')} value={maxLpTokens} />\n          )}\n          {poolId === PoolIds.poolUnlimited && (\n            <FooterEntry label={TranslateString(999, 'Additional fee:')} value={taxRate} />\n          )}\n          <FooterEntry label={TranslateString(999, 'Total committed:')} value={totalCommitted} />\n          <FooterEntry label={TranslateString(999, 'Funds to raise:')} value={ifo[poolId].raiseAmount} />\n          <FooterEntry label={TranslateString(999, 'DBALL to burn:')} value={ifo[poolId].cakeToBurn} />\n          <FooterEntry\n            label={`Price per ${ifo.token.symbol}: `}\n            value={`$${ifo.tokenOfferingPrice ? ifo.tokenOfferingPrice : '?'}`}\n          />\n        </>\n      )\n    }\n    return <SkeletonCardDetails />\n  }\n\n  return <Box paddingTop=\"24px\">{renderBasedOnIfoSttatus()}</Box>\n}\n\nexport default IfoCardDetails\n"]},"metadata":{},"sourceType":"module"}