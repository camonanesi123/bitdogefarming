{"ast":null,"code":"import _regeneratorRuntime from\"D:/task159/frontend/node_modules/babel-preset-react-app/node_modules/@babel/runtime/regenerator\";import _asyncToGenerator from\"D:/task159/frontend/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/asyncToGenerator\";import _objectSpread from\"D:/task159/frontend/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/objectSpread2\";import _defineProperty from\"D:/task159/frontend/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/defineProperty\";import _slicedToArray from\"D:/task159/frontend/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/slicedToArray\";import{useEffect,useState}from'react';import BigNumber from'bignumber.js';import{PoolIds}from'config/constants/types';import{useERC20,useIfoV1Contract}from'hooks/useContract';import{useIfoAllowance}from'hooks/useAllowance';import makeBatchRequest from'utils/makeBatchRequest';import{getAddress}from'utils/addressHelpers';import{useWallet}from'@binance-chain/bsc-use-wallet';/**\n * Gets all data from an IFO related to a wallet\n */var useGetWalletIfoData=function useGetWalletIfoData(ifo){var _useState=useState(_defineProperty({},PoolIds.poolUnlimited,{amountTokenCommittedInLP:new BigNumber(0),hasClaimed:false,isPendingTx:false,offeringAmountInToken:new BigNumber(0),refundingAmountInLP:new BigNumber(0),taxAmountInLP:new BigNumber(0)// Not used\n})),_useState2=_slicedToArray(_useState,2),state=_useState2[0],setState=_useState2[1];var address=ifo.address,currency=ifo.currency;var poolUnlimited=state.poolUnlimited;// const { account } = useWeb3React()\nvar _useWallet=useWallet(),account=_useWallet.account;var contract=useIfoV1Contract(address);var currencyContract=useERC20(getAddress(currency.address));var allowance=useIfoAllowance(currencyContract,address,poolUnlimited.isPendingTx);var setPendingTx=function setPendingTx(status){return setState(function(prevState){return _defineProperty({},PoolIds.poolUnlimited,_objectSpread(_objectSpread({},prevState.poolUnlimited),{},{isPendingTx:status}));});};var setIsClaimed=function setIsClaimed(){setState(function(prevState){return _defineProperty({},PoolIds.poolUnlimited,_objectSpread(_objectSpread({},prevState.poolUnlimited),{},{hasClaimed:true}));});};useEffect(function(){var fetchIfoData=/*#__PURE__*/function(){var _ref3=_asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee(){var _ref4,_ref5,offeringAmount,userInfoResponse,refundingAmount;return _regeneratorRuntime.wrap(function _callee$(_context){while(1){switch(_context.prev=_context.next){case 0:_context.next=2;return makeBatchRequest([contract.methods.getOfferingAmount(account).call,contract.methods.userInfo(account).call,contract.methods.getRefundingAmount(account).call]);case 2:_ref4=_context.sent;_ref5=_slicedToArray(_ref4,3);offeringAmount=_ref5[0];userInfoResponse=_ref5[1];refundingAmount=_ref5[2];setState(function(prevState){return _defineProperty({},PoolIds.poolUnlimited,_objectSpread(_objectSpread({},prevState.poolUnlimited),{},{amountTokenCommittedInLP:new BigNumber(userInfoResponse.amount),hasClaimed:userInfoResponse.claimed,offeringAmountInToken:new BigNumber(offeringAmount),refundingAmountInLP:new BigNumber(refundingAmount)}));});case 8:case\"end\":return _context.stop();}}},_callee);}));return function fetchIfoData(){return _ref3.apply(this,arguments);};}();if(account){fetchIfoData();}},[account,contract,setState]);return _objectSpread(_objectSpread({},state),{},{allowance:allowance,contract:contract,setPendingTx:setPendingTx,addUserContributedAmount:function addUserContributedAmount(){return null;},setIsClaimed:setIsClaimed});};export default useGetWalletIfoData;","map":{"version":3,"sources":["D:/task159/frontend/src/hooks/ifo/v1/useGetWalletIfoData.ts"],"names":["useEffect","useState","BigNumber","PoolIds","useERC20","useIfoV1Contract","useIfoAllowance","makeBatchRequest","getAddress","useWallet","useGetWalletIfoData","ifo","poolUnlimited","amountTokenCommittedInLP","hasClaimed","isPendingTx","offeringAmountInToken","refundingAmountInLP","taxAmountInLP","state","setState","address","currency","account","contract","currencyContract","allowance","setPendingTx","status","prevState","setIsClaimed","fetchIfoData","methods","getOfferingAmount","call","userInfo","getRefundingAmount","offeringAmount","userInfoResponse","refundingAmount","amount","claimed","addUserContributedAmount"],"mappings":"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","sourcesContent":["import { useEffect, useState } from 'react'\nimport { useWeb3React } from '@web3-react/core'\nimport BigNumber from 'bignumber.js'\nimport { Ifo, PoolIds } from 'config/constants/types'\nimport { useERC20, useIfoV1Contract } from 'hooks/useContract'\nimport { useIfoAllowance } from 'hooks/useAllowance'\nimport makeBatchRequest from 'utils/makeBatchRequest'\nimport { getAddress } from 'utils/addressHelpers'\nimport { useWallet } from '@binance-chain/bsc-use-wallet'\nimport { WalletIfoState, WalletIfoData } from '../types'\n\n\ninterface UserInfo {\n  amount: BigNumber\n  claimed: boolean\n}\n\n/**\n * Gets all data from an IFO related to a wallet\n */\nconst useGetWalletIfoData = (ifo: Ifo): WalletIfoData => {\n  const [state, setState] = useState<WalletIfoState>({\n    [PoolIds.poolUnlimited]: {\n      amountTokenCommittedInLP: new BigNumber(0),\n      hasClaimed: false,\n      isPendingTx: false,\n      offeringAmountInToken: new BigNumber(0),\n      refundingAmountInLP: new BigNumber(0),\n      taxAmountInLP: new BigNumber(0), // Not used\n    },\n  })\n\n  const { address, currency } = ifo\n  const { poolUnlimited } = state\n\n  // const { account } = useWeb3React()\n  const { account } = useWallet()\n  const contract = useIfoV1Contract(address)\n  const currencyContract = useERC20(getAddress(currency.address))\n  const allowance = useIfoAllowance(currencyContract, address, poolUnlimited.isPendingTx)\n\n  const setPendingTx = (status: boolean) =>\n    setState((prevState) => ({\n      [PoolIds.poolUnlimited]: {\n        ...prevState.poolUnlimited,\n        isPendingTx: status,\n      },\n    }))\n\n  const setIsClaimed = () => {\n    setState((prevState) => ({\n      [PoolIds.poolUnlimited]: {\n        ...prevState.poolUnlimited,\n        hasClaimed: true,\n      },\n    }))\n  }\n\n  useEffect(() => {\n    const fetchIfoData = async () => {\n      const [offeringAmount, userInfoResponse, refundingAmount] = (await makeBatchRequest([\n        contract.methods.getOfferingAmount(account).call,\n        contract.methods.userInfo(account).call,\n        contract.methods.getRefundingAmount(account).call,\n      ])) as [string, UserInfo, string]\n\n      setState((prevState) => ({\n        [PoolIds.poolUnlimited]: {\n          ...prevState.poolUnlimited,\n          amountTokenCommittedInLP: new BigNumber(userInfoResponse.amount),\n          hasClaimed: userInfoResponse.claimed,\n          offeringAmountInToken: new BigNumber(offeringAmount),\n          refundingAmountInLP: new BigNumber(refundingAmount),\n        },\n      }))\n    }\n\n    if (account) {\n      fetchIfoData()\n    }\n  }, [account, contract, setState])\n\n  return { ...state, allowance, contract, setPendingTx, addUserContributedAmount: () => null, setIsClaimed }\n}\n\nexport default useGetWalletIfoData\n"]},"metadata":{},"sourceType":"module"}