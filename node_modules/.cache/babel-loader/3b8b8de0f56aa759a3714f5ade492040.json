{"ast":null,"code":"import{Fragment as _Fragment}from\"react/jsx-runtime\";import{jsxs as _jsxs}from\"react/jsx-runtime\";import{jsx as _jsx}from\"react/jsx-runtime\";import _regeneratorRuntime from\"D:/task159/frontend/node_modules/babel-preset-react-app/node_modules/@babel/runtime/regenerator\";import _asyncToGenerator from\"D:/task159/frontend/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/asyncToGenerator\";import _slicedToArray from\"D:/task159/frontend/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/slicedToArray\";import React,{useState}from'react';import BigNumber from'bignumber.js';import{Card,CardBody,Heading,Text}from'@pancakeswap-libs/uikit';import useI18n from'hooks/useI18n';import useApproveConfirmTransaction from'hooks/useApproveConfirmTransaction';import{useCake,useBunnyFactory}from'hooks/useContract';import useHasCakeBalance from'hooks/useHasCakeBalance';import nftList from'config/constants/nfts';import{useWallet}from'@binance-chain/bsc-use-wallet';import SelectionCard from'../components/SelectionCard';import NextStepButton from'../components/NextStepButton';import ApproveConfirmButtons from'../components/ApproveConfirmButtons';import useProfileCreation from'./contexts/hook';import{MINT_COST,STARTER_BUNNY_IDENTIFIERS}from'./config';var nfts=nftList.filter(function(nft){return STARTER_BUNNY_IDENTIFIERS.includes(nft.identifier);});var minimumCakeBalanceToMint=new BigNumber(MINT_COST).multipliedBy(new BigNumber(10).pow(18));var Mint=function Mint(){var _useState=useState(null),_useState2=_slicedToArray(_useState,2),variationId=_useState2[0],setVariationId=_useState2[1];var _useProfileCreation=useProfileCreation(),actions=_useProfileCreation.actions,minimumCakeRequired=_useProfileCreation.minimumCakeRequired,allowance=_useProfileCreation.allowance;var _useWallet=useWallet(),account=_useWallet.account;var cakeContract=useCake();var bunnyFactoryContract=useBunnyFactory();var TranslateString=useI18n();var hasMinimumCakeRequired=useHasCakeBalance(minimumCakeBalanceToMint);var _useApproveConfirmTra=useApproveConfirmTransaction({onRequiresApproval:function(){var _onRequiresApproval=_asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee(){var response,currentAllowance;return _regeneratorRuntime.wrap(function _callee$(_context){while(1){switch(_context.prev=_context.next){case 0:_context.prev=0;_context.next=3;return cakeContract.methods.allowance(account,bunnyFactoryContract.options.address).call();case 3:response=_context.sent;currentAllowance=new BigNumber(response);return _context.abrupt(\"return\",currentAllowance.gte(minimumCakeRequired));case 8:_context.prev=8;_context.t0=_context[\"catch\"](0);return _context.abrupt(\"return\",false);case 11:case\"end\":return _context.stop();}}},_callee,null,[[0,8]]);}));function onRequiresApproval(){return _onRequiresApproval.apply(this,arguments);}return onRequiresApproval;}(),onApprove:function onApprove(){return cakeContract.methods.approve(bunnyFactoryContract.options.address,allowance.toJSON()).send({from:account});},onConfirm:function onConfirm(){return bunnyFactoryContract.methods.mintNFT(variationId).send({from:account});},onSuccess:function onSuccess(){return actions.nextStep();}}),isApproving=_useApproveConfirmTra.isApproving,isApproved=_useApproveConfirmTra.isApproved,isConfirmed=_useApproveConfirmTra.isConfirmed,isConfirming=_useApproveConfirmTra.isConfirming,handleApprove=_useApproveConfirmTra.handleApprove,handleConfirm=_useApproveConfirmTra.handleConfirm;return/*#__PURE__*/_jsxs(_Fragment,{children:[/*#__PURE__*/_jsx(Text,{fontSize:\"20px\",color:\"textSubtle\",bold:true,children:TranslateString(999,\"Step \".concat(1))}),/*#__PURE__*/_jsx(Heading,{as:\"h3\",size:\"xl\",mb:\"24px\",children:TranslateString(776,'Get Starter Collectible')}),/*#__PURE__*/_jsx(Text,{as:\"p\",children:TranslateString(786,'Every profile starts by making a “starter” collectible (NFT).')}),/*#__PURE__*/_jsx(Text,{as:\"p\",children:TranslateString(788,'This starter will also become your first profile picture.')}),/*#__PURE__*/_jsx(Text,{as:\"p\",mb:\"24px\",children:TranslateString(790,'You can change your profile pic later if you get another approved Pancake Collectible.')}),/*#__PURE__*/_jsx(Card,{mb:\"24px\",children:/*#__PURE__*/_jsxs(CardBody,{children:[/*#__PURE__*/_jsx(Heading,{as:\"h4\",size:\"lg\",mb:\"8px\",children:TranslateString(792,'Choose your Starter!')}),/*#__PURE__*/_jsx(Text,{as:\"p\",color:\"textSubtle\",children:TranslateString(794,'Choose wisely: you can only ever make one starter collectible!')}),/*#__PURE__*/_jsx(Text,{as:\"p\",mb:\"24px\",color:\"textSubtle\",children:TranslateString(999,\"Cost: \".concat(MINT_COST,\" DBALL\"),{num:MINT_COST})}),nfts.map(function(nft){var handleChange=function handleChange(value){return setVariationId(Number(value));};return/*#__PURE__*/_jsx(SelectionCard,{name:\"mintStarter\",value:nft.variationId,image:\"/images/nfts/\".concat(nft.images.md),isChecked:variationId===nft.variationId,onChange:handleChange,disabled:isApproving||isConfirming||isConfirmed||!hasMinimumCakeRequired,children:/*#__PURE__*/_jsx(Text,{bold:true,children:nft.name})},nft.identifier);}),!hasMinimumCakeRequired&&/*#__PURE__*/_jsx(Text,{color:\"failure\",mb:\"16px\",children:TranslateString(1098,\"A minimum of \".concat(MINT_COST,\" DBALL is required\"))}),/*#__PURE__*/_jsx(ApproveConfirmButtons,{isApproveDisabled:variationId===null||isConfirmed||isConfirming||isApproved,isApproving:isApproving,isConfirmDisabled:!isApproved||isConfirmed||!hasMinimumCakeRequired,isConfirming:isConfirming,onApprove:handleApprove,onConfirm:handleConfirm})]})}),/*#__PURE__*/_jsx(NextStepButton,{onClick:actions.nextStep,disabled:!isConfirmed,children:TranslateString(798,'Next Step')})]});};export default Mint;","map":{"version":3,"sources":["D:/task159/frontend/src/views/Profile/ProfileCreation/Mint.tsx"],"names":["React","useState","BigNumber","Card","CardBody","Heading","Text","useI18n","useApproveConfirmTransaction","useCake","useBunnyFactory","useHasCakeBalance","nftList","useWallet","SelectionCard","NextStepButton","ApproveConfirmButtons","useProfileCreation","MINT_COST","STARTER_BUNNY_IDENTIFIERS","nfts","filter","nft","includes","identifier","minimumCakeBalanceToMint","multipliedBy","pow","Mint","variationId","setVariationId","actions","minimumCakeRequired","allowance","account","cakeContract","bunnyFactoryContract","TranslateString","hasMinimumCakeRequired","onRequiresApproval","methods","options","address","call","response","currentAllowance","gte","onApprove","approve","toJSON","send","from","onConfirm","mintNFT","onSuccess","nextStep","isApproving","isApproved","isConfirmed","isConfirming","handleApprove","handleConfirm","num","map","handleChange","value","Number","images","md","name"],"mappings":"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","sourcesContent":["import React, { useState } from 'react'\nimport BigNumber from 'bignumber.js'\nimport { Card, CardBody, Heading, Text } from '@pancakeswap-libs/uikit'\nimport { useWeb3React } from '@web3-react/core'\nimport useI18n from 'hooks/useI18n'\nimport useApproveConfirmTransaction from 'hooks/useApproveConfirmTransaction'\nimport { useCake, useBunnyFactory } from 'hooks/useContract'\nimport { Nft } from 'config/constants/types'\nimport useHasCakeBalance from 'hooks/useHasCakeBalance'\nimport nftList from 'config/constants/nfts'\nimport { useWallet } from '@binance-chain/bsc-use-wallet'\nimport SelectionCard from '../components/SelectionCard'\nimport NextStepButton from '../components/NextStepButton'\nimport ApproveConfirmButtons from '../components/ApproveConfirmButtons'\nimport useProfileCreation from './contexts/hook'\nimport { MINT_COST, STARTER_BUNNY_IDENTIFIERS } from './config'\n\nconst nfts = nftList.filter((nft) => STARTER_BUNNY_IDENTIFIERS.includes(nft.identifier))\nconst minimumCakeBalanceToMint = new BigNumber(MINT_COST).multipliedBy(new BigNumber(10).pow(18))\n\nconst Mint: React.FC = () => {\n  const [variationId, setVariationId] = useState<Nft['variationId']>(null)\n  const { actions, minimumCakeRequired, allowance } = useProfileCreation()\n\n  const { account } = useWallet()\n  const cakeContract = useCake()\n  const bunnyFactoryContract = useBunnyFactory()\n  const TranslateString = useI18n()\n  const hasMinimumCakeRequired = useHasCakeBalance(minimumCakeBalanceToMint)\n  const {\n    isApproving,\n    isApproved,\n    isConfirmed,\n    isConfirming,\n    handleApprove,\n    handleConfirm,\n  } = useApproveConfirmTransaction({\n    onRequiresApproval: async () => {\n      // TODO: Move this to a helper, this check will be probably be used many times\n      try {\n        const response = await cakeContract.methods.allowance(account, bunnyFactoryContract.options.address).call()\n        const currentAllowance = new BigNumber(response)\n        return currentAllowance.gte(minimumCakeRequired)\n      } catch (error) {\n        return false\n      }\n    },\n    onApprove: () => {\n      return cakeContract.methods\n        .approve(bunnyFactoryContract.options.address, allowance.toJSON())\n        .send({ from: account })\n    },\n    onConfirm: () => {\n      return bunnyFactoryContract.methods.mintNFT(variationId).send({ from: account })\n    },\n    onSuccess: () => actions.nextStep(),\n  })\n\n  return (\n    <>\n      <Text fontSize=\"20px\" color=\"textSubtle\" bold>\n        {TranslateString(999, `Step ${1}`)}\n      </Text>\n      <Heading as=\"h3\" size=\"xl\" mb=\"24px\">\n        {TranslateString(776, 'Get Starter Collectible')}\n      </Heading>\n      <Text as=\"p\">{TranslateString(786, 'Every profile starts by making a “starter” collectible (NFT).')}</Text>\n      <Text as=\"p\">{TranslateString(788, 'This starter will also become your first profile picture.')}</Text>\n      <Text as=\"p\" mb=\"24px\">\n        {TranslateString(790, 'You can change your profile pic later if you get another approved Pancake Collectible.')}\n      </Text>\n      <Card mb=\"24px\">\n        <CardBody>\n          <Heading as=\"h4\" size=\"lg\" mb=\"8px\">\n            {TranslateString(792, 'Choose your Starter!')}\n          </Heading>\n          <Text as=\"p\" color=\"textSubtle\">\n            {TranslateString(794, 'Choose wisely: you can only ever make one starter collectible!')}\n          </Text>\n          <Text as=\"p\" mb=\"24px\" color=\"textSubtle\">\n            {TranslateString(999, `Cost: ${MINT_COST} DBALL`, { num: MINT_COST })}\n          </Text>\n          {nfts.map((nft) => {\n            const handleChange = (value: string) => setVariationId(Number(value))\n\n            return (\n              <SelectionCard\n                key={nft.identifier}\n                name=\"mintStarter\"\n                value={nft.variationId}\n                image={`/images/nfts/${nft.images.md}`}\n                isChecked={variationId === nft.variationId}\n                onChange={handleChange}\n                disabled={isApproving || isConfirming || isConfirmed || !hasMinimumCakeRequired}\n              >\n                <Text bold>{nft.name}</Text>\n              </SelectionCard>\n            )\n          })}\n          {!hasMinimumCakeRequired && (\n            <Text color=\"failure\" mb=\"16px\">\n              {TranslateString(1098, `A minimum of ${MINT_COST} DBALL is required`)}\n            </Text>\n          )}\n          <ApproveConfirmButtons\n            isApproveDisabled={variationId === null || isConfirmed || isConfirming || isApproved}\n            isApproving={isApproving}\n            isConfirmDisabled={!isApproved || isConfirmed || !hasMinimumCakeRequired}\n            isConfirming={isConfirming}\n            onApprove={handleApprove}\n            onConfirm={handleConfirm}\n          />\n        </CardBody>\n      </Card>\n      <NextStepButton onClick={actions.nextStep} disabled={!isConfirmed}>\n        {TranslateString(798, 'Next Step')}\n      </NextStepButton>\n    </>\n  )\n}\n\nexport default Mint\n"]},"metadata":{},"sourceType":"module"}