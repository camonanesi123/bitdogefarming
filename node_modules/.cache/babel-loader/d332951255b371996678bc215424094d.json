{"ast":null,"code":"import BigNumber from 'bignumber.js';\nexport const getBalanceNumber = (balance, decimals = 18) => {\n  const displayBalance = new BigNumber(balance).dividedBy(new BigNumber(10).pow(decimals));\n  return displayBalance.toNumber();\n};\nexport const getFullDisplayBalance = (balance, decimals = 18) => {\n  return balance.dividedBy(new BigNumber(10).pow(decimals)).toFixed();\n};\nexport const formatNumber = (number, minPrecision = 2, maxPrecision = 2) => {\n  const options = {\n    minimumFractionDigits: minPrecision,\n    maximumFractionDigits: maxPrecision\n  };\n  return number.toLocaleString(undefined, options);\n};","map":{"version":3,"sources":["D:/task159/frontend/src/utils/formatBalance.ts"],"names":["BigNumber","getBalanceNumber","balance","decimals","displayBalance","dividedBy","pow","toNumber","getFullDisplayBalance","toFixed","formatNumber","number","minPrecision","maxPrecision","options","minimumFractionDigits","maximumFractionDigits","toLocaleString","undefined"],"mappings":"AAAA,OAAOA,SAAP,MAAsB,cAAtB;AAEA,OAAO,MAAMC,gBAAgB,GAAG,CAACC,OAAD,EAAqBC,QAAQ,GAAG,EAAhC,KAAuC;AACrE,QAAMC,cAAc,GAAG,IAAIJ,SAAJ,CAAcE,OAAd,EAAuBG,SAAvB,CAAiC,IAAIL,SAAJ,CAAc,EAAd,EAAkBM,GAAlB,CAAsBH,QAAtB,CAAjC,CAAvB;AACA,SAAOC,cAAc,CAACG,QAAf,EAAP;AACD,CAHM;AAKP,OAAO,MAAMC,qBAAqB,GAAG,CAACN,OAAD,EAAqBC,QAAQ,GAAG,EAAhC,KAAuC;AAC1E,SAAOD,OAAO,CAACG,SAAR,CAAkB,IAAIL,SAAJ,CAAc,EAAd,EAAkBM,GAAlB,CAAsBH,QAAtB,CAAlB,EAAmDM,OAAnD,EAAP;AACD,CAFM;AAIP,OAAO,MAAMC,YAAY,GAAG,CAACC,MAAD,EAAiBC,YAAY,GAAG,CAAhC,EAAmCC,YAAY,GAAG,CAAlD,KAAwD;AAClF,QAAMC,OAAO,GAAG;AACdC,IAAAA,qBAAqB,EAAEH,YADT;AAEdI,IAAAA,qBAAqB,EAAEH;AAFT,GAAhB;AAIA,SAAOF,MAAM,CAACM,cAAP,CAAsBC,SAAtB,EAAiCJ,OAAjC,CAAP;AACD,CANM","sourcesContent":["import BigNumber from 'bignumber.js'\n\nexport const getBalanceNumber = (balance: BigNumber, decimals = 18) => {\n  const displayBalance = new BigNumber(balance).dividedBy(new BigNumber(10).pow(decimals))\n  return displayBalance.toNumber()\n}\n\nexport const getFullDisplayBalance = (balance: BigNumber, decimals = 18) => {\n  return balance.dividedBy(new BigNumber(10).pow(decimals)).toFixed()\n}\n\nexport const formatNumber = (number: number, minPrecision = 2, maxPrecision = 2) => {\n  const options = {\n    minimumFractionDigits: minPrecision,\n    maximumFractionDigits: maxPrecision,\n  }\n  return number.toLocaleString(undefined, options)\n}\n"]},"metadata":{},"sourceType":"module"}