{"ast":null,"code":"import{jsxs as _jsxs}from\"react/jsx-runtime\";import{Fragment as _Fragment}from\"react/jsx-runtime\";import{jsx as _jsx}from\"react/jsx-runtime\";import _regeneratorRuntime from\"D:/task159/frontend/node_modules/babel-preset-react-app/node_modules/@babel/runtime/regenerator\";import _asyncToGenerator from\"D:/task159/frontend/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/asyncToGenerator\";import _slicedToArray from\"D:/task159/frontend/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/slicedToArray\";import React,{useState}from'react';import{Button,Skeleton,Text}from'@pancakeswap-libs/uikit';import{useWallet}from'@binance-chain/bsc-use-wallet';import{useAppDispatch}from'state';import{useGetCollectibles,useProfile,useToast}from'state/hooks';import useI18n from'hooks/useI18n';import{fetchProfile}from'state/profile';import{getAddressByType}from'utils/collectibles';import useApproveConfirmTransaction from'hooks/useApproveConfirmTransaction';import{useERC721,useProfile as useProfileContract}from'hooks/useContract';import{getPancakeProfileAddress}from'utils/addressHelpers';import SelectionCard from'../SelectionCard';import ApproveConfirmButtons from'../ApproveConfirmButtons';var ChangeProfilePicPage=function ChangeProfilePicPage(_ref){var onDismiss=_ref.onDismiss;var _useState=useState({tokenId:null,nftAddress:null}),_useState2=_slicedToArray(_useState,2),selectedNft=_useState2[0],setSelectedNft=_useState2[1];var TranslateString=useI18n();var _useGetCollectibles=useGetCollectibles(),isLoading=_useGetCollectibles.isLoading,tokenIds=_useGetCollectibles.tokenIds,nftsInWallet=_useGetCollectibles.nftsInWallet;var dispatch=useAppDispatch();var _useProfile=useProfile(),profile=_useProfile.profile;var contract=useERC721(selectedNft.nftAddress);var profileContract=useProfileContract();var _useWallet=useWallet(),account=_useWallet.account;var _useToast=useToast(),toastSuccess=_useToast.toastSuccess;var _useApproveConfirmTra=useApproveConfirmTransaction({onApprove:function onApprove(){return contract.methods.approve(getPancakeProfileAddress(),selectedNft.tokenId).send({from:account});},onConfirm:function onConfirm(){if(!profile.isActive){return profileContract.methods.reactivateProfile(selectedNft.nftAddress,selectedNft.tokenId).send({from:account});}return profileContract.methods.updateProfile(selectedNft.nftAddress,selectedNft.tokenId).send({from:account});},onSuccess:function(){var _onSuccess=_asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee(){return _regeneratorRuntime.wrap(function _callee$(_context){while(1){switch(_context.prev=_context.next){case 0:_context.next=2;return dispatch(fetchProfile(account));case 2:toastSuccess('Profile Updated!');onDismiss();case 4:case\"end\":return _context.stop();}}},_callee);}));function onSuccess(){return _onSuccess.apply(this,arguments);}return onSuccess;}()}),isApproving=_useApproveConfirmTra.isApproving,isApproved=_useApproveConfirmTra.isApproved,isConfirmed=_useApproveConfirmTra.isConfirmed,isConfirming=_useApproveConfirmTra.isConfirming,handleApprove=_useApproveConfirmTra.handleApprove,handleConfirm=_useApproveConfirmTra.handleConfirm;return/*#__PURE__*/_jsxs(_Fragment,{children:[/*#__PURE__*/_jsx(Text,{as:\"p\",color:\"textSubtle\",mb:\"24px\",children:TranslateString(999,'Choose a new Collectible to use as your profile pic.')}),isLoading?/*#__PURE__*/_jsx(Skeleton,{height:\"80px\",mb:\"16px\"}):nftsInWallet.map(function(walletNft){var _tokenIds$walletNft$i=_slicedToArray(tokenIds[walletNft.identifier],1),firstTokenId=_tokenIds$walletNft$i[0];var handleChange=function handleChange(value){setSelectedNft({tokenId:Number(value),nftAddress:getAddressByType(walletNft.type)});};return/*#__PURE__*/_jsx(SelectionCard,{name:\"profilePicture\",value:firstTokenId,image:\"/images/nfts/\".concat(walletNft.images.md),isChecked:firstTokenId===selectedNft.tokenId,onChange:handleChange,disabled:isApproving||isConfirming||isConfirmed,children:/*#__PURE__*/_jsx(Text,{bold:true,children:walletNft.name})},walletNft.identifier);}),!isLoading&&nftsInWallet.length===0&&/*#__PURE__*/_jsxs(_Fragment,{children:[/*#__PURE__*/_jsx(Text,{as:\"p\",color:\"textSubtle\",mb:\"16px\",children:TranslateString(999,'Sorry! You donâ€™t have any eligible Collectibles in your wallet to use!')}),/*#__PURE__*/_jsx(Text,{as:\"p\",color:\"textSubtle\",mb:\"24px\",children:TranslateString(999,'Make sure you have a Pancake Collectible in your wallet and try again!')})]}),/*#__PURE__*/_jsx(ApproveConfirmButtons,{isApproveDisabled:isConfirmed||isConfirming||isApproved||selectedNft.tokenId===null,isApproving:isApproving,isConfirmDisabled:!isApproved||isConfirmed||selectedNft.tokenId===null,isConfirming:isConfirming,onApprove:handleApprove,onConfirm:handleConfirm}),/*#__PURE__*/_jsx(Button,{variant:\"text\",width:\"100%\",onClick:onDismiss,disabled:isApproving||isConfirming,children:TranslateString(999,'Close Window')})]});};export default ChangeProfilePicPage;","map":{"version":3,"sources":["D:/task159/frontend/src/views/Profile/components/EditProfileModal/ChangeProfilePicView.tsx"],"names":["React","useState","Button","Skeleton","Text","useWallet","useAppDispatch","useGetCollectibles","useProfile","useToast","useI18n","fetchProfile","getAddressByType","useApproveConfirmTransaction","useERC721","useProfileContract","getPancakeProfileAddress","SelectionCard","ApproveConfirmButtons","ChangeProfilePicPage","onDismiss","tokenId","nftAddress","selectedNft","setSelectedNft","TranslateString","isLoading","tokenIds","nftsInWallet","dispatch","profile","contract","profileContract","account","toastSuccess","onApprove","methods","approve","send","from","onConfirm","isActive","reactivateProfile","updateProfile","onSuccess","isApproving","isApproved","isConfirmed","isConfirming","handleApprove","handleConfirm","map","walletNft","identifier","firstTokenId","handleChange","value","Number","type","images","md","name","length"],"mappings":"wiBAAA,MAAOA,CAAAA,KAAP,EAAgBC,QAAhB,KAAgC,OAAhC,CACA,OAASC,MAAT,CAAqCC,QAArC,CAA+CC,IAA/C,KAA2D,yBAA3D,CAEA,OAASC,SAAT,KAA0B,+BAA1B,CACA,OAASC,cAAT,KAA+B,OAA/B,CACA,OAASC,kBAAT,CAA6BC,UAA7B,CAAyCC,QAAzC,KAAyD,aAAzD,CACA,MAAOC,CAAAA,OAAP,KAAoB,eAApB,CACA,OAASC,YAAT,KAA6B,eAA7B,CACA,OAASC,gBAAT,KAAiC,oBAAjC,CACA,MAAOC,CAAAA,4BAAP,KAAyC,oCAAzC,CACA,OAASC,SAAT,CAAoBN,UAAU,GAAIO,CAAAA,kBAAlC,KAA4D,mBAA5D,CACA,OAASC,wBAAT,KAAyC,sBAAzC,CACA,MAAOC,CAAAA,aAAP,KAA0B,kBAA1B,CACA,MAAOC,CAAAA,qBAAP,KAAkC,0BAAlC,CAKA,GAAMC,CAAAA,oBAAyD,CAAG,QAA5DA,CAAAA,oBAA4D,MAAmB,IAAhBC,CAAAA,SAAgB,MAAhBA,SAAgB,eAC7CnB,QAAQ,CAAC,CAC7CoB,OAAO,CAAE,IADoC,CAE7CC,UAAU,CAAE,IAFiC,CAAD,CADqC,wCAC5EC,WAD4E,eAC/DC,cAD+D,eAKnF,GAAMC,CAAAA,eAAe,CAAGf,OAAO,EAA/B,CALmF,wBAMrCH,kBAAkB,EANmB,CAM3EmB,SAN2E,qBAM3EA,SAN2E,CAMhEC,QANgE,qBAMhEA,QANgE,CAMtDC,YANsD,qBAMtDA,YANsD,CAOnF,GAAMC,CAAAA,QAAQ,CAAGvB,cAAc,EAA/B,CAPmF,gBAQ/DE,UAAU,EARqD,CAQ3EsB,OAR2E,aAQ3EA,OAR2E,CASnF,GAAMC,CAAAA,QAAQ,CAAGjB,SAAS,CAACS,WAAW,CAACD,UAAb,CAA1B,CACA,GAAMU,CAAAA,eAAe,CAAGjB,kBAAkB,EAA1C,CAVmF,eAW/DV,SAAS,EAXsD,CAW3E4B,OAX2E,YAW3EA,OAX2E,eAY1DxB,QAAQ,EAZkD,CAY3EyB,YAZ2E,WAY3EA,YAZ2E,2BAoB/ErB,4BAA4B,CAAC,CAC/BsB,SAAS,CAAE,oBAAM,CACf,MAAOJ,CAAAA,QAAQ,CAACK,OAAT,CAAiBC,OAAjB,CAAyBrB,wBAAwB,EAAjD,CAAqDO,WAAW,CAACF,OAAjE,EAA0EiB,IAA1E,CAA+E,CAAEC,IAAI,CAAEN,OAAR,CAA/E,CAAP,CACD,CAH8B,CAI/BO,SAAS,CAAE,oBAAM,CACf,GAAI,CAACV,OAAO,CAACW,QAAb,CAAuB,CACrB,MAAOT,CAAAA,eAAe,CAACI,OAAhB,CACJM,iBADI,CACcnB,WAAW,CAACD,UAD1B,CACsCC,WAAW,CAACF,OADlD,EAEJiB,IAFI,CAEC,CAAEC,IAAI,CAAEN,OAAR,CAFD,CAAP,CAGD,CAED,MAAOD,CAAAA,eAAe,CAACI,OAAhB,CAAwBO,aAAxB,CAAsCpB,WAAW,CAACD,UAAlD,CAA8DC,WAAW,CAACF,OAA1E,EAAmFiB,IAAnF,CAAwF,CAAEC,IAAI,CAAEN,OAAR,CAAxF,CAAP,CACD,CAZ8B,CAa/BW,SAAS,mFAAE,yJAEHf,CAAAA,QAAQ,CAAClB,YAAY,CAACsB,OAAD,CAAb,CAFL,QAGTC,YAAY,CAAC,kBAAD,CAAZ,CAEAd,SAAS,GALA,sDAAF,qFAbsB,CAAD,CApBmD,CAcjFyB,WAdiF,uBAcjFA,WAdiF,CAejFC,UAfiF,uBAejFA,UAfiF,CAgBjFC,WAhBiF,uBAgBjFA,WAhBiF,CAiBjFC,YAjBiF,uBAiBjFA,YAjBiF,CAkBjFC,aAlBiF,uBAkBjFA,aAlBiF,CAmBjFC,aAnBiF,uBAmBjFA,aAnBiF,CA0CnF,mBACE,wCACE,KAAC,IAAD,EAAM,EAAE,CAAC,GAAT,CAAa,KAAK,CAAC,YAAnB,CAAgC,EAAE,CAAC,MAAnC,UACGzB,eAAe,CAAC,GAAD,CAAM,sDAAN,CADlB,EADF,CAIGC,SAAS,cACR,KAAC,QAAD,EAAU,MAAM,CAAC,MAAjB,CAAwB,EAAE,CAAC,MAA3B,EADQ,CAGRE,YAAY,CAACuB,GAAb,CAAiB,SAACC,SAAD,CAAe,0CACPzB,QAAQ,CAACyB,SAAS,CAACC,UAAX,CADD,IACvBC,YADuB,0BAE9B,GAAMC,CAAAA,YAAY,CAAG,QAAfA,CAAAA,YAAe,CAACC,KAAD,CAAmB,CACtChC,cAAc,CAAC,CACbH,OAAO,CAAEoC,MAAM,CAACD,KAAD,CADF,CAEblC,UAAU,CAAEV,gBAAgB,CAACwC,SAAS,CAACM,IAAX,CAFf,CAAD,CAAd,CAID,CALD,CAOA,mBACE,KAAC,aAAD,EACE,IAAI,CAAC,gBADP,CAGE,KAAK,CAAEJ,YAHT,CAIE,KAAK,wBAAkBF,SAAS,CAACO,MAAV,CAAiBC,EAAnC,CAJP,CAKE,SAAS,CAAEN,YAAY,GAAK/B,WAAW,CAACF,OAL1C,CAME,QAAQ,CAAEkC,YANZ,CAOE,QAAQ,CAAEV,WAAW,EAAIG,YAAf,EAA+BD,WAP3C,uBASE,KAAC,IAAD,EAAM,IAAI,KAAV,UAAYK,SAAS,CAACS,IAAtB,EATF,EAEOT,SAAS,CAACC,UAFjB,CADF,CAaD,CAtBD,CAPJ,CA+BG,CAAC3B,SAAD,EAAcE,YAAY,CAACkC,MAAb,GAAwB,CAAtC,eACC,wCACE,KAAC,IAAD,EAAM,EAAE,CAAC,GAAT,CAAa,KAAK,CAAC,YAAnB,CAAgC,EAAE,CAAC,MAAnC,UACGrC,eAAe,CAAC,GAAD,CAAM,wEAAN,CADlB,EADF,cAIE,KAAC,IAAD,EAAM,EAAE,CAAC,GAAT,CAAa,KAAK,CAAC,YAAnB,CAAgC,EAAE,CAAC,MAAnC,UACGA,eAAe,CAAC,GAAD,CAAM,wEAAN,CADlB,EAJF,GAhCJ,cAyCE,KAAC,qBAAD,EACE,iBAAiB,CAAEsB,WAAW,EAAIC,YAAf,EAA+BF,UAA/B,EAA6CvB,WAAW,CAACF,OAAZ,GAAwB,IAD1F,CAEE,WAAW,CAAEwB,WAFf,CAGE,iBAAiB,CAAE,CAACC,UAAD,EAAeC,WAAf,EAA8BxB,WAAW,CAACF,OAAZ,GAAwB,IAH3E,CAIE,YAAY,CAAE2B,YAJhB,CAKE,SAAS,CAAEC,aALb,CAME,SAAS,CAAEC,aANb,EAzCF,cAiDE,KAAC,MAAD,EAAQ,OAAO,CAAC,MAAhB,CAAuB,KAAK,CAAC,MAA7B,CAAoC,OAAO,CAAE9B,SAA7C,CAAwD,QAAQ,CAAEyB,WAAW,EAAIG,YAAjF,UACGvB,eAAe,CAAC,GAAD,CAAM,cAAN,CADlB,EAjDF,GADF,CAuDD,CAjGD,CAmGA,cAAeN,CAAAA,oBAAf","sourcesContent":["import React, { useState } from 'react'\nimport { Button, InjectedModalProps, Skeleton, Text } from '@pancakeswap-libs/uikit'\nimport { useWeb3React } from '@web3-react/core'\nimport { useWallet } from '@binance-chain/bsc-use-wallet'\nimport { useAppDispatch } from 'state'\nimport { useGetCollectibles, useProfile, useToast } from 'state/hooks'\nimport useI18n from 'hooks/useI18n'\nimport { fetchProfile } from 'state/profile'\nimport { getAddressByType } from 'utils/collectibles'\nimport useApproveConfirmTransaction from 'hooks/useApproveConfirmTransaction'\nimport { useERC721, useProfile as useProfileContract } from 'hooks/useContract'\nimport { getPancakeProfileAddress } from 'utils/addressHelpers'\nimport SelectionCard from '../SelectionCard'\nimport ApproveConfirmButtons from '../ApproveConfirmButtons'\n\n\ntype ChangeProfilePicPageProps = InjectedModalProps\n\nconst ChangeProfilePicPage: React.FC<ChangeProfilePicPageProps> = ({ onDismiss }) => {\n  const [selectedNft, setSelectedNft] = useState({\n    tokenId: null,\n    nftAddress: null,\n  })\n  const TranslateString = useI18n()\n  const { isLoading, tokenIds, nftsInWallet } = useGetCollectibles()\n  const dispatch = useAppDispatch()\n  const { profile } = useProfile()\n  const contract = useERC721(selectedNft.nftAddress)\n  const profileContract = useProfileContract()\n  const { account } = useWallet()\n  const { toastSuccess } = useToast()\n  const {\n    isApproving,\n    isApproved,\n    isConfirmed,\n    isConfirming,\n    handleApprove,\n    handleConfirm,\n  } = useApproveConfirmTransaction({\n    onApprove: () => {\n      return contract.methods.approve(getPancakeProfileAddress(), selectedNft.tokenId).send({ from: account })\n    },\n    onConfirm: () => {\n      if (!profile.isActive) {\n        return profileContract.methods\n          .reactivateProfile(selectedNft.nftAddress, selectedNft.tokenId)\n          .send({ from: account })\n      }\n\n      return profileContract.methods.updateProfile(selectedNft.nftAddress, selectedNft.tokenId).send({ from: account })\n    },\n    onSuccess: async () => {\n      // Re-fetch profile\n      await dispatch(fetchProfile(account))\n      toastSuccess('Profile Updated!')\n\n      onDismiss()\n    },\n  })\n\n  return (\n    <>\n      <Text as=\"p\" color=\"textSubtle\" mb=\"24px\">\n        {TranslateString(999, 'Choose a new Collectible to use as your profile pic.')}\n      </Text>\n      {isLoading ? (\n        <Skeleton height=\"80px\" mb=\"16px\" />\n      ) : (\n        nftsInWallet.map((walletNft) => {\n          const [firstTokenId] = tokenIds[walletNft.identifier]\n          const handleChange = (value: string) => {\n            setSelectedNft({\n              tokenId: Number(value),\n              nftAddress: getAddressByType(walletNft.type),\n            })\n          }\n\n          return (\n            <SelectionCard\n              name=\"profilePicture\"\n              key={walletNft.identifier}\n              value={firstTokenId}\n              image={`/images/nfts/${walletNft.images.md}`}\n              isChecked={firstTokenId === selectedNft.tokenId}\n              onChange={handleChange}\n              disabled={isApproving || isConfirming || isConfirmed}\n            >\n              <Text bold>{walletNft.name}</Text>\n            </SelectionCard>\n          )\n        })\n      )}\n      {!isLoading && nftsInWallet.length === 0 && (\n        <>\n          <Text as=\"p\" color=\"textSubtle\" mb=\"16px\">\n            {TranslateString(999, 'Sorry! You donâ€™t have any eligible Collectibles in your wallet to use!')}\n          </Text>\n          <Text as=\"p\" color=\"textSubtle\" mb=\"24px\">\n            {TranslateString(999, 'Make sure you have a Pancake Collectible in your wallet and try again!')}\n          </Text>\n        </>\n      )}\n      <ApproveConfirmButtons\n        isApproveDisabled={isConfirmed || isConfirming || isApproved || selectedNft.tokenId === null}\n        isApproving={isApproving}\n        isConfirmDisabled={!isApproved || isConfirmed || selectedNft.tokenId === null}\n        isConfirming={isConfirming}\n        onApprove={handleApprove}\n        onConfirm={handleConfirm}\n      />\n      <Button variant=\"text\" width=\"100%\" onClick={onDismiss} disabled={isApproving || isConfirming}>\n        {TranslateString(999, 'Close Window')}\n      </Button>\n    </>\n  )\n}\n\nexport default ChangeProfilePicPage\n"]},"metadata":{},"sourceType":"module"}