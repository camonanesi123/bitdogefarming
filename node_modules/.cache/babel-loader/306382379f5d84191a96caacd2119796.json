{"ast":null,"code":"var _s = $RefreshSig$(),\n    _s2 = $RefreshSig$(),\n    _s3 = $RefreshSig$(),\n    _s4 = $RefreshSig$(),\n    _s5 = $RefreshSig$();\n\nimport { useCallback } from 'react';\nimport { useWallet } from '@binance-chain/bsc-use-wallet';\nimport { ethers } from 'ethers';\nimport { useDispatch } from 'react-redux';\nimport { updateUserAllowance, fetchFarmUserDataAsync, fetchFarm3UserDataAsync } from 'state/actions';\nimport { approve } from 'utils/callHelpers';\nimport { useMasterchef, useMasterchef3, useCake, useLottery, useSmartChef } from './useContract'; // Approve a Farm\n\nexport const useApprove = lpContract => {\n  _s();\n\n  const dispatch = useDispatch();\n  const {\n    account\n  } = useWallet();\n  const masterChefContract = useMasterchef();\n  const handleApprove = useCallback(async () => {\n    try {\n      const tx = await approve(lpContract, masterChefContract, account);\n      dispatch(fetchFarmUserDataAsync(account));\n      return tx;\n    } catch (e) {\n      return false;\n    }\n  }, [account, dispatch, lpContract, masterChefContract]);\n  return {\n    onApprove: handleApprove\n  };\n}; // Approve a Farm3\n\n_s(useApprove, \"912YkJ6AGYumCBnuye56mVxNDwo=\", false, function () {\n  return [useDispatch, useWallet, useMasterchef];\n});\n\nexport const useApprove3 = lpContract => {\n  _s2();\n\n  const dispatch = useDispatch();\n  const {\n    account\n  } = useWallet();\n  const masterChef3Contract = useMasterchef3();\n  const handleApprove = useCallback(async () => {\n    try {\n      const tx = await approve(lpContract, masterChef3Contract, account);\n      dispatch(fetchFarm3UserDataAsync(account));\n      return tx;\n    } catch (e) {\n      return false;\n    }\n  }, [account, dispatch, lpContract, masterChef3Contract]);\n  return {\n    onApprove: handleApprove\n  };\n}; // Approve a Pool\n\n_s2(useApprove3, \"sQmIuwbgaCWGpdtT3dCJ6l6GTtk=\", false, function () {\n  return [useDispatch, useWallet, useMasterchef3];\n});\n\nexport const useSousApprove = (lpContract, sousId) => {\n  _s3();\n\n  const dispatch = useDispatch();\n  const {\n    account\n  } = useWallet();\n  const smartChefContract = useSmartChef(sousId);\n  const handleApprove = useCallback(async () => {\n    try {\n      const tx = await approve(lpContract, smartChefContract, account);\n      dispatch(updateUserAllowance(String(sousId), account));\n      return tx;\n    } catch (e) {\n      return false;\n    }\n  }, [account, dispatch, lpContract, smartChefContract, sousId]);\n  return {\n    onApprove: handleApprove\n  };\n}; // Approve the lottery\n\n_s3(useSousApprove, \"Qia2+sTf06YTIta1Ysv7oxao7Zo=\", false, function () {\n  return [useDispatch, useWallet, useSmartChef];\n});\n\nexport const useLotteryApprove = () => {\n  _s4();\n\n  const {\n    account\n  } = useWallet();\n  const cakeContract = useCake();\n  const lotteryContract = useLottery();\n  const handleApprove = useCallback(async () => {\n    try {\n      const tx = await approve(cakeContract, lotteryContract, account);\n      return tx;\n    } catch (e) {\n      return false;\n    }\n  }, [account, cakeContract, lotteryContract]);\n  return {\n    onApprove: handleApprove\n  };\n}; // Approve an IFO\n\n_s4(useLotteryApprove, \"qmmDwizDBCPS/KQkbYFMkBrCi+A=\", false, function () {\n  return [useWallet, useCake, useLottery];\n});\n\nexport const useIfoApprove = (tokenContract, spenderAddress) => {\n  _s5();\n\n  const {\n    account\n  } = useWallet();\n  const onApprove = useCallback(async () => {\n    try {\n      const tx = await tokenContract.methods.approve(spenderAddress, ethers.constants.MaxUint256).send({\n        from: account\n      });\n      return tx;\n    } catch {\n      return false;\n    }\n  }, [account, spenderAddress, tokenContract]);\n  return onApprove;\n};\n\n_s5(useIfoApprove, \"5YEWPx3HiFEhK5UYbT6NzOlDPbw=\", false, function () {\n  return [useWallet];\n});","map":{"version":3,"sources":["D:/task159/frontend/src/hooks/useApprove.ts"],"names":["useCallback","useWallet","ethers","useDispatch","updateUserAllowance","fetchFarmUserDataAsync","fetchFarm3UserDataAsync","approve","useMasterchef","useMasterchef3","useCake","useLottery","useSmartChef","useApprove","lpContract","dispatch","account","masterChefContract","handleApprove","tx","e","onApprove","useApprove3","masterChef3Contract","useSousApprove","sousId","smartChefContract","String","useLotteryApprove","cakeContract","lotteryContract","useIfoApprove","tokenContract","spenderAddress","methods","constants","MaxUint256","send","from"],"mappings":"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","sourcesContent":["import { useCallback } from 'react'\nimport { useWallet } from '@binance-chain/bsc-use-wallet'\nimport { Contract } from 'web3-eth-contract'\nimport { ethers } from 'ethers'\nimport { useDispatch } from 'react-redux'\nimport { updateUserAllowance, fetchFarmUserDataAsync, fetchFarm3UserDataAsync } from 'state/actions'\nimport { approve } from 'utils/callHelpers'\nimport { useMasterchef, useMasterchef3, useCake, useLottery, useSmartChef } from './useContract'\n\n// Approve a Farm\nexport const useApprove = (lpContract: Contract) => {\n  const dispatch = useDispatch()\n  const { account }: { account: string } = useWallet()\n  const masterChefContract = useMasterchef()\n\n  const handleApprove = useCallback(async () => {\n    try {\n      const tx = await approve(lpContract, masterChefContract, account)\n      dispatch(fetchFarmUserDataAsync(account))\n      return tx\n    } catch (e) {\n      return false\n    }\n  }, [account, dispatch, lpContract, masterChefContract])\n\n  return { onApprove: handleApprove }\n}\n\n// Approve a Farm3\nexport const useApprove3 = (lpContract: Contract) => {\n  const dispatch = useDispatch()\n  const { account }: { account: string } = useWallet()\n  const masterChef3Contract = useMasterchef3()\n\n  const handleApprove = useCallback(async () => {\n    try {\n      const tx = await approve(lpContract, masterChef3Contract, account)\n      dispatch(fetchFarm3UserDataAsync(account))\n      return tx\n    } catch (e) {\n      return false\n    }\n  }, [account, dispatch, lpContract, masterChef3Contract])\n\n  return { onApprove: handleApprove }\n}\n\n// Approve a Pool\nexport const useSousApprove = (lpContract: Contract, sousId: number) => {\n  const dispatch = useDispatch()\n  const { account }: { account: string } = useWallet()\n  const smartChefContract = useSmartChef(sousId)\n\n  const handleApprove = useCallback(async () => {\n    try {\n      const tx = await approve(lpContract, smartChefContract, account)\n      dispatch(updateUserAllowance(String(sousId), account))\n      return tx\n    } catch (e) {\n      return false\n    }\n  }, [account, dispatch, lpContract, smartChefContract, sousId])\n\n  return { onApprove: handleApprove }\n}\n\n// Approve the lottery\nexport const useLotteryApprove = () => {\n  const { account }: { account: string } = useWallet()\n  const cakeContract = useCake()\n  const lotteryContract = useLottery()\n\n  const handleApprove = useCallback(async () => {\n    try {\n      const tx = await approve(cakeContract, lotteryContract, account)\n      return tx\n    } catch (e) {\n      return false\n    }\n  }, [account, cakeContract, lotteryContract])\n\n  return { onApprove: handleApprove }\n}\n\n// Approve an IFO\nexport const useIfoApprove = (tokenContract: Contract, spenderAddress: string) => {\n  const { account } = useWallet()\n  const onApprove = useCallback(async () => {\n    try {\n      const tx = await tokenContract.methods\n        .approve(spenderAddress, ethers.constants.MaxUint256)\n        .send({ from: account })\n      return tx\n    } catch {\n      return false\n    }\n  }, [account, spenderAddress, tokenContract])\n\n  return onApprove\n}\n"]},"metadata":{},"sourceType":"module"}