{"ast":null,"code":"import _regeneratorRuntime from\"D:/task159/frontend/node_modules/babel-preset-react-app/node_modules/@babel/runtime/regenerator\";import _asyncToGenerator from\"D:/task159/frontend/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/asyncToGenerator\";import _slicedToArray from\"D:/task159/frontend/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/slicedToArray\";import{useEffect,useState}from'react';import BigNumber from'bignumber.js';import{useWallet}from'@binance-chain/bsc-use-wallet';import cakeABI from'config/abi/cake.json';import cake3ABI from'config/abi/cake3.json';import{getContract}from'utils/web3';import{getTokenBalance}from'utils/erc20';import{getCakeAddress,getCake3Address}from'utils/addressHelpers';import useRefresh from'./useRefresh';var useTokenBalance=function useTokenBalance(tokenAddress){var _useState=useState(new BigNumber(0)),_useState2=_slicedToArray(_useState,2),balance=_useState2[0],setBalance=_useState2[1];var _useWallet=useWallet(),account=_useWallet.account,ethereum=_useWallet.ethereum;var _useRefresh=useRefresh(),fastRefresh=_useRefresh.fastRefresh;useEffect(function(){var fetchBalance=/*#__PURE__*/function(){var _ref=_asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee(){var res;return _regeneratorRuntime.wrap(function _callee$(_context){while(1){switch(_context.prev=_context.next){case 0:_context.next=2;return getTokenBalance(ethereum,tokenAddress,account);case 2:res=_context.sent;setBalance(new BigNumber(res));case 4:case\"end\":return _context.stop();}}},_callee);}));return function fetchBalance(){return _ref.apply(this,arguments);};}();if(account&&ethereum){fetchBalance();}},[account,ethereum,tokenAddress,fastRefresh]);return balance;};export var useTotalSupply=function useTotalSupply(){var _useRefresh2=useRefresh(),slowRefresh=_useRefresh2.slowRefresh;var _useState3=useState(),_useState4=_slicedToArray(_useState3,2),totalSupply=_useState4[0],setTotalSupply=_useState4[1];useEffect(function(){function fetchTotalSupply(){return _fetchTotalSupply.apply(this,arguments);}function _fetchTotalSupply(){_fetchTotalSupply=_asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee2(){var cakeContract,supply;return _regeneratorRuntime.wrap(function _callee2$(_context2){while(1){switch(_context2.prev=_context2.next){case 0:cakeContract=getContract(cakeABI,getCakeAddress());_context2.next=3;return cakeContract.methods.totalSupply().call();case 3:supply=_context2.sent;setTotalSupply(new BigNumber(supply));case 5:case\"end\":return _context2.stop();}}},_callee2);}));return _fetchTotalSupply.apply(this,arguments);}fetchTotalSupply();},[slowRefresh]);return totalSupply;};export var useBurnedBalance=function useBurnedBalance(tokenAddress){var _useState5=useState(new BigNumber(0)),_useState6=_slicedToArray(_useState5,2),balance=_useState6[0],setBalance=_useState6[1];var _useRefresh3=useRefresh(),slowRefresh=_useRefresh3.slowRefresh;useEffect(function(){var fetchBalance=/*#__PURE__*/function(){var _ref2=_asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee3(){var cakeContract,bal;return _regeneratorRuntime.wrap(function _callee3$(_context3){while(1){switch(_context3.prev=_context3.next){case 0:cakeContract=getContract(cakeABI,getCakeAddress());_context3.next=3;return cakeContract.methods.balanceOf('0x000000000000000000000000000000000000dEaD').call();case 3:bal=_context3.sent;setBalance(new BigNumber(bal));case 5:case\"end\":return _context3.stop();}}},_callee3);}));return function fetchBalance(){return _ref2.apply(this,arguments);};}();fetchBalance();},[tokenAddress,slowRefresh]);return balance;};export var useTotalSupply3=function useTotalSupply3(){var _useRefresh4=useRefresh(),slowRefresh=_useRefresh4.slowRefresh;var _useState7=useState(),_useState8=_slicedToArray(_useState7,2),totalSupply=_useState8[0],setTotalSupply=_useState8[1];useEffect(function(){function fetchTotalSupply(){return _fetchTotalSupply2.apply(this,arguments);}function _fetchTotalSupply2(){_fetchTotalSupply2=_asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee4(){var cakeContract,supply;return _regeneratorRuntime.wrap(function _callee4$(_context4){while(1){switch(_context4.prev=_context4.next){case 0:cakeContract=getContract(cake3ABI,getCake3Address());_context4.next=3;return cakeContract.methods.totalSupply().call();case 3:supply=_context4.sent;setTotalSupply(new BigNumber(supply));case 5:case\"end\":return _context4.stop();}}},_callee4);}));return _fetchTotalSupply2.apply(this,arguments);}fetchTotalSupply();},[slowRefresh]);return totalSupply;};export var useBurnedBalance3=function useBurnedBalance3(tokenAddress){var _useState9=useState(new BigNumber(0)),_useState10=_slicedToArray(_useState9,2),balance=_useState10[0],setBalance=_useState10[1];var _useRefresh5=useRefresh(),slowRefresh=_useRefresh5.slowRefresh;useEffect(function(){var fetchBalance=/*#__PURE__*/function(){var _ref3=_asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee5(){var cakeContract,bal;return _regeneratorRuntime.wrap(function _callee5$(_context5){while(1){switch(_context5.prev=_context5.next){case 0:cakeContract=getContract(cake3ABI,getCake3Address());_context5.next=3;return cakeContract.methods.balanceOf('0x000000000000000000000000000000000000dEaD').call();case 3:bal=_context5.sent;setBalance(new BigNumber(bal));case 5:case\"end\":return _context5.stop();}}},_callee5);}));return function fetchBalance(){return _ref3.apply(this,arguments);};}();fetchBalance();},[tokenAddress,slowRefresh]);return balance;};export default useTokenBalance;","map":{"version":3,"sources":["D:/task159/frontend/src/hooks/useTokenBalance.ts"],"names":["useEffect","useState","BigNumber","useWallet","cakeABI","cake3ABI","getContract","getTokenBalance","getCakeAddress","getCake3Address","useRefresh","useTokenBalance","tokenAddress","balance","setBalance","account","ethereum","fastRefresh","fetchBalance","res","useTotalSupply","slowRefresh","totalSupply","setTotalSupply","fetchTotalSupply","cakeContract","methods","call","supply","useBurnedBalance","balanceOf","bal","useTotalSupply3","useBurnedBalance3"],"mappings":"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","sourcesContent":["import { useEffect, useState } from 'react'\nimport BigNumber from 'bignumber.js'\nimport { useWallet } from '@binance-chain/bsc-use-wallet'\nimport { provider } from 'web3-core'\nimport cakeABI from 'config/abi/cake.json'\nimport cake3ABI from 'config/abi/cake3.json'\nimport { getContract } from 'utils/web3'\nimport { getTokenBalance } from 'utils/erc20'\nimport { getCakeAddress, getCake3Address } from 'utils/addressHelpers'\nimport useRefresh from './useRefresh'\n\nconst useTokenBalance = (tokenAddress: string) => {\n  const [balance, setBalance] = useState(new BigNumber(0))\n  const { account, ethereum }: { account: string; ethereum: provider } = useWallet()\n  const { fastRefresh } = useRefresh()\n\n  useEffect(() => {\n    const fetchBalance = async () => {\n      const res = await getTokenBalance(ethereum, tokenAddress, account)\n      setBalance(new BigNumber(res))\n    }\n\n    if (account && ethereum) {\n      fetchBalance()\n    }\n  }, [account, ethereum, tokenAddress, fastRefresh])\n\n  return balance\n}\n\nexport const useTotalSupply = () => {\n  const { slowRefresh } = useRefresh()\n  const [totalSupply, setTotalSupply] = useState<BigNumber>()\n\n  useEffect(() => {\n    async function fetchTotalSupply() {\n      const cakeContract = getContract(cakeABI, getCakeAddress())\n      const supply = await cakeContract.methods.totalSupply().call()\n      setTotalSupply(new BigNumber(supply))\n    }\n\n    fetchTotalSupply()\n  }, [slowRefresh])\n\n  return totalSupply\n}\n\nexport const useBurnedBalance = (tokenAddress: string) => {\n  const [balance, setBalance] = useState(new BigNumber(0))\n  const { slowRefresh } = useRefresh()\n\n  useEffect(() => {\n    const fetchBalance = async () => {\n      const cakeContract = getContract(cakeABI, getCakeAddress())\n      const bal = await cakeContract.methods.balanceOf('0x000000000000000000000000000000000000dEaD').call()\n      setBalance(new BigNumber(bal))\n    }\n\n    fetchBalance()\n  }, [tokenAddress, slowRefresh])\n\n  return balance\n}\n\nexport const useTotalSupply3 = () => {\n  const { slowRefresh } = useRefresh()\n  const [totalSupply, setTotalSupply] = useState<BigNumber>()\n\n  useEffect(() => {\n    async function fetchTotalSupply() {\n      const cakeContract = getContract(cake3ABI, getCake3Address())\n      const supply = await cakeContract.methods.totalSupply().call()\n      setTotalSupply(new BigNumber(supply))\n    }\n\n    fetchTotalSupply()\n  }, [slowRefresh])\n\n  return totalSupply\n}\n\nexport const useBurnedBalance3 = (tokenAddress: string) => {\n  const [balance, setBalance] = useState(new BigNumber(0))\n  const { slowRefresh } = useRefresh()\n\n  useEffect(() => {\n    const fetchBalance = async () => {\n      const cakeContract = getContract(cake3ABI, getCake3Address())\n      const bal = await cakeContract.methods.balanceOf('0x000000000000000000000000000000000000dEaD').call()\n      setBalance(new BigNumber(bal))\n    }\n\n    fetchBalance()\n  }, [tokenAddress, slowRefresh])\n\n  return balance\n}\n\nexport default useTokenBalance\n"]},"metadata":{},"sourceType":"module"}