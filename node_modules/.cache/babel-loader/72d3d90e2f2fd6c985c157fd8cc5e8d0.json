{"ast":null,"code":"import _regeneratorRuntime from\"D:/task159/frontend/node_modules/babel-preset-react-app/node_modules/@babel/runtime/regenerator\";import _objectSpread from\"D:/task159/frontend/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/objectSpread2\";import _asyncToGenerator from\"D:/task159/frontend/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/asyncToGenerator\";import _defineProperty from\"D:/task159/frontend/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/defineProperty\";import _slicedToArray from\"D:/task159/frontend/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/slicedToArray\";import BigNumber from'bignumber.js';import{BSC_BLOCK_TIME}from'config';import{PoolIds}from'config/constants/types';import{useBlock,useLpTokenPrice}from'state/hooks';import{useIfoV1Contract}from'hooks/useContract';import{useEffect,useState}from'react';import makeBatchRequest from'utils/makeBatchRequest';import{getStatus}from'../helpers';/**\n * Gets all public data of an IFO\n */var useGetPublicIfoData=function useGetPublicIfoData(ifo){var address=ifo.address,releaseBlockNumber=ifo.releaseBlockNumber;var lpTokenPriceInUsd=useLpTokenPrice(ifo.currency.symbol);var _useState=useState(_defineProperty({status:'idle',blocksRemaining:0,secondsUntilStart:0,progress:5,secondsUntilEnd:0,startBlockNum:0,endBlockNum:0,numberPoints:null},PoolIds.poolUnlimited,{raisingAmountPool:new BigNumber(0),totalAmountPool:new BigNumber(0),offeringAmountPool:new BigNumber(0),// Not know\nlimitPerUserInLP:new BigNumber(0),//  Not used\ntaxRate:0,//  Not used\nsumTaxesOverflow:new BigNumber(0)//  Not used\n})),_useState2=_slicedToArray(_useState,2),state=_useState2[0],setState=_useState2[1];var _useBlock=useBlock(),currentBlock=_useBlock.currentBlock;var contract=useIfoV1Contract(address);useEffect(function(){var fetchProgress=/*#__PURE__*/function(){var _ref=_asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee(){var _ref2,_ref3,startBlock,endBlock,raisingAmount,totalAmount,startBlockNum,endBlockNum,status,totalBlocks,blocksRemaining,progress;return _regeneratorRuntime.wrap(function _callee$(_context){while(1){switch(_context.prev=_context.next){case 0:_context.next=2;return makeBatchRequest([contract.methods.startBlock().call,contract.methods.endBlock().call,contract.methods.raisingAmount().call,contract.methods.totalAmount().call]);case 2:_ref2=_context.sent;_ref3=_slicedToArray(_ref2,4);startBlock=_ref3[0];endBlock=_ref3[1];raisingAmount=_ref3[2];totalAmount=_ref3[3];startBlockNum=parseInt(startBlock,10);endBlockNum=parseInt(endBlock,10);status=getStatus(currentBlock,startBlockNum,endBlockNum);totalBlocks=endBlockNum-startBlockNum;blocksRemaining=endBlockNum-currentBlock;// Calculate the total progress until finished or until start\nprogress=currentBlock>startBlockNum?(currentBlock-startBlockNum)/totalBlocks*100:(currentBlock-releaseBlockNumber)/(startBlockNum-releaseBlockNumber)*100;setState(function(prev){return _defineProperty({status:status,blocksRemaining:blocksRemaining,secondsUntilStart:(startBlockNum-currentBlock)*BSC_BLOCK_TIME,progress:progress,secondsUntilEnd:blocksRemaining*BSC_BLOCK_TIME,startBlockNum:startBlockNum,endBlockNum:endBlockNum,currencyPriceInUSD:null,numberPoints:null},PoolIds.poolUnlimited,_objectSpread(_objectSpread({},prev.poolUnlimited),{},{raisingAmountPool:new BigNumber(raisingAmount),totalAmountPool:new BigNumber(totalAmount)}));});case 15:case\"end\":return _context.stop();}}},_callee);}));return function fetchProgress(){return _ref.apply(this,arguments);};}();fetchProgress();},[address,currentBlock,contract,releaseBlockNumber,setState]);return _objectSpread(_objectSpread({},state),{},{currencyPriceInUSD:lpTokenPriceInUsd});};export default useGetPublicIfoData;","map":{"version":3,"sources":["D:/task159/frontend/src/hooks/ifo/v1/useGetPublicIfoData.ts"],"names":["BigNumber","BSC_BLOCK_TIME","PoolIds","useBlock","useLpTokenPrice","useIfoV1Contract","useEffect","useState","makeBatchRequest","getStatus","useGetPublicIfoData","ifo","address","releaseBlockNumber","lpTokenPriceInUsd","currency","symbol","status","blocksRemaining","secondsUntilStart","progress","secondsUntilEnd","startBlockNum","endBlockNum","numberPoints","poolUnlimited","raisingAmountPool","totalAmountPool","offeringAmountPool","limitPerUserInLP","taxRate","sumTaxesOverflow","state","setState","currentBlock","contract","fetchProgress","methods","startBlock","call","endBlock","raisingAmount","totalAmount","parseInt","totalBlocks","prev","currencyPriceInUSD"],"mappings":"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","sourcesContent":["import BigNumber from 'bignumber.js'\nimport { BSC_BLOCK_TIME } from 'config'\nimport { Ifo, IfoStatus, PoolIds } from 'config/constants/types'\nimport { useBlock, useLpTokenPrice } from 'state/hooks'\nimport { useIfoV1Contract } from 'hooks/useContract'\nimport { useEffect, useState } from 'react'\nimport makeBatchRequest from 'utils/makeBatchRequest'\nimport { PublicIfoData } from '../types'\nimport { getStatus } from '../helpers'\n\n/**\n * Gets all public data of an IFO\n */\nconst useGetPublicIfoData = (ifo: Ifo): PublicIfoData => {\n  const { address, releaseBlockNumber } = ifo\n  const lpTokenPriceInUsd = useLpTokenPrice(ifo.currency.symbol)\n  const [state, setState] = useState({\n    status: 'idle' as IfoStatus,\n    blocksRemaining: 0,\n    secondsUntilStart: 0,\n    progress: 5,\n    secondsUntilEnd: 0,\n    startBlockNum: 0,\n    endBlockNum: 0,\n    numberPoints: null,\n    [PoolIds.poolUnlimited]: {\n      raisingAmountPool: new BigNumber(0),\n      totalAmountPool: new BigNumber(0),\n      offeringAmountPool: new BigNumber(0), // Not know\n      limitPerUserInLP: new BigNumber(0), //  Not used\n      taxRate: 0, //  Not used\n      sumTaxesOverflow: new BigNumber(0), //  Not used\n    },\n  })\n  const { currentBlock } = useBlock()\n  const contract = useIfoV1Contract(address)\n\n  useEffect(() => {\n    const fetchProgress = async () => {\n      const [startBlock, endBlock, raisingAmount, totalAmount] = (await makeBatchRequest([\n        contract.methods.startBlock().call,\n        contract.methods.endBlock().call,\n        contract.methods.raisingAmount().call,\n        contract.methods.totalAmount().call,\n      ])) as [string, string, string, string]\n\n      const startBlockNum = parseInt(startBlock, 10)\n      const endBlockNum = parseInt(endBlock, 10)\n\n      const status = getStatus(currentBlock, startBlockNum, endBlockNum)\n      const totalBlocks = endBlockNum - startBlockNum\n      const blocksRemaining = endBlockNum - currentBlock\n\n      // Calculate the total progress until finished or until start\n      const progress =\n        currentBlock > startBlockNum\n          ? ((currentBlock - startBlockNum) / totalBlocks) * 100\n          : ((currentBlock - releaseBlockNumber) / (startBlockNum - releaseBlockNumber)) * 100\n\n      setState((prev) => ({\n        status,\n        blocksRemaining,\n        secondsUntilStart: (startBlockNum - currentBlock) * BSC_BLOCK_TIME,\n        progress,\n        secondsUntilEnd: blocksRemaining * BSC_BLOCK_TIME,\n        startBlockNum,\n        endBlockNum,\n        currencyPriceInUSD: null,\n        numberPoints: null,\n        [PoolIds.poolUnlimited]: {\n          ...prev.poolUnlimited,\n          raisingAmountPool: new BigNumber(raisingAmount),\n          totalAmountPool: new BigNumber(totalAmount),\n        },\n      }))\n    }\n\n    fetchProgress()\n  }, [address, currentBlock, contract, releaseBlockNumber, setState])\n\n  return { ...state, currencyPriceInUSD: lpTokenPriceInUsd }\n}\n\nexport default useGetPublicIfoData\n"]},"metadata":{},"sourceType":"module"}