{"ast":null,"code":"import { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nvar _jsxFileName = \"D:\\\\task159\\\\frontend\\\\src\\\\views\\\\Profile\\\\components\\\\EditProfileModal\\\\ChangeProfilePicView.tsx\",\n    _s = $RefreshSig$();\n\nimport React, { useState } from 'react';\nimport { Button, Skeleton, Text } from '@pancakeswap-libs/uikit';\nimport { useWallet } from '@binance-chain/bsc-use-wallet';\nimport { useAppDispatch } from 'state';\nimport { useGetCollectibles, useProfile, useToast } from 'state/hooks';\nimport useI18n from 'hooks/useI18n';\nimport { fetchProfile } from 'state/profile';\nimport { getAddressByType } from 'utils/collectibles';\nimport useApproveConfirmTransaction from 'hooks/useApproveConfirmTransaction';\nimport { useERC721, useProfile as useProfileContract } from 'hooks/useContract';\nimport { getPancakeProfileAddress } from 'utils/addressHelpers';\nimport SelectionCard from '../SelectionCard';\nimport ApproveConfirmButtons from '../ApproveConfirmButtons';\n\nconst ChangeProfilePicPage = ({\n  onDismiss\n}) => {\n  _s();\n\n  const [selectedNft, setSelectedNft] = useState({\n    tokenId: null,\n    nftAddress: null\n  });\n  const TranslateString = useI18n();\n  const {\n    isLoading,\n    tokenIds,\n    nftsInWallet\n  } = useGetCollectibles();\n  const dispatch = useAppDispatch();\n  const {\n    profile\n  } = useProfile();\n  const contract = useERC721(selectedNft.nftAddress);\n  const profileContract = useProfileContract();\n  const {\n    account\n  } = useWallet();\n  const {\n    toastSuccess\n  } = useToast();\n  const {\n    isApproving,\n    isApproved,\n    isConfirmed,\n    isConfirming,\n    handleApprove,\n    handleConfirm\n  } = useApproveConfirmTransaction({\n    onApprove: () => {\n      return contract.methods.approve(getPancakeProfileAddress(), selectedNft.tokenId).send({\n        from: account\n      });\n    },\n    onConfirm: () => {\n      if (!profile.isActive) {\n        return profileContract.methods.reactivateProfile(selectedNft.nftAddress, selectedNft.tokenId).send({\n          from: account\n        });\n      }\n\n      return profileContract.methods.updateProfile(selectedNft.nftAddress, selectedNft.tokenId).send({\n        from: account\n      });\n    },\n    onSuccess: async () => {\n      // Re-fetch profile\n      await dispatch(fetchProfile(account));\n      toastSuccess('Profile Updated!');\n      onDismiss();\n    }\n  });\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: [/*#__PURE__*/_jsxDEV(Text, {\n      as: \"p\",\n      color: \"textSubtle\",\n      mb: \"24px\",\n      children: TranslateString(999, 'Choose a new Collectible to use as your profile pic.')\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 63,\n      columnNumber: 7\n    }, this), isLoading ? /*#__PURE__*/_jsxDEV(Skeleton, {\n      height: \"80px\",\n      mb: \"16px\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 67,\n      columnNumber: 9\n    }, this) : nftsInWallet.map(walletNft => {\n      const [firstTokenId] = tokenIds[walletNft.identifier];\n\n      const handleChange = value => {\n        setSelectedNft({\n          tokenId: Number(value),\n          nftAddress: getAddressByType(walletNft.type)\n        });\n      };\n\n      return /*#__PURE__*/_jsxDEV(SelectionCard, {\n        name: \"profilePicture\",\n        value: firstTokenId,\n        image: `/images/nfts/${walletNft.images.md}`,\n        isChecked: firstTokenId === selectedNft.tokenId,\n        onChange: handleChange,\n        disabled: isApproving || isConfirming || isConfirmed,\n        children: /*#__PURE__*/_jsxDEV(Text, {\n          bold: true,\n          children: walletNft.name\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 88,\n          columnNumber: 15\n        }, this)\n      }, walletNft.identifier, false, {\n        fileName: _jsxFileName,\n        lineNumber: 79,\n        columnNumber: 13\n      }, this);\n    }), !isLoading && nftsInWallet.length === 0 && /*#__PURE__*/_jsxDEV(_Fragment, {\n      children: [/*#__PURE__*/_jsxDEV(Text, {\n        as: \"p\",\n        color: \"textSubtle\",\n        mb: \"16px\",\n        children: TranslateString(999, 'Sorry! You donâ€™t have any eligible Collectibles in your wallet to use!')\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 95,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(Text, {\n        as: \"p\",\n        color: \"textSubtle\",\n        mb: \"24px\",\n        children: TranslateString(999, 'Make sure you have a Pancake Collectible in your wallet and try again!')\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 98,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true), /*#__PURE__*/_jsxDEV(ApproveConfirmButtons, {\n      isApproveDisabled: isConfirmed || isConfirming || isApproved || selectedNft.tokenId === null,\n      isApproving: isApproving,\n      isConfirmDisabled: !isApproved || isConfirmed || selectedNft.tokenId === null,\n      isConfirming: isConfirming,\n      onApprove: handleApprove,\n      onConfirm: handleConfirm\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 103,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Button, {\n      variant: \"text\",\n      width: \"100%\",\n      onClick: onDismiss,\n      disabled: isApproving || isConfirming,\n      children: TranslateString(999, 'Close Window')\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 111,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true);\n};\n\n_s(ChangeProfilePicPage, \"lkLbO39EeaS9EiTkGrLH3nMA2I0=\", false, function () {\n  return [useI18n, useGetCollectibles, useAppDispatch, useProfile, useERC721, useProfileContract, useWallet, useToast, useApproveConfirmTransaction];\n});\n\n_c = ChangeProfilePicPage;\nexport default ChangeProfilePicPage;\n\nvar _c;\n\n$RefreshReg$(_c, \"ChangeProfilePicPage\");","map":{"version":3,"sources":["D:/task159/frontend/src/views/Profile/components/EditProfileModal/ChangeProfilePicView.tsx"],"names":["React","useState","Button","Skeleton","Text","useWallet","useAppDispatch","useGetCollectibles","useProfile","useToast","useI18n","fetchProfile","getAddressByType","useApproveConfirmTransaction","useERC721","useProfileContract","getPancakeProfileAddress","SelectionCard","ApproveConfirmButtons","ChangeProfilePicPage","onDismiss","selectedNft","setSelectedNft","tokenId","nftAddress","TranslateString","isLoading","tokenIds","nftsInWallet","dispatch","profile","contract","profileContract","account","toastSuccess","isApproving","isApproved","isConfirmed","isConfirming","handleApprove","handleConfirm","onApprove","methods","approve","send","from","onConfirm","isActive","reactivateProfile","updateProfile","onSuccess","map","walletNft","firstTokenId","identifier","handleChange","value","Number","type","images","md","name","length"],"mappings":"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","sourcesContent":["import React, { useState } from 'react'\nimport { Button, InjectedModalProps, Skeleton, Text } from '@pancakeswap-libs/uikit'\nimport { useWeb3React } from '@web3-react/core'\nimport { useWallet } from '@binance-chain/bsc-use-wallet'\nimport { useAppDispatch } from 'state'\nimport { useGetCollectibles, useProfile, useToast } from 'state/hooks'\nimport useI18n from 'hooks/useI18n'\nimport { fetchProfile } from 'state/profile'\nimport { getAddressByType } from 'utils/collectibles'\nimport useApproveConfirmTransaction from 'hooks/useApproveConfirmTransaction'\nimport { useERC721, useProfile as useProfileContract } from 'hooks/useContract'\nimport { getPancakeProfileAddress } from 'utils/addressHelpers'\nimport SelectionCard from '../SelectionCard'\nimport ApproveConfirmButtons from '../ApproveConfirmButtons'\n\n\ntype ChangeProfilePicPageProps = InjectedModalProps\n\nconst ChangeProfilePicPage: React.FC<ChangeProfilePicPageProps> = ({ onDismiss }) => {\n  const [selectedNft, setSelectedNft] = useState({\n    tokenId: null,\n    nftAddress: null,\n  })\n  const TranslateString = useI18n()\n  const { isLoading, tokenIds, nftsInWallet } = useGetCollectibles()\n  const dispatch = useAppDispatch()\n  const { profile } = useProfile()\n  const contract = useERC721(selectedNft.nftAddress)\n  const profileContract = useProfileContract()\n  const { account } = useWallet()\n  const { toastSuccess } = useToast()\n  const {\n    isApproving,\n    isApproved,\n    isConfirmed,\n    isConfirming,\n    handleApprove,\n    handleConfirm,\n  } = useApproveConfirmTransaction({\n    onApprove: () => {\n      return contract.methods.approve(getPancakeProfileAddress(), selectedNft.tokenId).send({ from: account })\n    },\n    onConfirm: () => {\n      if (!profile.isActive) {\n        return profileContract.methods\n          .reactivateProfile(selectedNft.nftAddress, selectedNft.tokenId)\n          .send({ from: account })\n      }\n\n      return profileContract.methods.updateProfile(selectedNft.nftAddress, selectedNft.tokenId).send({ from: account })\n    },\n    onSuccess: async () => {\n      // Re-fetch profile\n      await dispatch(fetchProfile(account))\n      toastSuccess('Profile Updated!')\n\n      onDismiss()\n    },\n  })\n\n  return (\n    <>\n      <Text as=\"p\" color=\"textSubtle\" mb=\"24px\">\n        {TranslateString(999, 'Choose a new Collectible to use as your profile pic.')}\n      </Text>\n      {isLoading ? (\n        <Skeleton height=\"80px\" mb=\"16px\" />\n      ) : (\n        nftsInWallet.map((walletNft) => {\n          const [firstTokenId] = tokenIds[walletNft.identifier]\n          const handleChange = (value: string) => {\n            setSelectedNft({\n              tokenId: Number(value),\n              nftAddress: getAddressByType(walletNft.type),\n            })\n          }\n\n          return (\n            <SelectionCard\n              name=\"profilePicture\"\n              key={walletNft.identifier}\n              value={firstTokenId}\n              image={`/images/nfts/${walletNft.images.md}`}\n              isChecked={firstTokenId === selectedNft.tokenId}\n              onChange={handleChange}\n              disabled={isApproving || isConfirming || isConfirmed}\n            >\n              <Text bold>{walletNft.name}</Text>\n            </SelectionCard>\n          )\n        })\n      )}\n      {!isLoading && nftsInWallet.length === 0 && (\n        <>\n          <Text as=\"p\" color=\"textSubtle\" mb=\"16px\">\n            {TranslateString(999, 'Sorry! You donâ€™t have any eligible Collectibles in your wallet to use!')}\n          </Text>\n          <Text as=\"p\" color=\"textSubtle\" mb=\"24px\">\n            {TranslateString(999, 'Make sure you have a Pancake Collectible in your wallet and try again!')}\n          </Text>\n        </>\n      )}\n      <ApproveConfirmButtons\n        isApproveDisabled={isConfirmed || isConfirming || isApproved || selectedNft.tokenId === null}\n        isApproving={isApproving}\n        isConfirmDisabled={!isApproved || isConfirmed || selectedNft.tokenId === null}\n        isConfirming={isConfirming}\n        onApprove={handleApprove}\n        onConfirm={handleConfirm}\n      />\n      <Button variant=\"text\" width=\"100%\" onClick={onDismiss} disabled={isApproving || isConfirming}>\n        {TranslateString(999, 'Close Window')}\n      </Button>\n    </>\n  )\n}\n\nexport default ChangeProfilePicPage\n"]},"metadata":{},"sourceType":"module"}