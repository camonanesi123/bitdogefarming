{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nvar _jsxFileName = \"C:\\\\Users\\\\hexia\\\\Desktop\\\\pancake_fork\\\\frontend\\\\src\\\\views\\\\Farms\\\\Farms.tsx\",\n    _s = $RefreshSig$();\n\nimport React, { useEffect, useCallback, useState } from 'react';\nimport { Route, useRouteMatch } from 'react-router-dom';\nimport { useDispatch } from 'react-redux';\nimport BigNumber from 'bignumber.js';\nimport { useWallet } from '@binance-chain/bsc-use-wallet';\nimport { Heading } from '@pancakeswap-libs/uikit';\nimport { BLOCKS_PER_YEAR } from 'config';\nimport FlexLayout from 'components/layout/Flex';\nimport Page from 'components/layout/Page';\nimport { useFarms, usePriceBnbBusd, usePriceCakeBusd, usePrice3CakeBusd } from 'state/hooks';\nimport useRefresh from 'hooks/useRefresh';\nimport { fetchFarmUserDataAsync } from 'state/actions';\nimport { QuoteToken } from 'config/constants/types';\nimport useI18n from 'hooks/useI18n';\nimport FarmCard from './components/FarmCard/FarmCard';\nimport FarmTabButtons from './components/FarmTabButtons';\nimport Divider from './components/Divider';\n\nconst Farms = farmsProps => {\n  _s();\n\n  const {\n    path\n  } = useRouteMatch();\n  const TranslateString = useI18n();\n  const farmsLP = useFarms();\n  const cakePrice = usePriceCakeBusd();\n  const senzuPrice = usePrice3CakeBusd();\n  const bnbPrice = usePriceBnbBusd();\n  const {\n    account,\n    ethereum\n  } = useWallet();\n  const {\n    tokenMode\n  } = farmsProps;\n  const dispatch = useDispatch();\n  const {\n    fastRefresh\n  } = useRefresh();\n  useEffect(() => {\n    if (account) {\n      dispatch(fetchFarmUserDataAsync(account));\n    }\n  }, [account, dispatch, fastRefresh]);\n  const [stakedOnly, setStakedOnly] = useState(false);\n  const activeFarms = farmsLP.filter(farm => !!farm.isTokenOnly === !!tokenMode && farm.multiplier === '0X'); // const inactiveFarms = farmsLP.filter((farm) => !!farm.isTokenOnly === !!tokenMode && farm.multiplier === '0X')\n\n  const inactiveFarms = farmsLP.filter(farm => !!farm.isTokenOnly === !!tokenMode && farm.multiplier === '0X');\n  const stakedOnlyFarms = activeFarms.filter(farm => farm.userData && new BigNumber(farm.userData.stakedBalance).isGreaterThan(0)); // /!\\ This function will be removed soon\n  // This function compute the APY for each farm and will be replaced when we have a reliable API\n  // to retrieve assets prices against USD\n\n  const farmsList = useCallback((farmsToDisplay, removed) => {\n    // const cakePriceVsBNB = new BigNumber(farmsLP.find((farm) => farm.pid === CAKE_POOL_PID)?.tokenPriceVsQuote || 0)\n    const farmsToDisplayWithAPY = farmsToDisplay.map(farm => {\n      // if (!farm.tokenAmount || !farm.lpTotalInQuoteToken || !farm.lpTotalInQuoteToken) {\n      //   return farm\n      // }\n      const cakeRewardPerBlock = new BigNumber(farm.dballPerBlock || 1).times(new BigNumber(farm.poolWeight)).div(new BigNumber(10).pow(18));\n      const cakeRewardPerYear = cakeRewardPerBlock.times(BLOCKS_PER_YEAR);\n      let apy = cakePrice.times(cakeRewardPerYear);\n      let totalValue = new BigNumber(farm.lpTotalInQuoteToken || 0);\n      const cake2Price = new BigNumber(22);\n\n      if (farm.quoteTokenSymbol === QuoteToken.BNB) {\n        totalValue = totalValue.times(bnbPrice);\n      }\n\n      if (farm.quoteTokenSymbol === QuoteToken.SENZU) {\n        totalValue = totalValue.times(senzuPrice);\n      }\n\n      if (farm.quoteTokenSymbol === QuoteToken.CAKE2) {\n        totalValue = totalValue.times(cake2Price);\n      }\n\n      if (totalValue.comparedTo(0) > 0) {\n        apy = apy.div(totalValue);\n      }\n\n      return { ...farm,\n        apy\n      };\n    });\n    return farmsToDisplayWithAPY.map(farm => /*#__PURE__*/_jsxDEV(FarmCard, {\n      farm: farm,\n      removed: removed,\n      bnbPrice: bnbPrice,\n      cakePrice: cakePrice,\n      senzuPrice: senzuPrice,\n      ethereum: ethereum,\n      account: account\n    }, farm.pid, false, {\n      fileName: _jsxFileName,\n      lineNumber: 89,\n      columnNumber: 9\n    }, this));\n  }, [cakePrice, bnbPrice, senzuPrice, ethereum, account]);\n  return /*#__PURE__*/_jsxDEV(Page, {\n    children: [/*#__PURE__*/_jsxDEV(Heading, {\n      as: \"h1\",\n      size: \"lg\",\n      color: \"primary\",\n      mb: \"50px\",\n      style: {\n        textAlign: 'center'\n      },\n      children: tokenMode ? 'Stake tokens to earn BDOGS' : 'Stake LP tokens to earn BDOGS'\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 106,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Heading, {\n      as: \"h2\",\n      color: \"secondary\",\n      mb: \"50px\",\n      style: {\n        textAlign: 'center'\n      },\n      children: \"Deposit Fee will be used to buyback BDOGS\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 114,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Heading, {\n      as: \"h2\",\n      color: \"secondary\",\n      mb: \"50px\",\n      style: {\n        textAlign: 'center'\n      },\n      children: \"All Farms and Pools have 2% Unstaking Fee\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 117,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(FarmTabButtons, {\n      stakedOnly: stakedOnly,\n      setStakedOnly: setStakedOnly\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 120,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [/*#__PURE__*/_jsxDEV(Divider, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 122,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(FlexLayout, {\n        children: [/*#__PURE__*/_jsxDEV(Route, {\n          exact: true,\n          path: `${path}`,\n          children: stakedOnly ? farmsList(stakedOnlyFarms, false) : farmsList(activeFarms, false)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 124,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(Route, {\n          exact: true,\n          path: `${path}/history`,\n          children: farmsList(inactiveFarms, true)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 127,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 123,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 121,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 105,\n    columnNumber: 5\n  }, this);\n};\n\n_s(Farms, \"BAGQbQbXPl/7H1AOcl23CB+QHlk=\", false, function () {\n  return [useRouteMatch, useI18n, useFarms, usePriceCakeBusd, usePrice3CakeBusd, usePriceBnbBusd, useWallet, useDispatch, useRefresh];\n});\n\n_c = Farms;\nexport default Farms;\n\nvar _c;\n\n$RefreshReg$(_c, \"Farms\");","map":{"version":3,"sources":["C:/Users/hexia/Desktop/pancake_fork/frontend/src/views/Farms/Farms.tsx"],"names":["React","useEffect","useCallback","useState","Route","useRouteMatch","useDispatch","BigNumber","useWallet","Heading","BLOCKS_PER_YEAR","FlexLayout","Page","useFarms","usePriceBnbBusd","usePriceCakeBusd","usePrice3CakeBusd","useRefresh","fetchFarmUserDataAsync","QuoteToken","useI18n","FarmCard","FarmTabButtons","Divider","Farms","farmsProps","path","TranslateString","farmsLP","cakePrice","senzuPrice","bnbPrice","account","ethereum","tokenMode","dispatch","fastRefresh","stakedOnly","setStakedOnly","activeFarms","filter","farm","isTokenOnly","multiplier","inactiveFarms","stakedOnlyFarms","userData","stakedBalance","isGreaterThan","farmsList","farmsToDisplay","removed","farmsToDisplayWithAPY","map","cakeRewardPerBlock","dballPerBlock","times","poolWeight","div","pow","cakeRewardPerYear","apy","totalValue","lpTotalInQuoteToken","cake2Price","quoteTokenSymbol","BNB","SENZU","CAKE2","comparedTo","pid","textAlign"],"mappings":"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","sourcesContent":["import React, { useEffect, useCallback, useState, useMemo } from 'react'\nimport { Route, useRouteMatch } from 'react-router-dom'\nimport { useDispatch } from 'react-redux'\nimport BigNumber from 'bignumber.js'\nimport { useWallet } from '@binance-chain/bsc-use-wallet'\nimport { provider } from 'web3-core'\nimport { Image, Heading } from '@pancakeswap-libs/uikit'\nimport { BLOCKS_PER_YEAR, CAKE_PER_BLOCK, CAKE_POOL_PID } from 'config'\nimport FlexLayout from 'components/layout/Flex'\nimport Page from 'components/layout/Page'\nimport { useFarms, usePriceBnbBusd, usePriceCakeBusd, usePrice3CakeBusd } from 'state/hooks'\nimport useRefresh from 'hooks/useRefresh'\nimport { fetchFarmUserDataAsync } from 'state/actions'\nimport { QuoteToken } from 'config/constants/types'\nimport useI18n from 'hooks/useI18n'\nimport FarmCard, { FarmWithStakedValue } from './components/FarmCard/FarmCard'\nimport FarmTabButtons from './components/FarmTabButtons'\nimport Divider from './components/Divider'\n\nexport interface FarmsProps{\n  tokenMode?: boolean\n}\n\nconst Farms: React.FC<FarmsProps> = (farmsProps) => {\n  const { path } = useRouteMatch()\n  const TranslateString = useI18n()\n  const farmsLP = useFarms()\n  const cakePrice = usePriceCakeBusd()\n  const senzuPrice = usePrice3CakeBusd()\n  const bnbPrice = usePriceBnbBusd()\n  const { account, ethereum }: { account: string; ethereum: provider } = useWallet()\n  const {tokenMode} = farmsProps;\n\n  const dispatch = useDispatch()\n  const { fastRefresh } = useRefresh()\n  useEffect(() => {\n    if (account) {\n      dispatch(fetchFarmUserDataAsync(account))\n    }\n  }, [account, dispatch, fastRefresh])\n\n  const [stakedOnly, setStakedOnly] = useState(false)\n\n  const activeFarms = farmsLP.filter((farm) => !!farm.isTokenOnly === !!tokenMode && farm.multiplier === '0X')\n  // const inactiveFarms = farmsLP.filter((farm) => !!farm.isTokenOnly === !!tokenMode && farm.multiplier === '0X')\n  const inactiveFarms = farmsLP.filter((farm) => !!farm.isTokenOnly === !!tokenMode && farm.multiplier === '0X')\n\n  const stakedOnlyFarms = activeFarms.filter(\n    (farm) => farm.userData && new BigNumber(farm.userData.stakedBalance).isGreaterThan(0),\n  )\n\n  // /!\\ This function will be removed soon\n  // This function compute the APY for each farm and will be replaced when we have a reliable API\n  // to retrieve assets prices against USD\n  const farmsList = useCallback(\n    (farmsToDisplay, removed: boolean) => {\n      // const cakePriceVsBNB = new BigNumber(farmsLP.find((farm) => farm.pid === CAKE_POOL_PID)?.tokenPriceVsQuote || 0)\n      const farmsToDisplayWithAPY: FarmWithStakedValue[] = farmsToDisplay.map((farm) => {\n        // if (!farm.tokenAmount || !farm.lpTotalInQuoteToken || !farm.lpTotalInQuoteToken) {\n        //   return farm\n        // }\n        const cakeRewardPerBlock = new BigNumber(farm.dballPerBlock || 1).times(new BigNumber(farm.poolWeight)) .div(new BigNumber(10).pow(18))\n        const cakeRewardPerYear = cakeRewardPerBlock.times(BLOCKS_PER_YEAR)\n\n        let apy = cakePrice.times(cakeRewardPerYear)\n\n        let totalValue = new BigNumber(farm.lpTotalInQuoteToken || 0)\n    \n        const cake2Price = new BigNumber(22)\n        \n\n        if (farm.quoteTokenSymbol === QuoteToken.BNB) {\n          totalValue = totalValue.times(bnbPrice);\n        }\n        if (farm.quoteTokenSymbol === QuoteToken.SENZU) {\n          totalValue = totalValue.times(senzuPrice);\n        }\n        if (farm.quoteTokenSymbol === QuoteToken.CAKE2) {\n          totalValue = totalValue.times(cake2Price);\n        }\n\n        if(totalValue.comparedTo(0) > 0){\n          apy = apy.div(totalValue);\n        }\n\n        return { ...farm, apy }\n      })\n      return farmsToDisplayWithAPY.map((farm) => (\n        <FarmCard\n          key={farm.pid}\n          farm={farm}\n          removed={removed}\n          bnbPrice={bnbPrice}\n          cakePrice={cakePrice}\n          senzuPrice={senzuPrice}\n          ethereum={ethereum}\n          account={account}\n        />\n      ))\n    },\n    [cakePrice, bnbPrice, senzuPrice, ethereum, account],\n  )\n\n  return (\n    <Page>\n      <Heading as=\"h1\" size=\"lg\" color=\"primary\" mb=\"50px\" style={{ textAlign: 'center' }}>\n        {\n          tokenMode ?\n            'Stake tokens to earn BDOGS'\n            :\n          'Stake LP tokens to earn BDOGS'\n        }\n      </Heading>\n      <Heading as=\"h2\" color=\"secondary\" mb=\"50px\" style={{ textAlign: 'center' }}>\n       Deposit Fee will be used to buyback BDOGS\n      </Heading>\n      <Heading as=\"h2\" color=\"secondary\" mb=\"50px\" style={{ textAlign: 'center' }}>\n        All Farms and Pools have 2% Unstaking Fee\n      </Heading>\n      <FarmTabButtons stakedOnly={stakedOnly} setStakedOnly={setStakedOnly}/>\n      <div>\n        <Divider />\n        <FlexLayout>\n          <Route exact path={`${path}`}>\n            {stakedOnly ? farmsList(stakedOnlyFarms, false) : farmsList(activeFarms, false)}\n          </Route>\n          <Route exact path={`${path}/history`}>\n            {farmsList(inactiveFarms, true)}\n          </Route>\n        </FlexLayout>\n      </div>\n      {/* <Image src=\"/images/egg/8.png\" alt=\"illustration\" width={1352} height={587} responsive /> */}\n    </Page>\n  )\n}\n\nexport default Farms\n"]},"metadata":{},"sourceType":"module"}