{"ast":null,"code":"import _regeneratorRuntime from\"D:/task159/frontend/node_modules/babel-preset-react-app/node_modules/@babel/runtime/regenerator\";import _objectSpread from\"D:/task159/frontend/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/objectSpread2\";import _asyncToGenerator from\"D:/task159/frontend/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/asyncToGenerator\";import _slicedToArray from\"D:/task159/frontend/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/slicedToArray\";import{useEffect,useState}from'react';import BigNumber from'bignumber.js';import{useWallet}from'@binance-chain/bsc-use-wallet';import multicall from'utils/multicall';import{getMasterChefAddress,getMasterChef3Address}from'utils/addressHelpers';import masterChefABI from'config/abi/masterchef.json';import masterChef3ABI from'config/abi/masterchef3.json';import{farmsConfig,farms3Config}from'config/constants';import useRefresh from'./useRefresh';var useFarmsWithBalance=function useFarmsWithBalance(){var _useState=useState([]),_useState2=_slicedToArray(_useState,2),farmsWithBalances=_useState2[0],setFarmsWithBalances=_useState2[1];var _useWallet=useWallet(),account=_useWallet.account;var _useRefresh=useRefresh(),fastRefresh=_useRefresh.fastRefresh;useEffect(function(){var fetchBalances=/*#__PURE__*/function(){var _ref=_asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee(){var calls,rawResults,results;return _regeneratorRuntime.wrap(function _callee$(_context){while(1){switch(_context.prev=_context.next){case 0:calls=farmsConfig.map(function(farm){return{address:getMasterChefAddress(),name:'pendingEgg',params:[farm.pid,account]};});_context.next=3;return multicall(masterChefABI,calls);case 3:rawResults=_context.sent;results=farmsConfig.map(function(farm,index){return _objectSpread(_objectSpread({},farm),{},{balance:new BigNumber(rawResults[index])});});setFarmsWithBalances(results);case 6:case\"end\":return _context.stop();}}},_callee);}));return function fetchBalances(){return _ref.apply(this,arguments);};}();if(account){fetchBalances();}},[account,fastRefresh]);return farmsWithBalances;};export var useFarms3WithBalance=function useFarms3WithBalance(){var _useState3=useState([]),_useState4=_slicedToArray(_useState3,2),farms3WithBalances=_useState4[0],setFarms3WithBalances=_useState4[1];var _useWallet2=useWallet(),account=_useWallet2.account;var _useRefresh2=useRefresh(),fastRefresh=_useRefresh2.fastRefresh;useEffect(function(){var fetchBalances=/*#__PURE__*/function(){var _ref2=_asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee2(){var calls,rawResults,results;return _regeneratorRuntime.wrap(function _callee2$(_context2){while(1){switch(_context2.prev=_context2.next){case 0:calls=farms3Config.map(function(farm){return{address:getMasterChef3Address(),name:'pendingEgg',params:[farm.pid,account]};});_context2.next=3;return multicall(masterChef3ABI,calls);case 3:rawResults=_context2.sent;results=farms3Config.map(function(farm,index){return _objectSpread(_objectSpread({},farm),{},{balance:new BigNumber(rawResults[index])});});setFarms3WithBalances(results);case 6:case\"end\":return _context2.stop();}}},_callee2);}));return function fetchBalances(){return _ref2.apply(this,arguments);};}();if(account){fetchBalances();}},[account,fastRefresh]);return farms3WithBalances;};export default useFarmsWithBalance;","map":{"version":3,"sources":["D:/task159/frontend/src/hooks/useFarmsWithBalance.ts"],"names":["useEffect","useState","BigNumber","useWallet","multicall","getMasterChefAddress","getMasterChef3Address","masterChefABI","masterChef3ABI","farmsConfig","farms3Config","useRefresh","useFarmsWithBalance","farmsWithBalances","setFarmsWithBalances","account","fastRefresh","fetchBalances","calls","map","farm","address","name","params","pid","rawResults","results","index","balance","useFarms3WithBalance","farms3WithBalances","setFarms3WithBalances"],"mappings":"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","sourcesContent":["import { useEffect, useState } from 'react'\nimport BigNumber from 'bignumber.js'\nimport { useWallet } from '@binance-chain/bsc-use-wallet'\nimport multicall from 'utils/multicall'\nimport { getMasterChefAddress, getMasterChef3Address } from 'utils/addressHelpers'\nimport masterChefABI from 'config/abi/masterchef.json'\nimport masterChef3ABI from 'config/abi/masterchef3.json'\nimport { farmsConfig, farms3Config } from 'config/constants'\nimport { FarmConfig, Farm3Config } from 'config/constants/types'\nimport useRefresh from './useRefresh'\n\nexport interface FarmWithBalance extends FarmConfig {\n  balance: BigNumber\n}\n\nexport interface Farm3WithBalance extends Farm3Config {\n  balance: BigNumber\n}\n\nconst useFarmsWithBalance = () => {\n  const [farmsWithBalances, setFarmsWithBalances] = useState<FarmWithBalance[]>([])\n  const { account } = useWallet()\n  const { fastRefresh } = useRefresh()\n\n  useEffect(() => {\n    const fetchBalances = async () => {\n      const calls = farmsConfig.map((farm) => ({\n        address: getMasterChefAddress(),\n        name: 'pendingEgg',\n        params: [farm.pid, account],\n      }))\n\n      const rawResults = await multicall(masterChefABI, calls)\n      const results = farmsConfig.map((farm, index) => ({ ...farm, balance: new BigNumber(rawResults[index]) }))\n\n      setFarmsWithBalances(results)\n    }\n\n    if (account) {\n      fetchBalances()\n    }\n  }, [account, fastRefresh])\n\n  return farmsWithBalances\n}\n\nexport const useFarms3WithBalance = () => {\n  const [farms3WithBalances, setFarms3WithBalances] = useState<Farm3WithBalance[]>([])\n  const { account } = useWallet()\n  const { fastRefresh } = useRefresh()\n\n  useEffect(() => {\n    const fetchBalances = async () => {\n      const calls = farms3Config.map((farm) => ({\n        address: getMasterChef3Address(),\n        name: 'pendingEgg',\n        params: [farm.pid, account],\n      }))\n\n      const rawResults = await multicall(masterChef3ABI, calls)\n      const results = farms3Config.map((farm, index) => ({ ...farm, balance: new BigNumber(rawResults[index]) }))\n\n      setFarms3WithBalances(results)\n    }\n\n    if (account) {\n      fetchBalances()\n    }\n  }, [account, fastRefresh])\n\n  return farms3WithBalances\n}\n\nexport default useFarmsWithBalance\n"]},"metadata":{},"sourceType":"module"}